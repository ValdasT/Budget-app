{"version":3,"sources":["components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Expenses/AddExpense/AddExpense.js","pages/Expenses.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["spinner","react_default","a","createElement","className","React","createContext","token","userId","login","tokenExpiration","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","react","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","Provider","value","auth_context","values","time","JSON","stringify","Date","getTime","query","variables","surname","createdAt","updatedAt","body","ok","statusText","concat","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","_id","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","deleteBookingHandler","bookingId","requestBody","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","submitExpense","showModal","setShowModal","expense","onUpdate","group","updateDate","handleChange","setFieldValue","handleBlur","onBlur","target","slice","split","indexOf","substr","replace","validatePrice","md_index_esm","size","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","pleaseformat","index_esm","actionFunction","Expense","docId","setDocId","ExpensesContext","removeExpense","updateExpense","updatedFields","confirmationModal","Modal_AddExpenseModal","background","Expenselist","allExpenses","Expense_Expense_Expense","AddExpenseForm","_useContext2","Expenses","currentUser","_currentValue","setAllExpenses","_useState11","_useState12","getExpenseList","expenses","convertTimeToMs","valueOf","expenseId","newExpensesList","forEach","message","newArray","createExpense","AddExpense_AddExpenseForm","ExpensesList_Expenselist","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"8kBAYeA,iBARC,kBACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCCNRC,MAAMC,cAAc,CAC/BC,MAAO,KACPC,OAAQ,KACRC,MAAO,SAACF,EAAOC,EAAQE,KACvBC,OAAQ,eCLNC,EAAeP,IAAMC,gCCwFZO,EAlFA,WAAM,IAAAC,EAE4BC,qBAAWC,GAAhDC,EAFSH,EAETG,cAAeC,EAFNJ,EAEMI,kBAEvB,OACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,cAAe,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAErBC,iBAAkBC,WAAaC,MAAM,CACjCP,UAAWM,WACNE,SAAS,0BACdP,SAAUK,WACLE,SAAS,yBACdN,MAAOI,WACFJ,MAAM,oBACNM,SAAS,qBACdL,SAAUG,WACLG,IAAI,EAAG,0CACPD,SAAS,wBACdJ,gBAAiBE,WACZI,MAAM,CAACJ,MAAQ,YAAa,MAAO,wBACnCE,SAAS,kCAElBG,SAAU,SAAAC,GACNhB,EAAcgB,IAElBC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAgBC,GAAnBF,EAAWG,OAAXH,EAAmBE,SAAnB,OACJpC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMf,UAAU,YAAYmC,GAAG,qBAC3BtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,6BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,aAAnD,cACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,YAAYC,KAAK,YAAYC,KAAK,OAAOvC,UAAW,gBAAkBgC,EAAOf,WAAagB,EAAQhB,UAAY,cAAgB,MACjJpB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,YAAYE,UAAU,MAAMxC,UAAU,uBAGjEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,YAAnD,aACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,YAAYC,KAAK,WAAWC,KAAK,OAAOvC,UAAW,gBAAkBgC,EAAOd,UAAYe,EAAQf,SAAW,cAAgB,MAC9IrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,WAAWE,UAAU,MAAMxC,UAAU,uBAGhEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,SAAnD,SACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,QAAQC,KAAK,QAAQC,KAAK,OAAOvC,UAAW,gBAAkBgC,EAAOb,OAASc,EAAQd,MAAQ,cAAgB,MACjItB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,QAAQE,UAAU,MAAMxC,UAAU,uBAG7DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,YAAnD,YACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,WAAWC,KAAK,WAAWC,KAAK,WAAWvC,UAAW,gBAAkBgC,EAAOZ,UAAYa,EAAQb,SAAW,cAAgB,MACjJvB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,WAAWE,UAAU,MAAMxC,UAAU,uBAGhEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,mBAAnD,oBACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,UAAUC,KAAK,kBAAkBC,KAAK,WAAWvC,UAAW,gBAAkBgC,EAAOX,iBAAmBY,EAAQZ,gBAAkB,cAAgB,MACrKxB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,kBAAkBE,UAAU,MAAMxC,UAAU,uBAGvEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,SAASvC,UAAU,wBAAhC,YACAH,EAAAC,EAAAC,cAAA,UAAQ0C,QAAS3B,EAAmByB,KAAK,SAASvC,UAAU,0BAA5D,iBCvBT0C,EAlDA,WAAM,IAAAhC,EAE4BC,qBAAWC,GAAhDC,EAFSH,EAETG,cAAeC,EAFNJ,EAEMI,kBAEvB,OACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,cAAe,CACXG,MAAO,GACPC,SAAU,IAEdE,iBAAkBC,WAAaC,MAAM,CACjCL,MAAOI,WACFJ,MAAM,oBACNM,SAAS,qBACdL,SAAUG,WACLE,SAAS,0BAElBG,SAAU,SAAAC,GACNhB,EAAcgB,IAElBC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAgBC,GAAnBF,EAAWG,OAAXH,EAAmBE,SAAnB,OACJpC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMf,UAAU,YAAYmC,GAAG,qBAC3BtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,SAAnD,SACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,QAAQC,KAAK,QAAQC,KAAK,OAAOvC,UAAW,gBAAkBgC,EAAOb,OAASc,EAAQd,MAAQ,cAAgB,MACjItB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,QAAQE,UAAU,MAAMxC,UAAU,uBAG7DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,YAAnD,YACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,WAAWC,KAAK,WAAWC,KAAK,WAAWvC,UAAW,gBAAkBgC,EAAOZ,UAAYa,EAAQb,SAAW,cAAgB,MACjJvB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,WAAWE,UAAU,MAAMxC,UAAU,uBAGhEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,SAASvC,UAAU,wBAAhC,UACAH,EAAAC,EAAAC,cAAA,UAAQ0C,QAAS3B,EAAmByB,KAAK,SAASvC,UAAU,0BAA5D,mCCnBT2C,UAvBG,WAAM,IAAAjC,EACgDC,qBAAWiC,GAAvEC,EADYnC,EACZmC,YAAaC,EADDpC,EACCoC,UAAWC,EADZrC,EACYqC,cAAeC,EAD3BtC,EAC2BsC,iBACzCC,EAAc,kBAAMD,GAAiB,IAE3C,OACInD,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACIC,kBAAgB,gCAChBC,UAAQ,EAACC,KAAMP,EAAeQ,OAAQN,GACtCpD,EAAAC,EAAAC,cAACoD,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACrB5D,EAAAC,EAAAC,cAACoD,EAAA,EAAMO,MAAP,KAAcb,IAElBhD,EAAAC,EAAAC,cAACoD,EAAA,EAAMQ,KAAP,KAAab,GACbjD,EAAAC,EAAAC,cAACoD,EAAA,EAAMS,OAAP,KACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAQC,QAAQ,YAAYrB,QAASQ,GAArC,WC8HLc,EAtIE,WAAM,IAAAC,EACSC,oBAAS,GADlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEaN,oBAAS,GAFtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEdE,EAFcD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAGqBV,oBAAS,GAH9BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGd5B,EAHc6B,EAAA,GAGC5B,EAHD4B,EAAA,GAAAC,EAIiBZ,mBAAS,IAJ1Ba,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAIdhC,EAJciC,EAAA,GAIDC,EAJCD,EAAA,GAAAE,EAKaf,qBALbgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAKdlC,EALcmC,EAAA,GAKHC,EALGD,EAAA,GAOnBE,oBAAU,WACNC,KACD,IAEH,IAAMC,EAAY,SAAC/B,EAAMgC,EAAQC,GAC7BvC,EAAiBM,GACjByB,EAAeO,GACfJ,EAAaK,IAGTlF,EAAUM,qBAAWC,GAArBP,MAEFS,EAAoB,WACtB,OAAOwD,GAAYD,IAGjBe,EAAS,WACXI,MAAM,UAAW,CACbC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACdF,KAAK,SAAAG,GAEF3F,EACI2F,EAAKC,SAAS9F,MACd6F,EAAKC,SAAS7F,UAGrB8F,MAAM,SAAAC,GACHC,QAAQC,IAAI,0BA6ExB,OACIxG,EAAAC,EAAAC,cAACS,EAAa8F,SAAd,CAAuBC,MAAO,CAAE1D,cAAaC,YAAWC,gBAAeC,qBACnEnD,EAAAC,EAAAC,cAACyG,EAAYF,SAAb,CAAsBC,MAAO,CAAE1F,cA3EjB,SAAC4F,GACnB,IAAIC,EAAOC,KAAKC,WAAU,IAAIC,MAAOC,WACrCpC,GAAa,GACb,IAAIqC,EAAQ,CACRA,MAAK,0QASLC,UAAW,CACP7F,MAAOsF,EAAOtF,MACdC,SAAUqF,EAAOrF,WAGrBiD,IACA0C,EAAQ,CACJA,MAAK,2YAQLC,UAAW,CACP7F,MAAOsF,EAAOtF,MACdC,SAAUqF,EAAOrF,SACjBkB,KAAMmE,EAAOxF,UACbgG,QAASR,EAAOvF,SAChBgG,UAAWR,EACXS,UAAWT,KAIvBlB,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUG,GACrBpB,QAAS,CACLC,eAAgB,sBAGnBC,KAAK,SAAAC,GACF,IAAKA,EAAIuB,GAEL,MADA3C,GAAa,GACNoB,EAAIwB,WAEf,OAAOxB,EAAIC,SAEdF,KAAK,SAAAC,GACFpB,GAAa,GACToB,EAAIE,KAAK3F,MACTA,EACIyF,EAAIE,KAAK3F,MAAMF,MACf2F,EAAIE,KAAK3F,MAAMD,OACf0F,EAAIE,KAAK3F,MAAMC,kBAInB+E,GAAU,EAAM,eAAP,MAAAkC,OAA4Bd,EAAOxF,UAAnC,KAAAsG,OAAgDd,EAAOvF,SAAvD,qDACTJ,OAGPoF,MAAM,SAAAC,GAGH,MAFAzB,GAAa,GACbW,GAAU,EAAM,QAAP,uCACHc,KAMoCrF,sBAC1CjB,EAAAC,EAAAC,cAACyH,EAAD,MAEI/C,EAAY5E,EAAAC,EAAAC,cAAC0H,EAAD,MACR5H,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KAEQmB,EAAUxE,EAAAC,EAAAC,cAAC2H,EAAD,MAAa7H,EAAAC,EAAAC,cAAC4H,EAAD,UClHxCC,UAlBK,SAAAC,GAAK,OACvBhI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACX6H,EAAMC,SAASC,IAAI,SAAAC,GAClB,OACEnI,EAAAC,EAAAC,cAAA,MAAIkI,IAAKD,EAAQE,IAAKlI,UAAU,kBAC9BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZgI,EAAQG,MAAMC,MADjB,KAC0B,IACvB,IAAIvB,KAAKmB,EAAQd,WAAWmB,sBAE/BxI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAASoF,EAAMS,SAASC,YAAWP,EAAQE,MAAnE,kCCXNM,EAAmB,CACvBC,MAAO,CACL/G,IAAK,EACLgH,IAAK,KAEPC,OAAQ,CACNjH,IAAK,IACLgH,IAAK,KAEPE,UAAW,CACTlH,IAAK,IACLgH,IAAK,MAuCMG,EAnCO,SAAAhB,GACpB,IAAMiB,EAAY,CAAEC,OAAQ,GAAIC,SAAU,IACtCvC,EAAS,GAFgBwC,EAAA,SAGlBC,GACT,IAAMC,EAAwBtB,EAAMC,SAASsB,OAAO,SAACC,EAAMC,GACzD,OACEA,EAAQnB,MAAMoB,MAAQf,EAAiBU,GAAQxH,KAC/C4H,EAAQnB,MAAMoB,MAAQf,EAAiBU,GAAQR,IAExCW,EAAO,EAEPA,GAER,GACH5C,EAAO+C,KAAKL,GACZL,EAAUC,OAAOS,KAAKN,GACtBJ,EAAUE,SAASQ,KAAK,CAEtBC,UAAW,wBACXC,YAAa,wBACbC,cAAe,yBACfC,gBAAiB,sBACjB5D,KAAMS,KAERA,EAAMtC,OAAA0F,EAAA,EAAA1F,CAAOsC,IACNA,EAAOqD,OAAS,GAAK,GAtB9B,IAAK,IAAMZ,KAAUV,EAAkBS,EAA5BC,GAyBX,OACErJ,EAAAC,EAAAC,cAAA,OAAKgK,MAAO,CAAEC,UAAW,WACvBnK,EAAAC,EAAAC,cAACkK,EAAA,IAAD,CAAUjE,KAAM8C,MCzBPoB,UAnBS,SAAArC,GACtB,OACEhI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAsC,SAA3B6H,EAAMsC,iBAA8B,SAAW,GAC1D1H,QAASoF,EAAMuC,SAAS7B,YAAW,SAFrC,QAMA1I,EAAAC,EAAAC,cAAA,UACEC,UAAsC,UAA3B6H,EAAMsC,iBAA+B,SAAW,GAC3D1H,QAASoF,EAAMuC,SAAS7B,YAAW,UAFrC,YCLA8B,6MACJC,MAAQ,CACN7F,WAAW,EACXqD,SAAU,GACVyC,WAAY,UASdC,cAAgB,WACdC,EAAKC,SAAS,CAAEjG,WAAW,IAkB3Be,MAAM,gCAAiC,CACrCC,OAAQ,OACR2B,KAAMT,KAAKC,UAnBO,CAClBG,MAAK,4PAmBLpB,QAAS,CACPC,eAAgB,mBAChB+E,cAAe,UAAYF,EAAKG,QAAQzK,SAGzC0F,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC5B,MAAM,IAAI2I,MAAM,WAElB,OAAO/E,EAAIC,SAEZF,KAAK,SAAAiF,GACJ,IAAMhD,EAAWgD,EAAQ9E,KAAK8B,SAC9B2C,EAAKC,SAAS,CAAE5C,SAAUA,EAAUrD,WAAW,MAEhDyB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZsE,EAAKC,SAAS,CAAEjG,WAAW,SAIjCsG,qBAAuB,SAAAC,GACrBP,EAAKC,SAAS,CAAEjG,WAAW,IAC3B,IAAMwG,EAAc,CAClBlE,MAAK,yKAQLC,UAAW,CACT7E,GAAI6I,IAIRxF,MAAM,gCAAiC,CACrCC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACPC,eAAgB,mBAChB+E,cAAe,UAAYF,EAAKG,QAAQzK,SAGzC0F,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC5B,MAAM,IAAI2I,MAAM,WAElB,OAAO/E,EAAIC,SAEZF,KAAK,SAAAiF,GACJL,EAAKC,SAAS,SAAAQ,GAIZ,MAAO,CAAEpD,SAHeoD,EAAUpD,SAASqD,OAAO,SAAAnD,GAChD,OAAOA,EAAQE,MAAQ8C,IAEWvG,WAAW,OAGlDyB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZsE,EAAKC,SAAS,CAAEjG,WAAW,SAIjC2G,wBAA0B,SAAAb,GACL,SAAfA,EACFE,EAAKC,SAAS,CAAEH,WAAY,SAE5BE,EAAKC,SAAS,CAAEH,WAAY,8FA9F9Bc,KAAKb,iDAmGL,IAAIc,EAAUzL,EAAAC,EAAAC,cAAC0H,EAAD,MAqBd,OApBK4D,KAAKf,MAAM7F,YACd6G,EACEzL,EAAAC,EAAAC,cAACF,EAAAC,EAAMyL,SAAP,KACE1L,EAAAC,EAAAC,cAACyL,EAAD,CACErB,iBAAkBkB,KAAKf,MAAMC,WAC7BH,SAAUiB,KAAKD,0BAEjBvL,EAAAC,EAAAC,cAAA,WAC6B,SAA1BsL,KAAKf,MAAMC,WACV1K,EAAAC,EAAAC,cAAC0L,EAAD,CACE3D,SAAUuD,KAAKf,MAAMxC,SACrBQ,SAAU+C,KAAKN,uBAGjBlL,EAAAC,EAAAC,cAAC2L,EAAD,CAAe5D,SAAUuD,KAAKf,MAAMxC,cAMvCjI,EAAAC,EAAAC,cAACF,EAAAC,EAAMyL,SAAP,KAAiBD,UAlIDK,aAArBtB,EAOGuB,YAAchL,EA+HRyJ,QCxIAwB,UAFE,kBAAMhM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eCoBvB8L,UApBG,SAAAjE,GAAK,OACrBhI,EAAAC,EAAAC,cAAA,MAAIkI,IAAKJ,EAAMkE,QAAS/L,UAAU,qBAChCH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAK8H,EAAMO,OACXvI,EAAAC,EAAAC,cAAA,cACI8H,EAAM0B,MADV,MACoB,IAAI1C,KAAKgB,EAAMmE,MAAM3D,uBAG3CxI,EAAAC,EAAAC,cAAA,WACG8H,EAAMzH,SAAWyH,EAAMoE,UACtBpM,EAAAC,EAAAC,cAAA,0CAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAASoF,EAAMqE,SAAS3D,YAAWV,EAAMkE,UAAjE,oBCQOI,UAnBG,SAAAtE,GAChB,IAAMuE,EAASvE,EAAMuE,OAAOrE,IAAI,SAAAI,GAC9B,OACEtI,EAAAC,EAAAC,cAACsM,EAAD,CACEpE,IAAKE,EAAMD,IACX6D,QAAS5D,EAAMD,IACfE,MAAOD,EAAMC,MACbmB,MAAOpB,EAAMoB,MACbyC,KAAM7D,EAAM6D,KACZ5L,OAAQyH,EAAMyE,WACdL,UAAW9D,EAAMoE,QAAQrE,IACzBgE,SAAUrE,EAAM2E,iBAKtB,OAAO3M,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeoM,KCZhCK,sBAWJ,SAAAA,EAAY5E,GAAO,IAAA4C,EAAA,OAAAtG,OAAAuI,EAAA,EAAAvI,CAAAkH,KAAAoB,IACjBhC,EAAAtG,OAAAwI,EAAA,EAAAxI,CAAAkH,KAAAlH,OAAAyI,EAAA,EAAAzI,CAAAsI,GAAAI,KAAAxB,KAAMxD,KAXRyC,MAAQ,CACNwC,UAAU,EACVV,OAAQ,GACR3H,WAAW,EACXsI,cAAe,MAMEtC,EAJnBuC,UAAW,EAIQvC,EAYnBwC,wBAA0B,WACxBxC,EAAKC,SAAS,CAAEoC,UAAU,KAbTrC,EAgBnByC,oBAAsB,WACpBzC,EAAKC,SAAS,CAAEoC,UAAU,IAC1B,IAAM1E,EAAQqC,EAAK0C,WAAW7D,QAAQ/C,MAChCgD,GAASkB,EAAK2C,WAAW9D,QAAQ/C,MACjCyF,EAAOvB,EAAK4C,UAAU/D,QAAQ/C,MAC9B+G,EAAc7C,EAAK8C,iBAAiBjE,QAAQ/C,MAElD,KAC0B,IAAxB6B,EAAMoF,OAAO1D,QACbP,GAAS,GACc,IAAvByC,EAAKwB,OAAO1D,QACkB,IAA9BwD,EAAYE,OAAO1D,QAJrB,CASA,IAAM3B,EAAQ,CAAEC,QAAOmB,QAAOyC,OAAMsB,eACpClH,QAAQC,IAAI8B,GAEZ,IAAM8C,EAAc,CAClBlE,MAAK,gWAWHC,UAAW,CACToB,MAAOA,EACPqF,KAAMH,EACN/D,MAAOA,EACPyC,KAAMA,IAIN7L,EAAQsK,EAAKG,QAAQzK,MAE3BqF,MAAM,gCAAiC,CACrCC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACPC,eAAgB,mBAChB+E,cAAe,UAAYxK,KAG5B0F,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC5B,MAAM,IAAI2I,MAAM,WAElB,OAAO/E,EAAIC,SAEZF,KAAK,SAAAiF,GACJL,EAAKC,SAAS,SAAAQ,GACZ,IAAMwC,EAAavJ,OAAA0F,EAAA,EAAA1F,CAAO+G,EAAUkB,QAWpC,OAVAsB,EAAclE,KAAK,CACjBtB,IAAK4C,EAAQ9E,KAAK2H,YAAYzF,IAC9BE,MAAO0C,EAAQ9E,KAAK2H,YAAYvF,MAChCkF,YAAaxC,EAAQ9E,KAAK2H,YAAYL,YACtCtB,KAAMlB,EAAQ9E,KAAK2H,YAAY3B,KAC/BzC,MAAOuB,EAAQ9E,KAAK2H,YAAYpE,MAChCgD,QAAS,CACPrE,IAAKuC,EAAKG,QAAQxK,UAGf,CAAEgM,OAAQsB,OAGpBxH,MAAM,SAAAC,GACLC,QAAQC,IAAIF,OAxFCsE,EA4FnBmD,mBAAqB,WACnBnD,EAAKC,SAAS,CAAEoC,UAAU,EAAOC,cAAe,QA7F/BtC,EA+InBoD,kBAAoB,SAAA9B,GAClBtB,EAAKC,SAAS,SAAAQ,GAEZ,MAAO,CAAE6B,cADa7B,EAAUkB,OAAO0B,KAAK,SAAAC,GAAC,OAAIA,EAAE7F,MAAQ6D,QAjJ5CtB,EAsJnBuD,iBAAmB,WACjB,GAAKvD,EAAKG,QAAQzK,MAAlB,CAIAiG,QAAQC,IAAIoE,EAAKH,MAAMyC,eACvB,IAAM9B,EAAc,CAClBlE,MAAK,6LASHC,UAAW,CACT7E,GAAIsI,EAAKH,MAAMyC,cAAc7E,MAInC1C,MAAM,gCAAiC,CACrCC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACPC,eAAgB,mBAChB+E,cAAe,UAAYF,EAAKG,QAAQzK,SAGzC0F,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC5B,MAAM,IAAI2I,MAAM,WAElB,OAAO/E,EAAIC,SAEZF,KAAK,SAAAiF,GACJ1E,QAAQC,IAAIyE,GACZL,EAAKC,SAAS,CAAEqC,cAAe,SAEhC7G,MAAM,SAAAC,GACLC,QAAQC,IAAIF,UAtCdsE,EAAKC,SAAS,CAAEqC,cAAe,QAtJjCtC,EAAK0C,WAAalN,IAAMgO,YACxBxD,EAAK2C,WAAanN,IAAMgO,YACxBxD,EAAK4C,UAAYpN,IAAMgO,YACvBxD,EAAK8C,iBAAmBtN,IAAMgO,YALbxD,mFASjBY,KAAK6C,oDAuFO,IAAAC,EAAA9C,KACZA,KAAKX,SAAS,CAAEjG,WAAW,IAmB3Be,MAAM,gCAAiC,CACrCC,OAAQ,OACR2B,KAAMT,KAAKC,UApBO,CAClBG,MAAK,sRAoBLpB,QAAS,CACPC,eAAgB,sBAGjBC,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC5B,MAAM,IAAI2I,MAAM,WAElB,OAAO/E,EAAIC,SAEZF,KAAK,SAAAiF,GACJ,IAAMsB,EAAStB,EAAQ9E,KAAKoG,OACxB+B,EAAKnB,UACPmB,EAAKzD,SAAS,CAAE0B,OAAQA,EAAQ3H,WAAW,MAG9CyB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACRgI,EAAKnB,UACPmB,EAAKzD,SAAS,CAAEjG,WAAW,qDAyDjC4G,KAAK2B,UAAW,mCAIhB,OACEnN,EAAAC,EAAAC,cAACF,EAAAC,EAAMyL,SAAP,MACIF,KAAKf,MAAMwC,UAAYzB,KAAKf,MAAMyC,gBAAkBlN,EAAAC,EAAAC,cAACqO,EAAD,MACrD/C,KAAKf,MAAMwC,UACVjN,EAAAC,EAAAC,cAACyH,EAAD,CACEY,MAAM,YACNiG,WAAS,EACTC,YAAU,EACVC,SAAUlD,KAAKuC,mBACfY,UAAWnD,KAAK6B,oBAChBuB,YAAY,WAEZ5O,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOqC,QAAQ,SAAf,SACAvC,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAOJ,GAAG,QAAQuM,IAAKrD,KAAK8B,cAE1CtN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOqC,QAAQ,SAAf,SACAvC,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,SAASJ,GAAG,QAAQuM,IAAKrD,KAAK+B,cAE5CvN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOqC,QAAQ,QAAf,QACAvC,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,iBAAiBJ,GAAG,OAAOuM,IAAKrD,KAAKgC,aAEnDxN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOqC,QAAQ,eAAf,eACAvC,EAAAC,EAAAC,cAAA,YACEoC,GAAG,cACHwM,KAAK,IACLD,IAAKrD,KAAKkC,sBAMnBlC,KAAKf,MAAMyC,eACVlN,EAAAC,EAAAC,cAACyH,EAAD,CACEY,MAAOiD,KAAKf,MAAMyC,cAAc3E,MAChCiG,WAAS,EACTC,YAAU,EACVC,SAAUlD,KAAKuC,mBACfY,UAAWnD,KAAK2C,iBAChBS,YAAapD,KAAKT,QAAQzK,MAAQ,OAAS,WAE3CN,EAAAC,EAAAC,cAAA,UAAKsL,KAAKf,MAAMyC,cAAc3E,OAC9BvI,EAAAC,EAAAC,cAAA,cACIsL,KAAKf,MAAMyC,cAAcxD,MAD7B,KACsC,IACnC,IAAI1C,KAAKwE,KAAKf,MAAMyC,cAAcf,MAAM3D,sBAE3CxI,EAAAC,EAAAC,cAAA,SAAIsL,KAAKf,MAAMyC,cAAcO,cAGhCjC,KAAKT,QAAQzK,OACZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAAS4I,KAAK4B,yBAAtC,iBAKH5B,KAAKf,MAAM7F,UACV5E,EAAAC,EAAAC,cAAC0H,EAAD,MAEA5H,EAAAC,EAAAC,cAAC6O,EAAD,CACExC,OAAQf,KAAKf,MAAM8B,OACnBE,WAAYjB,KAAKT,QAAQxK,OACzBoM,aAAcnB,KAAKwC,4BArRNlC,cAAnBc,EASGb,YAAchL,EAoRR6L,iBCpSToC,EAAc5O,IAAMC,gBCCpB4O,EAAU,WAAM,IAAApO,EAEmBC,qBAAWkO,GAAxCE,EAFUrO,EAEVqO,MAAOC,EAFGtO,EAEHsO,MAAOC,EAFJvO,EAEIuO,WAFJjL,EAIIC,mBAAS,aAJbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIb1B,EAJa4B,EAAA,GAIPgL,EAJOhL,EAAA,GAKlB,OACIrE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBAAiBuC,EAAjB,IAAwByM,EAAxB,IAAgCE,EAAWE,QAC3CtP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAAS,kBAAMyM,EAAQ5M,EAAO,WAAtD,SAGAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAAS,kBAAMyM,EAAQ5M,EAAO,YAAtD,SAGAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMyC,QAAS,kBAAMyM,EAAS5M,EAAO0M,KAAvD,+MCTZ,IAAMI,EAAU,WAGZ,IAAMC,EAAUC,IAAHC,KAHKvL,EAWIC,oBAAS,GAXbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAWbV,EAXaY,EAAA,GAWPsL,EAXOtL,EAAA,GAAAK,EAsCMN,mBAAS,GAtCfO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAsCbwK,EAtCavK,EAAA,GAsCNiL,EAtCMjL,EAAA,GAAAG,EAuCMV,mBAAS,UAvCfW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAuCbqK,EAvCapK,EAAA,GAuCN8K,EAvCM9K,EAAA,GAAAC,EAwCgBZ,mBAAS,IAxCzBa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAwCboK,EAxCanK,EAAA,GAwCD6K,EAxCC7K,EAAA,GA0CZ8K,EAAc,WAChB,IAAIC,EAAW,CAAC,SAAU,UAAW,QAAS,QAE9C,OADgBA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAAS/F,UAQjE3E,oBAAU,WAJU,IAAAoB,EAKhB0J,SAAS7H,MAAT,eAAAb,OAAgCwH,EAAhC,UALgBxI,EAMJyI,EALZ5I,QAAQC,IAAIE,IAMb,CAACyI,IAyCJ,OACInP,EAAAC,EAAAC,cAAC8O,EAAYvI,SAAb,CAAsBC,MAAO,CAAEwI,QAAOC,QAAOC,eACzCpP,EAAAC,EAAAC,cAACmQ,EAAD,MACC5M,EACDzD,EAAAC,EAAAC,cAAA,UAAQ0C,QAAS,WAtFrB+M,EAAQlM,EAAOzD,EAAAC,EAAAC,cAAA,WACXF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACoQ,EAAA,EAAD,CAAOpJ,MAAOsI,GAEN,SAAAtN,GAA4B,IAAzBqO,EAAyBrO,EAAzBqO,QAASjK,EAAgBpE,EAAhBoE,IAAKH,EAAWjE,EAAXiE,KACb,OAAIoK,EAAgBvQ,EAAAC,EAAAC,cAAA,qBAChBoG,EAAYtG,EAAAC,EAAAC,cAAA,UAAKoG,GACjBH,GACE0J,EAAUV,EAAQY,KACZ/P,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACJ8C,EAAKqK,SAAStI,IAAI,SAAAgG,GAAC,OACflO,EAAAC,EAAAC,cAAA,OAAKkI,IAAK8F,EAAE7F,KAAM6F,EAAE7F,cAJhC,IAaZrI,EAAAC,EAAAC,cAAA,wCAkEA,SAmBAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAA8ByC,QAAS,WA7C7D+C,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAdK,CAChBG,MAAK,iMAcLpB,QAAS,CACLC,eAAgB,sBAGnBC,KAAK,SAAAC,GACF,GAAmB,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC1B,MAAM,IAAI2I,MAAM,WAEpB,OAAO/E,EAAIC,SAEdF,KAAK,SAAAiF,GACF6E,EAAeV,EAAWnE,EAAQ9E,KAAKqK,UACvCjK,QAAQC,IAAI4I,KAEf/I,MAAM,SAAAC,GACHC,QAAQC,IAAIF,OA2BhB,sBAGAtG,EAAAC,EAAAC,cAAA,UAAQuQ,UAAWrB,EAAWnF,OAAQ9J,UAAU,yBAAyByC,QAAS,WAhEtFkN,EAAeV,EAAa,MAgExB,qBAGApP,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAAA,uBACUkP,EAAWnF,OADrB,WAKImF,EAAWlH,IAAI,SAAAgG,GAAC,OACZlO,EAAAC,EAAAC,cAAA,OAAKkI,IAAK8F,EAAE7F,KAAM6F,EAAE7F,QAIhCrI,EAAAC,EAAAC,cAAA,wBAAgBgP,EAAhB,UACAlP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyByC,QAAS,kBAAMgN,EAASV,EAAQ,KAA3E,eAGAlP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyByC,QAAS,kBAAMgN,EAASV,EAAQ,KAA3E,eAGAlP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyByC,QAAS,kBAAMgN,EAAUV,EAAQ,KAA5E,SAGAlP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCAA0BiP,EAA1B,KACAnP,EAAAC,EAAAC,cAAA,UACIC,UAAU,yBACVyC,QAAS,kBAAMiN,EAAUV,EAAQY,OAFrC,kCC1JVW,EAAkBtQ,IAAMC,4CCgBxBsQ,WAAe,SAACC,GAClB,OAAOC,IAAOD,EAAc,KAAKE,OAAO,gBA0I7BC,GAxHS,WAAM,IAAAlQ,EAC2CC,qBAAWiC,GAAzEiO,EADmBnQ,EACnBmQ,cAAeC,EADIpQ,EACJoQ,UAAWC,EADPrQ,EACOqQ,aAAcC,EADrBtQ,EACqBsQ,QAASC,EAD9BvQ,EAC8BuQ,SAClDhO,EAAc,kBAAM8N,GAAcD,IACpCpK,EAAOgK,MAASC,OAAO,cAE3B,OACI9Q,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACIC,kBAAgB,gCAChBC,UAAQ,EAACC,KAAMwN,EAAWvN,OAAQN,GAClCpD,EAAAC,EAAAC,cAACoD,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACpBwN,EAAWpR,EAAAC,EAAAC,cAACoD,EAAA,EAAMO,MAAP,uBAA4C7D,EAAAC,EAAAC,cAACoD,EAAA,EAAMO,MAAP,qBAE5D7D,EAAAC,EAAAC,cAACoD,EAAA,EAAMQ,KAAP,KACI9D,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,cAAe,CACXoH,MAAO4I,EAAUA,EAAQ5I,MAAQ,GACjCkF,YAAa0D,EAAUA,EAAQ1D,YAAc,GAC7C4D,MAAOF,EAAUA,EAAQE,MAAQ,GACjC3H,MAAOyH,EAAUA,EAAQzH,MAAQ,GACjCyC,KAAMgF,EAAUR,GAAaQ,EAAQ9J,WAAaR,EAClDyK,WAAYH,EAAUR,GAAaQ,EAAQ7J,WAAaT,GAE5DpF,iBAAkBC,WAAaC,MAAM,CACjC4G,MAAO7G,WACFE,SAAS,qBACd6L,YAAa/L,WACb2P,MAAO3P,WACFE,SAAS,qBACd8H,MAAOhI,WACFE,SAAS,qBACduK,KAAMzK,SACDE,SAAS,sBAElBG,SAAU,SAAAC,GACNgP,EAAchP,IAGlBC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQyE,EAAX1E,EAAW0E,OAAQxE,EAAnBF,EAAmBE,QAASmP,EAA5BrP,EAA4BqP,aAAcC,EAA1CtP,EAA0CsP,cAAeC,EAAzDvP,EAAyDuP,WAAzD,OACJzR,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMf,UAAU,aACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,SAAnD,SACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOsB,YAAY,QAAQC,KAAK,QAAQC,KAAK,OAAOvC,UAAW,gBAAkBgC,EAAOoG,OAASnG,EAAQmG,MAAQ,cAAgB,MACjIvI,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,QAAQE,UAAU,MAAMxC,UAAU,uBAG7DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,eAAnD,eACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOyB,UAAU,WAAWH,YAAY,cAAcC,KAAK,cAAcC,KAAK,OAAOvC,UAAU,iBAC/FH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,cAActC,UAAU,uBAGnDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,SAAnD,SACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQuC,KAAK,QAAQ8H,SAAUgH,EAC3BG,OAAQD,EAAY/K,MAAOE,EAAOyK,MAAOlR,UAAW,sCAAwCgC,EAAOkP,OAASjP,EAAQiP,MAAQ,cAAgB,IAAK/O,GAAG,0BACpJtC,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,IAAd,kBACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,OACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,OACA1G,EAAAC,EAAAC,cAAA,UAAQwG,MAAM,KAAd,UAEJ1G,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,QAAQE,UAAU,MAAMxC,UAAU,uBAG7DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,SAAnD,SACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,SAAOsC,YAAY,OAAOC,KAAK,QAAQ8H,SAAU,SAAA2D,GAAOsD,EAAc,QAxF5F,SAAClJ,GACnB,IAAIoB,EAAQpB,EAAMqJ,OAAOjL,MAWzB,OAVqB,IAAjBgD,EAAMO,QAA0B,MAAVP,IACtBA,EAAQA,EAAMkI,MAAM,GAAI,IAEP,IAAjBlI,EAAMO,QAA0B,OAAVP,IACtBA,EAAQA,EAAMkI,MAAM,GAAI,IAExBlI,EAAMmI,MAAM,KAAK5H,OAAS,EAAI,IAC9BP,EAAQA,EAAMkI,MAAM,GAAI,KAE5BlI,EAASA,EAAMoI,QAAQ,MAAQ,EAAMpI,EAAMqI,OAAO,EAAGrI,EAAMoI,QAAQ,MAAQpI,EAAMqI,OAAOrI,EAAMoI,QAAQ,KAAM,GAAMpI,GACrGsI,QAAQ,WAAY,IAAIA,QAAQ,IAAK,IA4EqEC,CAAc/D,KAAQxH,MAAOE,EAAO8C,MAAOvJ,UAAW,gBAAkBgC,EAAOuH,OAAStH,EAAQsH,MAAQ,cAAgB,MACvM1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAmBH,EAAAC,EAAAC,cAACgS,GAAA,EAAD,CAAc/R,UAAU,GAAGgS,KAAM,OAEvEnS,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,QAAQE,UAAU,MAAMxC,UAAU,wBAIjEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BAA0BoC,QAAQ,QAAnD,QACAvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAACkS,EAAA,EAAD,CACIjS,UAAW,uCAAyCgC,EAAOgK,MAAQ/J,EAAQ+J,KAAO,cAAgB,IAClGkG,YACIrS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,IAAIyG,EAAOuF,OAGnCmG,eAAa,EACbC,mBAAiB,EACjBC,aAAa,SACb9P,KAAK,OACL+P,aAAa,MACbhQ,KAAK,OACLD,YAAY,aACZ+H,SAAU,SAAA2D,GA1HvC,IAACwE,EA0H6ClB,EAAc,QA1H3DkB,EA0H8ExE,EAzHvF2C,IAAO6B,GAAc5B,OAAO,mBA0HK9Q,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAmBH,EAAAC,EAAAC,cAACyS,GAAA,EAAD,CAAkBxS,UAAU,GAAGgS,KAAM,SAInFnS,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcuB,KAAK,OAAOE,UAAU,MAAMxC,UAAU,sBAExDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACViR,EAAUpR,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,SAASvC,UAAU,wBAAhC,UAAyEH,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,SAASvC,UAAU,wBAAhC,UACpFH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoByC,QAASQ,GAA/C,mBClHrBN,GA1BG,WAAM,IAAAjC,EACmDC,qBAAWiC,GAA1EE,EADYpC,EACZoC,UAAWC,EADCrC,EACDqC,cAAeC,EADdtC,EACcsC,iBAAkByP,EADhC/R,EACgC+R,eAC9CxP,EAAc,kBAAMD,GAAiB,IAE3C,OACInD,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACIC,kBAAgB,gCAChBC,UAAQ,EAACC,KAAMP,EAAeQ,OAAQN,GACtCpD,EAAAC,EAAAC,cAACoD,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACrB5D,EAAAC,EAAAC,cAACoD,EAAA,EAAMO,MAAP,wBAEJ7D,EAAAC,EAAAC,cAACoD,EAAA,EAAMQ,KAAP,KAAab,GACbjD,EAAAC,EAAAC,cAACoD,EAAA,EAAMS,OAAP,KACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAQC,QAAQ,UAAUrB,QAASgQ,GAAnC,OAGA5S,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAQC,QAAQ,YAAYrB,QAASQ,GAArC,cCddyP,WAAU,SAAA3Q,GAAiB,IAgBP0O,EAhBPO,EAAcjP,EAAdiP,QAAchN,EAEWC,oBAAS,GAFpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAExBjB,EAFwBmB,EAAA,GAETlB,EAFSkB,EAAA,GAAAK,EAGGN,qBAHHO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGxBzB,EAHwB0B,EAAA,GAGbU,EAHaV,EAAA,GAAAG,EAILV,qBAJKW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIxBgO,EAJwB/N,EAAA,GAIjBgO,EAJiBhO,EAAA,GAAAC,EAKGZ,oBAAS,GALZa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAKxBiM,EALwBhM,EAAA,GAKbiM,EALajM,EAAA,GAAApE,EAcYC,qBAAWkS,GAA5CC,EAdqBpS,EAcrBoS,cAAeC,EAdMrS,EAcNqS,cAevB,OACIlT,EAAAC,EAAAC,cAACS,EAAa8F,SAAd,CAAuBC,MAAO,CAAEzD,YAAWC,gBAAeC,mBAAkByP,eAVzD,WACnBK,EAAcH,IAS8E7B,YAAWC,eAAcC,UAASC,UAxBnH,EAwB6HJ,cANtH,SAACmC,GACnBA,EAAc7Q,GAAK6O,EAAQ9I,IAC3B6K,EAAcC,MAKVnT,EAAAC,EAAAC,cAACkT,GAAD,MACApT,EAAAC,EAAAC,cAACmT,GAAD,MACArT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKgK,MAAO,CAAEoJ,WAAY,uBACtBtT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,IAA8BgR,EAAQ5I,QAE1CvI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cArBLyQ,EAqB+BO,EAAQ9J,UApBlDwJ,IAAOD,EAAc,KAAKE,OAAO,gBAqBhC9Q,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UAAoCgR,EAAQE,OAC5CrR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBgR,EAAQ1D,aAC3CzN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,IAA8BgR,EAAQzH,MAAtC,YACA1J,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwByC,QAAS,kBAjC5Ca,GAiC4D,EAjCtDiC,EAiC2D,0CAjCrDpD,EAiCgG6O,EAAQ9I,IAhCnIlF,EAAiBM,GACjB4B,EAAaK,QACbqN,EAASzQ,GAHK,IAACmB,EAAMiC,EAAMpD,IAkCftC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACyS,GAAA,EAAD,CAAkBR,KAAM,OAE/BnS,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBAAsByC,QAAS,kBAAMsO,GAAcD,KACjEjR,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACyS,GAAA,EAAD,CAAWR,KAAM,WCjDlCoB,WAAc,WAGhB,OAFwBzS,qBAAWkS,GAA3BQ,YAGQtL,IAAI,SAACiJ,GAAD,OACZnR,EAAAC,EAAAC,cAACuT,GAAD,CAAStT,UAAU,gBAAgBiI,IAAK+I,EAAQ9I,IAAK8I,QAASA,QCFpEuC,WAAiB,WAAM,IACjB9O,EAAc9D,qBAAWkS,GAAzBpO,UADiB+O,EAEW7S,qBAAWiC,GAAvCkO,EAFiB0C,EAEjB1C,UAAWC,EAFMyC,EAENzC,aAEnB,OACIlR,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KAEQuB,EAAY5E,EAAAC,EAAAC,cAAC0H,EAAD,MACR5H,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACyH,EAAD,MACA3H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,6BACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqByC,QAAS,kBAAMsO,GAAcD,KAApE,iBAGPA,GACGjR,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACmT,GAAD,WCd1BO,GAAW,WACb,IAAIC,EAAc9S,EAAY+S,cADX3P,EAEaC,oBAAS,GAFtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEdS,EAFcP,EAAA,GAEHQ,EAFGR,EAAA,GAAAK,EAGaN,oBAAS,GAHtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGduM,EAHctM,EAAA,GAGHuM,EAHGvM,EAAA,GAAAG,EAIiBV,mBAAS,IAJ1BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAId0O,EAJczO,EAAA,GAIDgP,EAJChP,EAAA,GAAAC,EAKiBZ,mBAAS,IAL1Ba,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAKdhC,EALciC,EAAA,GAKDC,EALCD,EAAA,GAAAE,EAMaf,qBANbgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAMdlC,EANcmC,EAAA,GAMHC,EANGD,EAAA,GAAA4O,EAOqB5P,oBAAS,GAP9B6P,EAAA3P,OAAAC,EAAA,EAAAD,CAAA0P,EAAA,GAOd9Q,EAPc+Q,EAAA,GAOC9Q,EAPD8Q,EAAA,GASbzO,EAAY,SAAC/B,EAAMgC,EAAQC,GAC7BvC,EAAiBM,GACjByB,EAAeO,GACfJ,EAAaK,IAGjBJ,oBAAU,WACN4O,KACD,IAEH,IA4CMA,EAAiB,WACnBrP,GAAa,GAebc,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAhBK,CAChBG,MAAK,uSAgBLpB,QAAS,CACLC,eAAgB,mBAChB+E,cAAe,UAAY+I,EAAYvT,SAG1C0F,KAAK,SAAAC,GAEF,GADApB,GAAa,GACM,MAAfoB,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC1B,MAAM,IAAI2I,MAAM,WAEpB,OAAO/E,EAAIC,SAEdF,KAAK,SAAAiF,GACFpG,GAAa,GACbkP,EAAe9I,EAAQ9E,KAAKgO,UAC5B5N,QAAQC,IAAIyE,EAAQ9E,KAAKgO,YAG5B9N,MAAM,SAAAC,GACHzB,GAAa,GACb0B,QAAQC,IAAIF,MAuIlB8N,EAAkB,SAAAvN,GACpB,OAAOC,KAAKC,UAAU8J,IAAOhK,GAAMwN,YAGvC,OACIrU,EAAAC,EAAAC,cAACwQ,EAAgBjK,SAAjB,CAA0BC,MAAO,CAAEmN,cAAaL,cAAaO,iBAAgBd,cA/N3D,SAAAqB,GAClB,IAAMlJ,EAAc,CAChBlE,MAAK,qMAQLC,UAAW,CACP7E,GAAIgS,IAGZ3O,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACLC,eAAgB,mBAChB+E,cAAe,UAAY+I,EAAYvT,SAG1C0F,KAAK,SAAAC,GAEF,GADAM,QAAQC,IAAIP,GACO,MAAfA,EAAI5D,QAAiC,MAAf4D,EAAI5D,OAC1B,MAAM,IAAI2I,MAAM,WAEpB,OAAO/E,EAAIC,SAEdF,KAAK,SAAAC,GACF,IAAIsO,EAAkB,GACtBf,EAAYgB,QAAQ,SAAArD,GACZA,EAAQ9I,MAAQpC,EAAIE,KAAK8M,cAAc5K,KACvCkM,EAAgB5K,KAAKwH,KAG7B4C,EAAeQ,KAElBlO,MAAM,SAAAC,GAEHC,QAAQC,IAAIF,MAuLwE4M,cA3E1E,SAAA/B,GAClBtM,GAAa,GACbsM,EAAQhF,KAAOiI,EAAgBjD,EAAQhF,MACvCgF,EAAQG,WAAa8C,EAAgBjD,EAAQG,YAC7C,IAAMlG,EAAc,CAChBlE,MAAK,0rBAaLC,UAAW,CACP7E,GAAI6O,EAAQ7O,GACZiG,MAAO4I,EAAQ5I,MACfkF,YAAa0D,EAAQ1D,YACrB/D,MAAOyH,EAAQzH,MACf2H,MAAOF,EAAQE,MACfhK,UAAW8J,EAAQhF,KACnB7E,UAAW6J,EAAQG,aAI3B3L,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACLC,eAAgB,mBAChB+E,cAAe,UAAY+I,EAAYvT,SAG1C0F,KAAK,SAAAC,GACF,IAAKA,EAAIuB,GAEL,MADA3C,GAAa,GACNoB,EAAIwB,WAEf,OAAOxB,EAAIC,SAEdF,KAAK,SAAAC,GACF,GAAIA,EAAI9D,OACJ,MAAO8D,EAAI9D,OAAO,GAAGsS,QAEzB,IAAIC,EAAW,GACflB,EAAYtL,IAAI,SAAAiJ,GACRA,EAAQ9I,MAAQpC,EAAIE,KAAK+M,cAAc7K,KACvC8I,EAAUlL,EAAIE,KAAK+M,cACnBwB,EAAS/K,KAAKwH,IAEduD,EAAS/K,KAAKwH,KAGtB4C,EAAc,GAAArM,OAAKgN,IACnB7P,GAAa,GACbW,GAAU,EAAM,eAAgB,uBAChCe,QAAQC,IAAIP,EAAIE,KAAK+M,iBAExB7M,MAAM,SAAAC,GAIH,MAHAzB,GAAa,GACb0B,QAAQC,IAAIF,GACZd,GAAU,EAAM,QAASc,GACnBA,KAS6F1B,cACvG5E,EAAAC,EAAAC,cAACS,EAAa8F,SAAd,CAAuBC,MAAO,CAAExD,gBAAeC,mBAAmBH,cAAaC,YAAWgO,YAAWD,cAzIvF,SAAAhP,GAClB6C,GAAa,GACb,IAAIgC,EAAOuN,EAAgBpS,EAAOmK,MAC5Bf,EAAc,CAChBlE,MAAK,gqBAaLC,UAAW,CACPoB,MAAOvG,EAAOuG,MACdkF,YAAazL,EAAOyL,YACpB/D,MAAO1H,EAAO0H,MACd2H,MAAOrP,EAAOqP,MACdhK,UAAWR,EACXS,UAAWT,IAInBlB,MAAM,WAAY,CACdC,OAAQ,OACR2B,KAAMT,KAAKC,UAAUqE,GACrBtF,QAAS,CACLC,eAAgB,mBAChB+E,cAAe,UAAY+I,EAAYvT,SAG1C0F,KAAK,SAAAC,GACF,IAAKA,EAAIuB,GAEL,MADA3C,GAAa,GACNoB,EAAIwB,WAEf,OAAOxB,EAAIC,SAEdF,KAAK,SAAAC,GACF,GAAIA,EAAI9D,OACJ,MAAO8D,EAAI9D,OAAO,GAAGsS,QAEzB5P,GAAa,GACbqM,GAAa,GACb1L,GAAU,EAAM,eAAgB,uBAChCuO,EAAc,GAAArM,OAAApD,OAAA0F,EAAA,EAAA1F,CAAKkP,GAAL,CAAkBvN,EAAIE,KAAKwO,iBACzCpO,QAAQC,IAAIP,EAAIE,KAAKwO,iBAExBtO,MAAM,SAAAC,GAKH,MAJAzB,GAAa,GACbqM,GAAa,GACb3K,QAAQC,IAAIF,GACZd,GAAU,EAAM,QAASc,GACnBA,KAgF0G4K,eAAc1L,cAE1HZ,EAAY5E,EAAAC,EAAAC,cAAC0H,EAAD,MACR5H,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAACyH,EAAD,MACA3H,EAAAC,EAAAC,cAAC0U,GAAD,MACA5U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAC2U,GAAD,6DC/MjBC,WA9CQ,kBACnB9U,EAAAC,EAAAC,cAACyG,EAAYoO,SAAb,KACK,SAAAhK,GACG,OACI/K,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACIrD,EAAAC,EAAAC,cAAC8U,GAAA,EAAD,CAAQC,GAAG,OAAOhR,QAAQ,QACtBjE,EAAAC,EAAAC,cAAC8U,GAAA,EAAOE,MAAR,CAAcC,GAAIC,KAAMC,GAAG,KACvBrV,EAAAC,EAAAC,cAACoV,GAAA,EAAD,CAAanD,KAAM,GAAIhS,UAAU,0BAChC,kBAELH,EAAAC,EAAAC,cAACqV,GAAA,EAAD,CAAKpV,UAAU,2BACT4K,EAAQzK,OACNN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACqV,GAAA,EAAIH,KAAL,CAAUD,GAAIC,KAAMC,GAAG,SAAvB,YAIPtK,EAAQzK,OACLN,EAAAC,EAAAC,cAACsV,GAAA,EAAD,CAAaC,YAAU,EAAClN,MACpBvI,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACyS,GAAA,EAAD,CAAQR,KAAM,MACtB7P,GAAG,2BACDtC,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,aAA/B,YACArV,EAAAC,EAAAC,cAACsV,GAAA,EAAYG,QAAb,MACA3V,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkB9S,QAASmI,EAAQrK,QAAnC,WAIPqK,EAAQzK,OACLN,EAAAC,EAAAC,cAACsV,GAAA,EAAD,CAAaC,YAAU,EAAClN,MACpBvI,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACoV,GAAA,EAAD,CAAiBnD,KAAM,MAC/B7P,GAAG,2BACDtC,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,WAA/B,UACArV,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,aAA/B,YACArV,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,aAA/B,YACArV,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,YAA/B,WACArV,EAAAC,EAAAC,cAACsV,GAAA,EAAYE,KAAb,CAAkBP,GAAIC,KAAMC,GAAG,eAA/B,sBC7B9BO,WAAS,IAAIC,IAAa,CAC9BC,IAAK,cAwEQC,8MApEbtL,MAAQ,CACNnK,MAAO,KACPC,OAAQ,QAGVC,MAAQ,SAACF,EAAOC,EAAQE,GACtBmK,EAAKC,SAAS,CAAEvK,MAAOA,EAAOC,OAAQA,OAGxCG,OAAS,WACLiF,MAAM,gBAAiB,CACnBC,OAAQ,MACRC,YAAa,cACbC,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACdF,KAAK,SAAAG,GACJI,QAAQC,IAAIL,EAAKC,SAASqO,WAE3BpO,MAAM,SAAAC,GACHC,QAAQC,IAAIF,KAEtBsE,EAAKC,SAAS,CAAEvK,MAAO,KAAMC,OAAQ,gFAIrC,OACEP,EAAAC,EAAAC,cAACoQ,EAAA,EAAD,CAAgBsF,OAAQA,IACxB5V,EAAAC,EAAAC,cAAC8V,EAAA,EAAD,KACEhW,EAAAC,EAAAC,cAACmD,EAAA,SAAD,KACErD,EAAAC,EAAAC,cAACyG,EAAYF,SAAb,CACEC,MAAO,CACLpG,MAAOkL,KAAKf,MAAMnK,MAClBC,OAAQiL,KAAKf,MAAMlK,OACnBC,MAAOgL,KAAKhL,MACZE,OAAQ8K,KAAK9K,SAGfV,EAAAC,EAAAC,cAAC+V,GAAD,MACAjW,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACZH,EAAAC,EAAAC,cAACgW,EAAA,EAAD,KACElW,EAAAC,EAAAC,cAACiW,EAAA,EAAD,CAAOC,KAAK,QAAQzT,UAAW0T,IAC9B7K,KAAKf,MAAMnK,OACdN,EAAAC,EAAAC,cAACiW,EAAA,EAAD,CAAOC,KAAK,YAAYzT,UAAWiR,KAElCpI,KAAKf,MAAMnK,OAASN,EAAAC,EAAAC,cAACoW,EAAA,EAAD,CAAUC,KAAK,IAAIlB,GAAG,YAAYmB,OAAK,IAC3DhL,KAAKf,MAAMnK,OACVN,EAAAC,EAAAC,cAACoW,EAAA,EAAD,CAAUC,KAAK,QAAQlB,GAAG,YAAYmB,OAAK,KAE3ChL,KAAKf,MAAMnK,OACXN,EAAAC,EAAAC,cAACiW,EAAA,EAAD,CAAOC,KAAK,QAAQzT,UAAWuB,IAEjClE,EAAAC,EAAAC,cAACiW,EAAA,EAAD,CAAOC,KAAK,UAAUzT,UAAWiK,IAChCpB,KAAKf,MAAMnK,OACVN,EAAAC,EAAAC,cAACiW,EAAA,EAAD,CAAOC,KAAK,YAAYzT,UAAW6H,KAEjCgB,KAAKf,MAAMnK,OAASN,EAAAC,EAAAC,cAACoW,EAAA,EAAD,CAAUjB,GAAG,QAAQmB,OAAK,iBA1DhD1K,aCZlB2K,IAASxU,OAAOjC,EAAAC,EAAAC,cAACwW,GAAD,MAAStG,SAASuG,eAAe","file":"static/js/main.f37ccf46.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"cssload-inner cssload-one\"></div>\n        <div className=\"cssload-inner cssload-two\"></div>\n        <div className=\"cssload-inner cssload-three\"></div>\n    </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8 col-form-label\">\n                            <Field placeholder=\"Firs name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                  tokenExpiration\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                setIsLoading(false);\n                if (res.data.login) {\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n                        res.data.login.tokenExpiration,\n\n                    );\n                } else {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\nimport { MdEuroSymbol } from 'react-icons/md';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM-DD-YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM-DD-YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst AddExpenseModal = () => {\n    const {submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM-DD-YYYY');\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><MdEuroSymbol className=\"\" size={20} /></div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense }) => {\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [docId, setDocId] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n\n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDocId(id);\n    };\n\n    const { removeExpense, updateExpense } = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM-DD-YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(docId);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense}}>\n            <ConfirmationModal />\n            <AddExpenseModal />\n            <span className=\"card\">\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className='card_title'> {expense.title}</div>\n                </div>\n                <div className='card_date'>{dateBeautify(expense.createdAt)}</div>\n                <div className='card_group'>Group: {expense.group}</div>\n                <div className='card_description'>{expense.description}</div>\n                <div className='card_price'>-{expense.price} € </div>\n                <button className='btn card_removeButton' onClick={() => modalInfo(true,'Are you sure whant to delete this item?', expense._id)}>\n                    <i><FaRegTimesCircle size={20} /></i>\n                </button>\n                <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                    <i><FaRegEdit size={20} /></i>\n                </button>\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext} from 'react';\nimport Expense from './Expense/Expense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses } = useContext(ExpensesContext);\n\n    return (\n        allExpenses.map((expense) => (\n            <Expense className='expenses_list' key={expense._id} expense={expense}/>\n        )\n        )\n    );\n\n};\n        \nexport { Expenselist as default };","import React, { useContext, Fragment } from 'react';\nimport ExpensesContext from '../../../context/expenses-context';\nimport ModalContext from '../../../context/modal-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport Spinner from '../../Spinner/Spinner';\nimport InfoModal from '../../Modal/Modal';\nimport '../../../pages/Expenses.css';\n\nconst AddExpenseForm = () => {\n    const { isLoading } = useContext(ExpensesContext);\n    const { showModal, setShowModal } = useContext(ModalContext);\n\n    return (\n        <Fragment>\n            {\n                isLoading ? <Spinner /> :\n                    <Fragment>\n                        <InfoModal />\n                        <div className=\"expenses-control\">\n                            <div className=\"card-body text-center\">\n                                <p className=\"card-text\">Collect all your expenses</p>\n                                <button className='btn btn_addExpense' onClick={() => setShowModal(!showModal)}>add expense</button>\n                            </div>\n                        </div>\n                        {showModal && (\n                            <Fragment>\n                                <AddExpenseModal />\n                            </Fragment>\n                        )}\n                    </Fragment>\n            }\n        </Fragment >\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport AddExpense from '../components/Expenses/AddExpense/AddExpense';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport './Expenses.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showInfoModal, setShowInfoModal] = useState(false);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getExpenseList();\n    }, []);\n\n    const removeExpense = expenseId => {\n        const requestBody = {\n            query: `\n              mutation RemoveExpense($id: ID!) {\n                removeExpense(expenseId: $id) {\n                _id\n                 title\n                }\n              }\n            `,\n            variables: {\n                id: expenseId\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                console.log(res);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newExpensesList = [];\n                allExpenses.forEach(expense => {\n                    if (expense._id !== res.data.removeExpense._id) {\n                        newExpensesList.push(expense);\n                    }\n                });\n                setAllExpenses(newExpensesList);\n            })\n            .catch(err => {\n\n                console.log(err);\n            });\n    };\n\n    const getExpenseList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setIsLoading(false);\n                setAllExpenses(resData.data.expenses);\n                console.log(resData.data.expenses);\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n            });\n    };\n\n    const submitExpense = fields => {\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        const requestBody = {\n            query: `\n                      mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                        createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                            _id\n                            title\n                            price\n                            createdAt\n                            updatedAt\n                            description\n                            group\n                          }\n                      }\n                    `,\n            variables: {\n                title: fields.title,\n                description: fields.description,\n                price: fields.price,\n                group: fields.group,\n                createdAt: time,\n                updatedAt: time\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                modalInfo(true, 'Confirmation', 'Expense was created');\n                setAllExpenses([...allExpenses, res.data.createExpense]);\n                console.log(res.data.createExpense);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        const requestBody = {\n            query: `\n                      mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                        updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                            _id\n                            title\n                            price\n                            createdAt\n                            updatedAt\n                            description\n                            group\n                          }\n                      }\n                    `,\n            variables: {\n                id: expense.id,\n                title: expense.title,\n                description: expense.description,\n                price: expense.price,\n                group: expense.group,\n                createdAt: expense.date,\n                updatedAt: expense.updateDate\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let newArray = [];\n                allExpenses.map(expense => {\n                    if (expense._id === res.data.updateExpense._id) {\n                        expense = res.data.updateExpense;\n                        newArray.push(expense);\n                    } else {\n                        newArray.push(expense);\n                    }\n                });\n                setAllExpenses([...newArray]);\n                setIsLoading(false);\n                modalInfo(true, 'Confirmation', 'Expense was updated');\n                console.log(res.data.updateExpense);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, updateExpense, isLoading }}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal,  modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo}}>\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <AddExpense />\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n      fetch('/removeCookie', {\n          method: 'GET',\n          credentials: \"same-origin\",\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      }).then(res => res.json())\n          .then(data => {\n            console.log(data.response.message);\n          })\n          .catch(err => {\n              console.log(err);\n          });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n                <Switch>\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                <Route path=\"/expenses\" component={Expenses} />\n                )}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}