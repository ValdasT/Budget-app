{"version":3,"sources":["pig-face.png","components/Backdrop/Backdrop.js","components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","components/chatBot/chatBotLogick.js","components/chatBot/ChatBot.js","pages/Expenses.js","pages/Settings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","backdrop","react_default","a","createElement","className","spinner","react","Backdrop_Backdrop","class","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","createSettings","args","values","requestBody","query","variables","dailyBudget","weeklyBudget","monthlyBudget","members","categories","currency","creatorEmail","creatorsEmail","body","JSON","stringify","ok","statusText","message","concat","Provider","value","auth_context","time","Date","getTime","surname","createdAt","updatedAt","createUser","_id","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","deleteBookingHandler","bookingId","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","setting","submitExpense","showModal","setShowModal","expense","onUpdate","currencyValue","categoriesList","split","forEach","createCategoryList","selectedDate","setSelectedDate","tag","group","updateDate","_ref2","handleChange","setFieldValue","handleBlur","onBlur","category","target","slice","indexOf","substr","replace","validatePrice","fontSize","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","index_esm","size","actionFunction","Expense","currentUser","_currentValue","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","settings","fi_index_esm","md_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","dateFrom","dateTo","startOf","endOf","_d","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","minAndMax","first","allData","totals","expenses","incomes","parseFloat","Expenses","toFixed","Incomes","Budget","apply","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","domain","allowDataOverflow","ImportModal","submitExpenseFromImport","setAllExpenses","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","csvToJson","csv","Papa","parse","complete","results","createNewCards","asyncToGenerator","regenerator_default","mark","_callee2","fromFile","formatedArray","preparedToDb","newFromDb","wrap","_context2","next","searchFields","sent","j","toLowerCase","element","i","_callee","_context","t0","t1","stop","_x2","arguments","_x","fieldsArray","Promise","rej","numbers","missingFields","found","field","toLocaleLowerCase","createErrMsg","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","role","file","substring","bytes","newFileList","removeFile","assign","files","extension","reader","FileReader","onload","bstr","result","wb","XLSX","read","cellDates","dateNF","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","raw","readAsBinaryString","convertToCSV","todaysExpenses","answer","today","getCurrency","yearsExpenses","yearExpenses","weeksExpenses","weekExpenses","monthsExpenses","monthExpenses","todaysIncomes","yearsIncomes","yearIncomes","weeksIncomes","weekIncomes","monthsIncomes","monthIncomes","recomentdationForCategories","groupedExpenses","groupName","amount","sort","b","answerString","includes","CustomChatbot","settingsForBot","allExpensesForBot","user","dropMessages","handleNewUserMessage","newMessage","toggleMsgLoader","userMessage","getAnswer","addResponseMessage","react_chat_widget_lib","subtitle","profileAvatar","logo","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","setSettings","_useState19","_useState20","setSettingsForBot","_useState21","_useState22","setAllExpensesForBot","_useState23","_useState24","setUser","getSettingsData","settingsData","getExpenseList","users","allUsers","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","allSettings","all","_user","_allSettings","_allUsers","_expenses","_allSettings2","_allUsers2","_incomes","undefined","userData","_expenses2","_incomes2","newArrayForBot","removeIncome","createExpense","createIncome","updatedAllList","updatedAllListForBot","updateIncome","components_Filter_Filter","ChatBot_CustomChatbot","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","Settings","newCategorie","newMember","emailValidation","setErr","setCategories","setMembers","setUserData","editableUserData","setEditableUserData","setSettingsData","setKey","getUserData","membersList","Tabs","activeKey","onSelect","k","Tab","eventKey","color","enableReinitialize","updateUser","validateOnChange","memebers","allMemebers","allCategories","member","updateSettings","validateField","paddingTop","objectSpread","oldCategory","newCategory","charAt","toUpperCase","addCategory","item","removeCategory","oldMember","error","addMember","removeMember","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.d556682b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pig-face.96b2c961.png\";","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React, { Fragment} from 'react';\nimport BackDrop from '../Backdrop/Backdrop'\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <Fragment>\n        <BackDrop />\n        <div class=\"cssload-loader\">\n            <div class=\"cssload-inner cssload-one\"></div>\n            <div class=\"cssload-inner cssload-two\"></div>\n            <div class=\"cssload-inner cssload-three\"></div>\n        </div>\n    </Fragment>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.data.login) {\n                    setIsLoading(false);\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    let args = {\n                        userId: res.data.createUser._id,\n                        creatorsEmail: res.data.createUser.email\n                    };\n                    createSettings(args, values);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    const createSettings = (args, values) => {\n        let requestBody = {\n            query: `\n            mutation CreateSettings($dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $members: String!, $categories: String!,  $currency: String!, $userId: String!, $creatorEmail: String! ) {\n                createSettings(settingsInput:{dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, members:$members, categories:$categories,currency:$currency, userId: $userId, creatorEmail: $creatorEmail}) {\n                    _id\n                   \n                  }\n              }\n      `,\n            variables: {\n                dailyBudget: '',\n                weeklyBudget: '',\n                monthlyBudget: '',\n                members: '',\n                categories: '',\n                currency: '',\n                userId: args.userId,\n                creatorEmail: args.creatorsEmail\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data) {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                    setIsLoading(false);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    }; \n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst createCategoryList = setting => {\n    let categoriesList = [];\n    setting.categories.split(';').forEach(e => {\n        if (e.length) {\n            categoriesList.push(e);\n        }\n    });\n    return categoriesList;\n};\n\nconst AddExpenseModal = ({ setting}) => {\n    const { submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';  \n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    let [categories, setCategories] = useState(createCategoryList(setting));\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            {\n                                                categories.map((category) => (\n                                                    <option key={category} value={category}>{category}</option>\n                                                ))\n                                            }\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div style={{ fontSize: '15px' }} className=\"input-group-text\">{currencyValue}</div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport AuthContext from '../../../../context/auth-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense, setting }) => {\n\n    let currentUser = AuthContext._currentValue;\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';                                                           \n    \n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore} = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal setting={setting} />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Creator: {setting.creatorEmail}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag === 'Expense' ? <div className='card_price_expense'>-{expense.price} {currencyValue} </div> : <div className='card_price_income'>{expense.price} {currencyValue} </div>}\n                {\n                    currentUser.userId === setting.creatorId ?\n                        <Fragment>\n                            <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment> :\n                        <Fragment>\n                            <button className='btn card_removeButton disabled' disabled onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton disabled' disabled onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment>\n                }\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <span className=\"card_first card\">\n            <Fragment>\n                <InfoModal />\n                <div className='row d-flex align-self-center'>\n                    <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                        <i><FiPlus size={30} /></i>\n                    </button>\n                    <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                        <i><FiUpload size={25} /></i>\n                    </button>\n                    {allExpenses.length ? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                        {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                    </button> : null}\n                </div>\n                {showModal && (\n                    <Fragment>\n                        <AddExpenseModal setting={settings[0]} />\n                    </Fragment>\n                )}\n            </Fragment>\n        </span>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    settings.map((setting) => (\n                        expense.creatorId === setting.creatorId? <Expense className='expenses_list' key={expense._id} expense={expense} setting={setting} />: null\n                    ))\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = (filter, values) => {\n        let date = {\n            dateFrom: '',\n            dateTo: '',\n            tag: values\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll(date.tag);\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo: toTime,\n                    tag: 'All'\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required'),\n                    tag: Yup.string()\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue, handleChange, handleBlur }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                            <button type='button' className=\" col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('today', values.tag);\n                                setFieldValue('dateFrom', moment().format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().format('MM/DD/YYYY'));\n                                setStartDate(moment()._d);\n                                setEndDate(moment()._d);\n                            }}>Today</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('week', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('week').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('week').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('week')._d);\n                                setEndDate(moment().endOf('week')._d);\n                            }}>This week</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('month', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('month').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('month').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('month')._d);\n                                setEndDate(moment().endOf('month')._d);\n                            }}>This month</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('year', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('year').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('year').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('year')._d);\n                                setEndDate(moment().endOf('year')._d);\n                            }}>This year</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all', values.tag)}>All</button>\n                        </div>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <div className=\"form-group row\">\n                                <label className=\" col-form-label\" htmlFor=\"title\">Type:</label>\n                                <div className=\"ml-3 mr-2\">\n                                    <select name=\"tag\" onChange={handleChange}\n                                        onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                        <option value=\"All\">All</option>\n                                        <option value=\"Expense\">Expenses</option>\n                                        <option value=\"Income\">Incomes</option>\n                                    </select>\n                                    <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                            </div>\n                            <label className=\" col-form-label ml-4\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2 ml-3 mr-3\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minAndMax.smallest, minAndMax.biggest]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport ExpensesContext from '../../context/expenses-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\nimport { FiUpload } from \"react-icons/fi\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete } from \"react-icons/fi\";\n\nimport './Modal.css';\n\nconst ImportModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { submitExpenseFromImport, setAllExpenses } = useContext(ExpensesContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            let extension = files[0].name.split('.');\n            extension = extension[extension.length - 1].toLowerCase();\n            if (extension === 'csv') {\n                csvToJson(files[0]);\n            } else {\n                const reader = new FileReader();\n                reader.onload = function (e) {\n                    let bstr = e.target.result;\n                    let wb = XLSX.read(bstr, { type: 'binary', header: 1, cellDates: true, dateNF: 'DD/MM/YYYY' });\n                    let wsname = wb.SheetNames[0];\n                    let ws = wb.Sheets[wsname];\n                    let csv = XLSX.utils.sheet_to_csv(ws, { header: 1, raw: false });\n                    csvToJson(csv);\n                };\n                let binaryFile = reader.readAsBinaryString(files[0]); // it triger reader, don't delete\n            }\n        }\n    };\n\n    const csvToJson = csv => {\n        Papa.parse(csv, {\n            complete: function (results) {\n                createNewCards(results);\n            }\n        });\n    };\n\n    const createNewCards = async fromFile => {\n        let formatedArray = [{\n            title: '',\n            description: '',\n            price: '',\n            group: '',\n            createdAt: '',\n            tag: ''\n        }];\n        let preparedToDb = [];\n        let fields = await searchFields(fromFile.data[0]);\n        fields.forEach((fromFile, j) => {\n            if (fromFile.name.toLowerCase() === 'title') {\n                formatedArray[0].title = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'description') {\n                formatedArray[0].description = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'price') {\n                formatedArray[0].price = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'group') {\n                formatedArray[0].group = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'date') {\n                formatedArray[0].createdAt = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'type') {\n                formatedArray[0].tag = fields[j].id;\n            }\n        });\n        fromFile.data.forEach((element, i) => {\n            if (i !== 0 && element[0].length) {\n                preparedToDb.push({\n                    title: element[formatedArray[0].title],\n                    description: element[formatedArray[0].description],\n                    price: element[formatedArray[0].price],\n                    group: element[formatedArray[0].group],\n                    createdAt: element[formatedArray[0].createdAt],\n                    tag: element[formatedArray[0].tag]\n                });\n            }\n        });\n        let newFromDb = [];\n        preparedToDb.forEach(async e => {\n            newFromDb.push(await submitExpenseFromImport(e));\n            if (formatedArray.length === newFromDb.length) {\n                await setAllExpenses(newFromDb);\n                modalInfo(true, 'Confirmation', 'File was uploaded');\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            }\n        });\n    };\n\n    const searchFields = fieldsArray => {\n        return new Promise((res, rej) => {\n            let mandataryFields = ['Title', 'Price', 'Group', 'Date', 'Type', 'Description'];\n            let numbers = [];\n            let missingFields = [];\n            mandataryFields.forEach(name => {\n                let found = false;\n                fieldsArray.forEach((field, i) => {\n                    if (name.toLocaleLowerCase() === field.toLowerCase()) {\n                        found = true;\n                        numbers.push({\n                            name: name,\n                            id: i\n                        });\n                    }\n                });\n                if (!found) {\n                    missingFields.push(name);\n                }\n            });\n            if (missingFields.length) {\n                let createErrMsg = '';\n                missingFields.forEach((field, i) => {\n                    if (missingFields.length === i + 1) {\n                        createErrMsg += ` \"${field}\".`;\n                    } else {\n                        createErrMsg += ` \"${field}\";`;\n                    }\n                });\n                modalInfo(true, 'Error', `Inappropriate file. Missing fields in the file:${createErrMsg}`);\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            } else {\n                res(numbers);\n            }\n        });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        // accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default ImportModal;","import moment from 'moment';\n\nexport const getAnswer = (answer, settings, allExpenses, user) => {\n    // recomentdationForCategories(answer, settings, allExpenses);\n    if (answer.includes('{NAME}')) {\n        return answer.replace('{NAME}', user.name).replace('{SURNAME}', user.surname);\n    }\n    if (answer.includes('{DAY_EXPENSES}')) {\n        answer = todaysExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_EXPENSES}')) {\n        answer = yearsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_EXPENSES}')) {\n        answer = weeksExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_EXPENSES}')) {\n        answer = monthsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{DAY_INCOME}')) {\n        answer = todaysIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_INCOME}')) {\n        answer = yearsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_INCOME}')) {\n        answer = weeksIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_INCOME}')) {\n        answer = monthsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{All_GROUPS}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{CATEGORY_NAME}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    return answer;\n};\n\n//==================================EXPENSES===============================\n\nconst todaysExpenses = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysExpenses = todaysExpenses.toFixed(2);\n    if (settings[0].dailyBudget.length) {\n        answer = answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your daily budget is ${settings[0].dailyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst yearsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    yearExpenses = yearExpenses.toFixed(2);\n    return answer.replace('{YEAR_EXPENSES}', yearExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    weekExpenses = weekExpenses.toFixed(2);\n    if (settings[0].weeklyBudget.length) {\n        answer = answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your weekly budget is ${settings[0].weeklyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst monthsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    monthExpenses = monthExpenses.toFixed(2);\n    if (settings[0].monthlyBudget.length) {\n        answer = answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your monthly budget is ${settings[0].monthlyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\n//==================================INCOMES===============================\n\nconst todaysIncomes = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysIncomes = todaysIncomes.toFixed(2);\n    return answer.replace('{DAY_INCOME}', todaysIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst yearsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    yearIncomes = yearIncomes.toFixed(2);\n    return answer.replace('{YEAR_INCOME}', yearIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    weekIncomes = weekIncomes.toFixed(2);\n    return answer.replace('{WEEK_INCOME}', weekIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst monthsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    monthIncomes = monthIncomes.toFixed(2);\n    return answer.replace('{MONTH_INCOME}', monthIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\n//==================================RECOMENDATION===============================\n\nconst recomentdationForCategories = (answer, settings, allExpenses) => {\n    let groupedExpenses = [];\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            let found = false;\n            groupedExpenses.forEach(group => {\n                if (group.groupName === expense.group) {\n                    found = true;\n                    group.amount += parseFloat(expense.price);\n                }\n            });\n            if (!found) {\n                groupedExpenses.push({\n                    groupName: expense.group,\n                    amount: parseFloat(expense.price)\n                });\n            }  \n        }\n    });\n\n    groupedExpenses.forEach(expense => {\n        expense.amount = expense.amount.toFixed(2);\n    });\n\n    groupedExpenses = groupedExpenses.sort((a, b) => parseFloat(b.amount) - parseFloat(a.amount) );\n    let answerString = '';\n    groupedExpenses.forEach((expense, i) => {\n        if (groupedExpenses.length === i+1) {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}.`;\n        } else {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}; `;\n        }\n    });\n    if (answer.includes('{CATEGORY_NAME}')) {\n        return `${answer.replace('{CATEGORY_NAME}', groupedExpenses[0].groupName)} - ${groupedExpenses[0].amount} ${getCurrency(settings[0])}.`;\n    } else {\n        return answer.replace('{All_GROUPS}', answerString);\n    }\n};\n  \nconst getCurrency = settings => {\n    let currencyValue = settings.currency === 'GBD' ? '£' : settings.currency === 'Dollar' ? '$' : '€';\n    return currencyValue;\n};","import React, { useEffect, useState, useContext, Fragment } from \"react\";\nimport ExpensesContext from '../../context/expenses-context';\nimport AuthContext from '../../context/auth-context';\nimport { Widget, addResponseMessage, toggleMsgLoader, dropMessages } from 'react-chat-widget';\nimport './ChatBot.css';\nimport logo from '../../pig-face.png';\nimport { getAnswer } from './chatBotLogick';\n\n\nconst CustomChatbot = () => {\n    const { settingsForBot, allExpensesForBot, user} = useContext(ExpensesContext);\n    let currentUser = AuthContext._currentValue;\n\n    useEffect(() => {\n        if (currentUser.token) {\n            dropMessages();\n            handleNewUserMessage(\"Hello\");\n        }\n    }, [currentUser.token]);\n\n    const handleNewUserMessage = (newMessage) => {\n        toggleMsgLoader();\n        let message = { userMessage: newMessage };\n\n        fetch('/watson', {\n            method: 'POST',\n            body: JSON.stringify(message),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n                toggleMsgLoader();\n                data.response.forEach(response => {\n                    let answer = getAnswer(response.text, settingsForBot, allExpensesForBot, user);\n                    addResponseMessage(answer);\n                });\n            })\n            .catch(err => {\n                toggleMsgLoader();\n                console.log(err);\n            });\n    };\n\n    return (\n        <Fragment>\n            {currentUser.token ? < Widget\n                handleNewUserMessage={handleNewUserMessage}\n                title=\"Budget Buddy\"\n                subtitle=\"\"\n                profileAvatar={logo}\n            /> : null\n            }\n        </Fragment>\n    );\n};\n\nexport { CustomChatbot as default };","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport AuthContext from '../context/auth-context';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport ChatBot from '../components/chatBot/ChatBot';\nimport './Expenses.css';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n    let [settings, setSettings] = useState([]);\n    let [settingsForBot, setSettingsForBot] = useState([]);\n    let [allExpensesForBot, setAllExpensesForBot] = useState([]);\n    let [user, setUser] = useState({});\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorId\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(resData.data);\n                setSettings(...settings, resData.data.settingsData);\n                return resData.data.settingsData;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                let newArrayForBot = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n                setAllExpensesForBot(newArrayForBot);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                    setAllExpensesForBot([...allExpensesForBot, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                    setAllExpensesForBot([...allExpensesForBot,  res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpenseFromImport = fields => {\n        let requestBody = {\n            query: ''\n        };\n        let time = convertTimeToMs(fields.createdAt);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data.createExpense) {\n                    res.data.createExpense.tag = 'Expense';\n                    return res.data.createExpense;\n                } else {\n                    res.data.createIncome.tag = 'Income';\n                    return res.data.createIncome;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                let updatedAllListForBot = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setAllExpensesForBot(updatedAllListForBot);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const getUserData = () => {\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async (values) => {\n        if (values == undefined || values === 'All') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            let incomes = await getIncomeList(allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n            if (!allExpensesForBot.length) {\n                let user = await getUserData();\n                setAllExpensesForBot(all);\n                setSettingsForBot(allSettings);\n                setUser(user);\n            }\n        } else if (values === 'Expense') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await getIncomeList(allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n\n    const getAllOnFilter = async values => {\n        let allUsers = [];\n        if (values.tag === 'All') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            let incomes = await onFilterIncomes(values, allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n        } else if (values.tag === 'Expense') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await onFilterIncomes(values, allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore, submitExpenseFromImport, settings, settingsForBot, allExpensesForBot, user, updateExpense}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal }}>\n                <Filter />\n                <Fragment>\n                    {user._id? <ChatBot />:null}\n                </Fragment>\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport moment from 'moment';\nimport ModalContext from '../context/modal-context';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport { FiUser, FiSettings } from \"react-icons/fi\";\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport './Settings.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Settings = () => {\n    let [err, setErr] = useState({\n        newCategorie: false,\n        newMember: false,\n        emailValidation: false\n    });\n    let [categories, setCategories] = useState([]);\n    let [members, setMembers] = useState([]);\n    let currentUser = AuthContext._currentValue;\n    let [userData, setUserData] = useState({});\n    let [editableUserData, setEditableUserData] = useState({});\n    let [settingsData, setSettingsData] = useState({});\n    let [isLoading, setIsLoading] = useState(false);\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const [key, setKey] = useState('systemSettings');\n\n    useEffect(() => {\n        getUserData();\n        getSettingsData();\n    }, []);\n\n    const getUserData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setUserData(resData.data.userData[0]);\n                setEditableUserData(resData.data.userData[0]);\n                setIsLoading(false);\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateUser = (fields) => {\n        fields.updatedAt = JSON.stringify(moment(new Date()).valueOf());\n\n        setIsLoading(true);\n        let requestBody = {\n            query: `\n\n                              mutation UpdateUser($id: ID!, $name: String!, $surname: String!, $email: String!, $updatedAt: String!) {\n                                updateUser(userId: $id, name: $name, surname: $surname, email: $email, updatedAt: $updatedAt) {\n                                    name\n                                    surname\n                                    email\n                                  }\n                              }\n                            `,\n            variables: {\n                id: userData._id,\n                name: fields.firstName,\n                surname: fields.lastName,\n                email: fields.email,\n                updatedAt: fields.updatedAt\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                console.log(res);\n                setEditableUserData(res.data.updateUser);\n                modalInfo(true, 'Confirmation', 'User was updated');\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                let membersList = [];\n                setSettingsData(resData.data.settingsData[0]);\n                setCategories(resData.data.settingsData[0].categories.split(';'));\n                resData.data.settingsData[0].members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateSettings = (fields) => {\n        setIsLoading(true);\n        let allMemebers = '';\n        let allCategories = '';\n\n        categories.forEach((category, i) => {\n            if (categories.length != i + 1) {\n                allCategories += `${category};`;\n            } else {\n                allCategories += category;\n            }\n        });\n        if (members.length) {\n            members.forEach((member, i) => {\n                if (members.length != i + 1) {\n                    allMemebers += `${member};`;\n                } else {\n                    allMemebers += member;\n                }\n            });\n        }\n\n        let requestBody = {\n            query: `\n\n                              mutation UpdateSettings($id: ID!, $dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $categories: String!, $members: String!, $currency: String!) {\n                                updateSettings(settingsId: $id, dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, categories: $categories, members: $members, currency: $currency) {\n                                    _id\n                                    dailyBudget\n                                    weeklyBudget\n                                    monthlyBudget\n                                    categories\n                                    members\n                                    currency\n                                  }\n                              }\n                            `,\n            variables: {\n                id: settingsData._id,\n                dailyBudget: fields.dailyBudget,\n                weeklyBudget: fields.weeklyBudget,\n                monthlyBudget: fields.monthlyBudget,\n                categories: allCategories,\n                members: allMemebers,\n                currency: fields.currency\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let membersList = [];\n                setSettingsData(res.data.updateSettings);\n                setCategories(res.data.updateSettings.categories.split(';'));\n                res.data.updateSettings.members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n                setIsLoading(false);\n                modalInfo(true, 'Confirmation', 'Settings was updated');\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const validatePrice = (event) => {\n        let price = event.target.value;\n        if (price.length === 1 && price === '.') {\n            price = price.slice(0, -1);\n        }\n        if (price.length === 2 && price === '00') {\n            price = price.slice(0, -1);\n        }\n        if (price.split('.').length - 1 > 1) {\n            price = price.slice(0, -1);\n        }\n        price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n        return price.replace(/[^\\d.-]/g, '').replace('-', '');\n    };\n\n    const addCategory = (event, oldCategory) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newCategorie: true });\n            return oldCategory;\n        } else {\n            event.target.value = event.target.value.toLowerCase();\n            let newCategory = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n            let found = false;\n            categories.forEach(category => {\n                if (category === newCategory) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This category already in the category list.');\n            } else {\n                setCategories([...categories, newCategory]);\n            }\n        }\n    };\n\n    const removeCategory = category => {\n        if (categories.length === 1) {\n            modalInfo(true, 'Error', 'You can\\'t delete all categories.');\n        } else {\n            setCategories(categories.filter(item => item !== category));\n        }\n    };\n\n    const clearCategory = event => {\n        return '';\n    };\n\n    const emitChangesToCategory = event => {\n        if (err.newCategorie) {\n            setErr({ ...err, newCategorie: false });\n        }\n        return event.target.value.replace(/[//|/;&$%@\"<>()+{}.',=_~`!#^*/?]/g, '');\n    };\n\n    const addMember = (event, oldMember, error) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newMember: true, emailValidation: false });\n            return oldMember;\n        } else if (error.newMember) {\n            setErr({ ...err, emailValidation: true });\n        } else {\n            let newMember = event.target.value.toLowerCase();\n            let found = false;\n            members.forEach(member => {\n                if (member === newMember) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This member already in the members list.');\n            } else {\n                setMembers([...members, newMember]);\n            }\n        }\n    };\n\n    const removeMember = member => {\n        setMembers(members.filter(item => item !== member));\n    };\n\n    const clearMember = event => {\n        return '';\n    };\n\n    const emitChangesToMember = event => {\n        if (err.emailValidation) {\n            setErr({ ...err, emailValidation: false });\n        }\n        if (err.newMember) {\n            setErr({ ...err, newMember: false });\n        }\n        return event.target.value.replace(/[//|/;&$%\"<>()+{}',=~`!#^*/?]/g, '');\n    };\n\n    return (\n        isLoading ? <Spinner /> :\n            <Fragment>\n                <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                    <InfoModal />\n                    <Tabs id=\"settings-tab\" activeKey={key} onSelect={k => setKey(k)}>\n                        <Tab eventKey=\"userSettings\" title={key === 'userSettings' ? <span style={{ color: '#ea97c4' }}><FiUser size={20} />&nbsp; User </span> :\n                            <span><FiUser size={20} color={'#aeaeae'} />&nbsp; User </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    firstName: editableUserData.name || '',\n                                    lastName: editableUserData.surname || '',\n                                    email: editableUserData.email || '',\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    firstName: Yup.string()\n                                        .required('First Name is required'),\n                                    lastName: Yup.string()\n                                        .required('Last Name is required'),\n                                    email: Yup.string()\n                                        .email('Email is invalid')\n                                        .required('Email is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateUser(fields);\n                                }}\n                                render={({ errors, touched }) => (\n                                    <Form className=\"settings-form\" id=\"formContentUserSettings\">\n                                        <div className=\"p-2\">\n                                            <h4>User settings</h4>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                        <Tab eventKey=\"systemSettings\" title={key === 'systemSettings' ? <span style={{ color: '#ea97c4' }}><FiSettings size={20} />&nbsp; System </span> :\n                            <span><FiSettings size={20} color={'#aeaeae'} />&nbsp; System </span>}>\n                            <Formik\n                                validateOnChange\n                                enableReinitialize={true}\n                                initialValues={{\n                                    dailyBudget: settingsData.dailyBudget || '',\n                                    weeklyBudget: settingsData.weeklyBudget || '',\n                                    monthlyBudget: settingsData.monthlyBudget || '',\n                                    categories: settingsData.categories || '',\n                                    newCategorie: '',\n                                    newMember: '',\n                                    members: settingsData.members || '',\n                                    currency: settingsData.currency || ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    dailyBudget: Yup.number(),\n                                    weeklyBudget: Yup.number(),\n                                    monthlyBudget: Yup.number(),\n                                    categories: Yup.string(),\n                                    newCategorie: Yup.string(),\n                                    memebers: Yup.string()\n                                        .email('Email is invalid'),\n                                    newMember: Yup.string()\n                                        .email('Email is invalid'),\n                                    currency: Yup.string()\n                                        .required('Currency is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateSettings(fields);\n                                }}\n                                render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, validateField }) => (\n                                    <Form id=\"formContentSystemSettings\">\n                                        <div className=\"form-group row col-sm-12\" style={{ paddingTop: '25px' }}>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Budget settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Daily budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group \">\n                                                            <input placeholder=\"0.00\" name=\"dailyBudget\" onChange={e => { setFieldValue('dailyBudget', validatePrice(e)); }} value={values.dailyBudget} className={'form-control' + (errors.dailyBudget && touched.dailyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"dailyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Weekly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"weeklyBudget\" onChange={e => { setFieldValue('weeklyBudget', validatePrice(e)); }} value={values.weeklyBudget} className={'form-control' + (errors.weeklyBudget && touched.weeklyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"weeklyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Monthly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"monthlyBudget\" onChange={e => { setFieldValue('monthlyBudget', validatePrice(e)); }} value={values.monthlyBudget} className={'form-control' + (errors.monthlyBudget && touched.monthlyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"monthlyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Currency</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <select name=\"currency\" onChange={handleChange}\n                                                            onBlur={handleBlur} value={values.currency} className={'custom-select mr-sm-2 form-control' + (errors.currency && touched.currency ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                                            <option value=\"\">Select a currency</option>\n                                                            <option value=\"Euro\">Euro &euro;</option>\n                                                            <option value=\"Dollar\">Dollar $</option>\n                                                            <option value=\"GBD\">Pound &pound;</option>\n                                                        </select>\n                                                        <ErrorMessage name=\"currency\" component=\"div\" className=\"invalid-feedback\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Categories settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add category</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Category name\" name=\"newCategorie\" onChange={e => { setFieldValue('newCategorie', emitChangesToCategory(e)); }} value={values.newCategorie} className={'form-control col-sm-8 mr-1' + (err.newCategorie ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => { setFieldValue('categories', addCategory(e, values.categories)); setFieldValue('newCategorie', clearCategory(e)); }} value={values.newCategorie} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newCategorie\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newCategorie ? <div className=\"invalid-feedback\"> Category field can't be empty</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">All categories</label>\n                                                    <div className=\"col-sm-8\">\n                                                        <ul className=\"list-group col-sm-9\">\n                                                            {\n                                                                categories.map((category) => (\n                                                                    <li className='row' key={category}>\n                                                                        <span className='list-group-item list-item col-sm-12'>{category}\n                                                                            <button className='btn card_removeButton' type='button' onClick={() => removeCategory(category)}>\n                                                                                <i><FaRegTimesCircle size={20} /></i>\n                                                                            </button>\n                                                                        </span>\n                                                                    </li>\n                                                                ))\n                                                            }\n                                                        </ul>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Family settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add member</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Member email\" name=\"newMember\" onChange={e => { setFieldValue('newMember', emitChangesToMember(e)); }} value={values.newMember} className={'form-control col-sm-8 mr-1' + (err.newMember || err.emailValidation ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => {  setFieldValue('members', addMember(e, values.members, errors)); setFieldValue('newMember', clearMember(e)); }} value={values.newMember} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newMember\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newMember ? <div className=\"invalid-feedback\"> Member field can't be empty</div> : null}\n                                                            {err.emailValidation ? <div className=\"invalid-feedback\">Email is invalid</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n                                                {\n                                                    members.length ? <div className=\"form-group row\">\n                                                        <label className=\"col-sm-4\" htmlFor=\"title\">All members</label>\n                                                        <div className=\"col-sm-8\">\n                                                            <ul className=\"list-group col-sm-9\">\n                                                                {\n                                                                    members.map((member) => (\n                                                                        <li className='row' key={member}>\n                                                                            <span className='list-group-item list-item col-sm-12'>{member}\n                                                                                <button className='btn card_removeButton' type='button' onClick={() => removeMember(member)}>\n                                                                                    <i><FaRegTimesCircle size={20} /></i>\n                                                                                </button>\n                                                                            </span>\n                                                                        </li>\n                                                                    ))\n                                                                }\n                                                            </ul>\n                                                        </div>\n                                                    </div> : null\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                    </Tabs>\n                </ModalContext.Provider>\n            </Fragment>\n    );\n};\n\nexport { Settings as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    {/* <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    {/* <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport Settings from './pages/Settings';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    fetch('/removeCookie', {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n      .then(data => {\n        console.log(data.response.message);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <BrowserRouter>\n          <Fragment>\n            <AuthContext.Provider\n              value={{\n                token: this.state.token,\n                userId: this.state.userId,\n                login: this.login,\n                logout: this.logout\n              }}\n            >\n              <MainNavigation />\n              <main className=\"main-content\">\n                <Switch>\n                  {!this.state.token && (\n                    <Route path=\"/auth\" component={AuthPage} />\n                  )}\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                    <Route path=\"/expenses\" component={Expenses} />\n                  )}\n                  {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                  {this.state.token && (\n                    <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                  )}\n                  <Route path=\"/events\" component={EventsPage} />\n                  {this.state.token && (\n                    <Route path=\"/bookings\" component={BookingsPage} />\n                  )}\n                  {this.state.token && (\n                    <Route path=\"/settings\" component={Settings} />\n                  )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n                </Switch>\n              </main>\n            </AuthContext.Provider>\n          </Fragment>\n        </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}