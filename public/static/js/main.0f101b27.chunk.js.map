{"version":3,"sources":["components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","pages/Expenses.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["spinner","react_default","a","createElement","className","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","react","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","Provider","value","auth_context","values","time","JSON","stringify","Date","getTime","query","variables","surname","createdAt","updatedAt","body","ok","statusText","concat","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","_id","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","deleteBookingHandler","bookingId","requestBody","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","submitExpense","showModal","setShowModal","expense","onUpdate","selectedDate","setSelectedDate","tag","group","updateDate","handleChange","setFieldValue","handleBlur","onBlur","target","slice","split","indexOf","substr","replace","validatePrice","md_index_esm","size","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","index_esm","actionFunction","Expense","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","fi_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","dateFrom","dateTo","startOf","endOf","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","minAndMax","first","allData","totals","expenses","incomes","forEach","parseFloat","Expenses","toFixed","Incomes","Budget","apply","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","fontSize","domain","allowDataOverflow","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","role","file","substring","bytes","newFileList","removeFile","assign","files","i","Papa","parse","complete","results","currentUser","_currentValue","setAllExpenses","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","getExpenseList","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","message","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","sort","b","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","asyncToGenerator","regenerator_default","mark","_callee","all","wrap","_context","next","sent","stop","arguments","_ref2","_callee2","_context2","_x","removeIncome","updatedAllList","updateIncome","createExpense","createIncome","components_Filter_Filter","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.0f101b27.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"cssload-inner cssload-one\"></div>\n        <div className=\"cssload-inner cssload-two\"></div>\n        <div className=\"cssload-inner cssload-three\"></div>\n    </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8 col-form-label\">\n                            <Field placeholder=\"Firs name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                setIsLoading(false);\n                if (res.data.login) {\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\nimport { MdEuroSymbol } from 'react-icons/md';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst AddExpenseModal = () => {\n    const {submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><MdEuroSymbol className=\"\" size={20} /></div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense }) => {\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n\n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore } = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag ==='Expense'? <div className='card_price_expense'>-{expense.price} € </div> : <div className='card_price_income'>{expense.price} € </div>}\n                <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                    <i><FaRegTimesCircle size={20} /></i>\n                </button>\n                <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                    <i><FaRegEdit size={20} /></i>\n                </button>\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses } = useContext(ExpensesContext);\n\n    return (\n        <ExpensesContext.Provider value={{ showMore }}>\n            <span className=\"card_first card\">\n                <Fragment>\n                    <InfoModal />\n                    <div className='row d-flex align-self-center'>\n                        <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                            <i><FiPlus size={30} /></i>\n                        </button>\n                        <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                            <i><FiUpload size={25} /></i>\n                        </button>\n                        {allExpenses.length? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                            {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                        </button> : null}\n                    </div>\n                    {showModal && (\n                        <Fragment>\n                            <AddExpenseModal />\n                        </Fragment>\n                    )}\n                </Fragment>\n            </span>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    <Expense className='expenses_list' key={expense._id} expense={expense} />\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = filter => {\n        let date = {\n            dateFrom: '',\n            dateTo: ''\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll();\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                <button className=\" col-sm-2 btn btn_with_line\" onClick={() => fastFilter('today')}>Today</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('week')}>This week</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('month')}>This month</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('year')}>This year</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all')}>All</button>\n            </div>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo:  toTime,\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required')\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <label className=\" col-form-label mr-3\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minAndMax.smallest, minAndMax.biggest]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport { FiUpload } from \"react-icons/fi\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete } from \"react-icons/fi\";\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            files.forEach((file, i) => {\n                Papa.parse(file, {\n                    complete: function (results) {\n                        console.log(results);\n                        if (files.length == i + 1) {\n                            modalInfo(true, 'Confirmation', 'File was uploaded');\n                            setUploadingFiles(false);\n                            setAllFiles([]);\n                            handleClose();\n                        }\n                    }\n                });\n            });\n        }\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name != file.name && e.size != file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, acceptedFiles, rejectedFiles } = useDropzone({\n        onDrop,\n        accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center mt-5\" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport './Expenses.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            }\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            }\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        console.log(expense);\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = updateElement => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = updateElement => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async () => {\n        let expenses = await getExpenseList();\n        let incomes = await getIncomeList();\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    const getAllOnFilter = async values => {\n        let expenses = await onFilterExpenses(values);\n        let incomes = await onFilterIncomes(values);\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, updateExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal}}>\n                <Filter />\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n      fetch('/removeCookie', {\n          method: 'GET',\n          credentials: \"same-origin\",\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      }).then(res => res.json())\n          .then(data => {\n            console.log(data.response.message);\n          })\n          .catch(err => {\n              console.log(err);\n          });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n                <Switch>\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                <Route path=\"/expenses\" component={Expenses} />\n                )}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}