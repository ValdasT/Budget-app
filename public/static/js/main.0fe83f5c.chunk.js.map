{"version":3,"sources":["components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","reducers/expenses.js","context/expenses-context.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Modal/AddExpenseModal.js","components/Expenses/AddExpense/AddExpense.js","pages/Expenses.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["spinner","react_default","a","createElement","className","React","createContext","token","userId","login","tokenExpiration","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","react","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","modalInfo","header","text","Provider","value","auth_context","values","time","JSON","stringify","Date","getTime","query","variables","surname","createdAt","updatedAt","fetch","method","body","headers","Content-Type","then","res","ok","statusText","json","data","concat","catch","err","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","_id","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","console","log","deleteBookingHandler","bookingId","requestBody","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","useEffect","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesReducer","action","expenses","expense","expensesContext","Expense","milliseconds","removeExpense","ExpensesContext","dispatch","background","moment","format","group","index_esm","size","Expenselist","allExpenses","Expense_Expense_Expense","AddExpenseModal","submitExpense","showModal","setShowModal","handleChange","setFieldValue","handleBlur","onBlur","target","slice","split","indexOf","substr","replace","validatePrice","md_index_esm","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","pleaseformat","AddExpenseForm","currentUser","setAllExpenses","valueOf","message","createExpense","Modal_AddExpenseModal","Expenses","_currentValue","getExpenseList","_useReducer","useReducer","_useReducer2","expenseId","newExpensesList","forEach","AddExpense_AddExpenseForm","ExpensesList_Expenselist","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.0fe83f5c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"cssload-inner cssload-one\"></div>\n        <div className=\"cssload-inner cssload-two\"></div>\n        <div className=\"cssload-inner cssload-three\"></div>\n    </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8 col-form-label\">\n                            <Field placeholder=\"Firs name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                  tokenExpiration\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                setIsLoading(false);\n                if (res.data.login) {\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n                        res.data.login.tokenExpiration,\n\n                    );\n                } else {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n\n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","const expensesReducer = (state, action) => {\n    switch (action.type) {\n    case 'POPULATE_ EXPENSES':\n        return action.expenses;\n    case 'ADD_EXPENSE':\n        return [\n            ...state,\n            { title: action.title, body: action.body }\n        ];\n    case 'REMOVE_EXPENSE':\n        return state.filter((expense) => expense.title !== action.title);\n    default:\n        return state;\n    }\n};\n\nexport { expensesReducer as default };","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense }) => {\n\n    const { removeExpense } = useContext(ExpensesContext);\n    const { dispatch } = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM-DD-YYYY');\n    };\n\n    return (\n        <span className=\"card\">\n            <div style={{ background: 'rgb(249, 248, 248)' }}>\n                <div className='card_title'> {expense.title}</div>\n            </div>\n            <div className='card_date'>{dateBeautify(expense.createdAt)}</div>\n            <div className='card_group'>Group: {expense.group}</div>\n            <div className='card_description'>{expense.description}</div>\n            <div className='card_price'>-{expense.price} € </div>\n            <button className='btn card_removeButton' onClick={() => removeExpense(expense._id)}>\n                <i><FaRegTimesCircle size={20} /></i>\n            </button>\n            <button className='btn card_editButton' onClick={() => dispatch({ type: 'REMOVE_EXPENSE', title: expense.title })}>\n                <i><FaRegEdit size={20} /></i>\n            </button>\n        </span>\n    );\n};\n\nexport { Expense as default };","import React, { useContext} from 'react';\nimport Expense from './Expense/Expense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses } = useContext(ExpensesContext);\n\n    return (\n        allExpenses.map((expense) => (\n            <Expense className='expenses_list' key={expense._id} expense={expense}/>\n        )\n        )\n    );\n\n};\n        \nexport { Expenselist as default };","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\nimport { MdEuroSymbol } from 'react-icons/md';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM-DD-YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst AddExpenseModal = () => {\n    const {submitExpense, showModal, setShowModal } = useContext(ModalContext);\n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM-DD-YYYY');\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add expense</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            title: '',\n                            description: '',\n                            group: '',\n                            price: '',\n                            date: time\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><MdEuroSymbol className=\"\" size={20} /></div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                                    <button className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useState, useContext, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../context/expenses-context';\nimport ModalContext from '../../../context/modal-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport Spinner from '../../Spinner/Spinner';\nimport InfoModal from '../../Modal/Modal';\nimport '../../../pages/Expenses.css';\n\nconst AddExpenseForm = () => {\n    const { currentUser, allExpenses, setAllExpenses} = useContext(ExpensesContext);\n    let [showModal, setShowModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const submitExpense = (fields) => {\n        setIsLoading(true);\n        let time = JSON.stringify(moment(fields.date).valueOf());\n        const requestBody = {\n            query: `\n                      mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                        createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                            _id\n                            title\n                            price\n                            createdAt\n                            description\n                            group\n                          }\n                      }\n                    `,\n            variables: {\n                title: fields.title,\n                description: fields.description,\n                price: fields.price,\n                group: fields.group,\n                createdAt: time,\n                updatedAt: time\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                        throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                modalInfo(true, 'Confirmation', 'Expense was created');\n                setAllExpenses([...allExpenses, res.data.createExpense]);\n                console.log(res.data.createExpense);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    return (\n        <Fragment>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, submitExpense, modalHeader, modalText, showModal, setShowModal }}>\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <div className=\"expenses-control\">\n                                <div className=\"card-body text-center\">\n                                    <p className=\"card-text\">Collect all your expenses</p>\n                                    <button className='btn btn_addExpense' onClick={() => setShowModal(!showModal)}>add expense</button>\n                                </div>\n                            </div>\n                            {showModal && (\n                                <Fragment>\n                                    <AddExpenseModal />\n                                </Fragment>\n                            )}\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </Fragment >\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useEffect, useState, useReducer, Fragment } from 'react';\nimport expensesReducer from '../reducers/expenses';\nimport ExpensesContext from '../context/expenses-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport AddExpense from '../components/Expenses/AddExpense/AddExpense';\nimport Spinner from '../components/Spinner/Spinner';\nimport './Expenses.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n\n    useEffect(() => {\n        getExpenseList();\n    }, []);\n\n    const removeExpense = expenseId => {\n        const requestBody = {\n            query: `\n              mutation RemoveExpense($id: ID!) {\n                removeExpense(expenseId: $id) {\n                _id\n                 title\n                }\n              }\n            `,\n            variables: {\n                id: expenseId\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                console.log(res);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newExpensesList = [];\n                allExpenses.forEach(expense => {\n                    if (expense._id != res.data.removeExpense._id) {\n                        newExpensesList.push(expense);\n                    }\n                });\n                setAllExpenses(newExpensesList);\n            })\n            .catch(err => {\n\n                console.log(err);\n            });\n    };\n\n    const getExpenseList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                console.log(res);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setIsLoading(false);\n                setAllExpenses(resData.data.expenses);\n                console.log(resData);\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n            });\n    };\n\n    const [expenses, dispatch] = useReducer(expensesReducer, []);\n\n    // useEffect(() => {\n    //     const expenses = JSON.parse(localStorage.getItem('expenses'));\n\n    //     if (expenses) {\n    //         dispatch({ type: 'POPULATE_EXPENSES', expenses });\n    //     }\n    // }, []);\n\n    // useEffect(() => {\n    //     localStorage.setItem('expenses', JSON.stringify(expenses));\n    // }, [expenses]);\n\n\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense }}>\n            {\n                isLoading ? <Spinner /> :\n                    <Fragment>\n                        <AddExpense />\n                        <div className='center'>\n                            <ExpenseList />\n                        </div>\n                    </Fragment>\n            }\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component,Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n                <Switch>\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                <Route path=\"/expenses\" component={Expenses} />\n                )}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}