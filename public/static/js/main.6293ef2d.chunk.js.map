{"version":3,"sources":["pig-face.png","components/Backdrop/Backdrop.js","components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","components/chatBot/chatBotLogick.js","components/chatBot/ChatBot.js","pages/Expenses.js","pages/Settings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","backdrop","react_default","a","createElement","className","spinner","react","Backdrop_Backdrop","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","createSettings","args","values","requestBody","query","variables","dailyBudget","weeklyBudget","monthlyBudget","members","categories","currency","creatorEmail","creatorsEmail","body","JSON","stringify","ok","statusText","message","concat","Provider","value","auth_context","time","Date","getTime","surname","createdAt","updatedAt","createUser","_id","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","length","document","title","OneTest_OneTest","react_apollo_esm","loading","allFiles","map","e","key","Error","resData","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","setting","submitExpense","showModal","setShowModal","expense","onUpdate","currencyValue","categoriesList","split","forEach","push","createCategoryList","selectedDate","setSelectedDate","tag","description","group","price","date","updateDate","_ref2","handleChange","setFieldValue","handleBlur","onChange","onBlur","category","event","target","slice","indexOf","substr","replace","validatePrice","style","fontSize","react_datepicker_min_default","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","index_esm","size","actionFunction","Expense","currentUser","_currentValue","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","creatorId","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","settings","fi_index_esm","md_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","filter","dateFrom","dateTo","startOf","endOf","_d","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","maxValue","setMaxValue","_useState11","_useState12","minValue","setminValue","minAndMax","first","allData","totals","expenses","incomes","parseFloat","Expenses","toFixed","Incomes","Budget","apply","max","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","domain","allowDataOverflow","ImportModal","submitExpenseFromImport","setAllExpenses","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","csvToJson","csv","Papa","parse","complete","results","createNewCards","asyncToGenerator","regenerator_default","mark","_callee2","fromFile","formatedArray","preparedToDb","newFromDb","wrap","_context2","prev","next","searchFields","sent","j","toLowerCase","element","i","_callee","_context","t0","t1","call","stop","_x2","this","arguments","_x","fieldsArray","Promise","rej","numbers","missingFields","found","field","toLocaleLowerCase","createErrMsg","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","role","file","substring","bytes","newFileList","removeFile","assign","files","extension","reader","FileReader","onload","bstr","result","wb","XLSX","read","cellDates","dateNF","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","raw","readAsBinaryString","convertToCSV","todaysExpenses","answer","today","getCurrency","yearsExpenses","yearExpenses","weeksExpenses","weekExpenses","monthsExpenses","monthExpenses","todaysIncomes","yearsIncomes","yearIncomes","weeksIncomes","weekIncomes","monthsIncomes","monthIncomes","recomentdationForCategories","groupedExpenses","groupName","amount","sort","b","answerString","includes","CustomChatbot","settingsForBot","allExpensesForBot","user","dropMessages","handleNewUserMessage","newMessage","toggleMsgLoader","userMessage","getAnswer","addResponseMessage","react_chat_widget_lib","subtitle","profileAvatar","logo","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","setSettings","_useState19","_useState20","setSettingsForBot","_useState21","_useState22","setAllExpensesForBot","_useState23","_useState24","setUser","getSettingsData","Authorization","toConsumableArray","settingsData","getExpenseList","users","allUsers","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","allSettings","all","_user","_allSettings","_allUsers","_expenses","_allSettings2","_allUsers2","_incomes","undefined","userData","_expenses2","_incomes2","newArrayForBot","removeIncome","createExpense","createIncome","updatedAllList","updatedAllListForBot","updateIncome","components_Filter_Filter","ChatBot_CustomChatbot","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","Settings","newCategorie","newMember","emailValidation","setErr","setCategories","setMembers","setUserData","editableUserData","setEditableUserData","setSettingsData","setKey","getUserData","membersList","Tabs","activeKey","onSelect","k","Tab","eventKey","color","enableReinitialize","updateUser","validateOnChange","memebers","allMemebers","allCategories","member","updateSettings","validateField","paddingTop","objectSpread","oldCategory","newCategory","charAt","toUpperCase","addCategory","item","removeCategory","oldMember","error","addMember","removeMember","mainNavigation","Consumer","context","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","state","_this","setState","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","Component","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.6293ef2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pig-face.96b2c961.png\";","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React, { Fragment} from 'react';\nimport BackDrop from '../Backdrop/Backdrop';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <Fragment>\n        <BackDrop />\n        <div className=\"cssload-loader\">\n            <div className=\"cssload-inner cssload-one\"></div>\n            <div className=\"cssload-inner cssload-two\"></div>\n            <div className=\"cssload-inner cssload-three\"></div>\n        </div>\n    </Fragment>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.data.login) {\n                    setIsLoading(false);\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    let args = {\n                        userId: res.data.createUser._id,\n                        creatorsEmail: res.data.createUser.email\n                    };\n                    createSettings(args, values);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    const createSettings = (args, values) => {\n        let requestBody = {\n            query: `\n            mutation CreateSettings($dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $members: String!, $categories: String!,  $currency: String!, $userId: String!, $creatorEmail: String! ) {\n                createSettings(settingsInput:{dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, members:$members, categories:$categories,currency:$currency, userId: $userId, creatorEmail: $creatorEmail}) {\n                    _id\n                   \n                  }\n              }\n      `,\n            variables: {\n                dailyBudget: '',\n                weeklyBudget: '',\n                monthlyBudget: '',\n                members: '',\n                categories: '',\n                currency: '',\n                userId: args.userId,\n                creatorEmail: args.creatorsEmail\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data) {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                    setIsLoading(false);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    }; \n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst createCategoryList = setting => {\n    let categoriesList = [];\n    setting.categories.split(';').forEach(e => {\n        if (e.length) {\n            categoriesList.push(e);\n        }\n    });\n    return categoriesList;\n};\n\nconst AddExpenseModal = ({ setting}) => {\n    const { submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';  \n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    let [categories, setCategories] = useState(createCategoryList(setting));\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            {\n                                                categories.map((category) => (\n                                                    <option key={category} value={category}>{category}</option>\n                                                ))\n                                            }\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div style={{ fontSize: '15px' }} className=\"input-group-text\">{currencyValue}</div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport AuthContext from '../../../../context/auth-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense, setting }) => {\n\n    let currentUser = AuthContext._currentValue;\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';                                                           \n    \n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore} = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal setting={setting} />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Creator: {setting.creatorEmail}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag === 'Expense' ? <div className='card_price_expense'>-{expense.price} {currencyValue} </div> : <div className='card_price_income'>{expense.price} {currencyValue} </div>}\n                {\n                    currentUser.userId === setting.creatorId ?\n                        <Fragment>\n                            <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment> :\n                        <Fragment>\n                            <button className='btn card_removeButton disabled' disabled onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton disabled' disabled onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment>\n                }\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <span className=\"card_first card\">\n            <Fragment>\n                <InfoModal />\n                <div className='row d-flex align-self-center'>\n                    <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                        <i><FiPlus size={30} /></i>\n                    </button>\n                    <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                        <i><FiUpload size={25} /></i>\n                    </button>\n                    {allExpenses.length ? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                        {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                    </button> : null}\n                </div>\n                {showModal && (\n                    <Fragment>\n                        <AddExpenseModal setting={settings[0]} />\n                    </Fragment>\n                )}\n            </Fragment>\n        </span>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    settings.map((setting) => (\n                        expense.creatorId === setting.creatorId? <Expense className='expenses_list' key={expense._id} expense={expense} setting={setting} />: null\n                    ))\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = (filter, values) => {\n        let date = {\n            dateFrom: '',\n            dateTo: '',\n            tag: values\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll(date.tag);\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo: toTime,\n                    tag: 'All'\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required'),\n                    tag: Yup.string()\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue, handleChange, handleBlur }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                            <button type='button' className=\" col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('today', values.tag);\n                                setFieldValue('dateFrom', moment().format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().format('MM/DD/YYYY'));\n                                setStartDate(moment()._d);\n                                setEndDate(moment()._d);\n                            }}>Today</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('week', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('week').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('week').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('week')._d);\n                                setEndDate(moment().endOf('week')._d);\n                            }}>This week</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('month', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('month').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('month').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('month')._d);\n                                setEndDate(moment().endOf('month')._d);\n                            }}>This month</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('year', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('year').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('year').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('year')._d);\n                                setEndDate(moment().endOf('year')._d);\n                            }}>This year</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all', values.tag)}>All</button>\n                        </div>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <div className=\"form-group row\">\n                                <label className=\" col-form-label\" htmlFor=\"title\">Type:</label>\n                                <div className=\"ml-3 mr-2\">\n                                    <select name=\"tag\" onChange={handleChange}\n                                        onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                        <option value=\"All\">All</option>\n                                        <option value=\"Expense\">Expenses</option>\n                                        <option value=\"Income\">Incomes</option>\n                                    </select>\n                                    <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                            </div>\n                            <label className=\" col-form-label ml-4\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2 ml-3 mr-3\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let [maxValue, setMaxValue] = useState('auto');\n    let [minValue, setminValue] = useState('auto');\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setMaxValue(minAndMax.biggest);\n        setminValue(minAndMax.smallest);\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minValue, maxValue]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport ExpensesContext from '../../context/expenses-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\nimport { FiUpload } from \"react-icons/fi\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete } from \"react-icons/fi\";\n\nimport './Modal.css';\n\nconst ImportModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { submitExpenseFromImport, setAllExpenses } = useContext(ExpensesContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            let extension = files[0].name.split('.');\n            extension = extension[extension.length - 1].toLowerCase();\n            if (extension === 'csv') {\n                csvToJson(files[0]);\n            } else {\n                const reader = new FileReader();\n                reader.onload = function (e) {\n                    let bstr = e.target.result;\n                    let wb = XLSX.read(bstr, { type: 'binary', header: 1, cellDates: true, dateNF: 'DD/MM/YYYY' });\n                    let wsname = wb.SheetNames[0];\n                    let ws = wb.Sheets[wsname];\n                    let csv = XLSX.utils.sheet_to_csv(ws, { header: 1, raw: false });\n                    csvToJson(csv);\n                };\n                let binaryFile = reader.readAsBinaryString(files[0]); // it triger reader, don't delete\n            }\n        }\n    };\n\n    const csvToJson = csv => {\n        Papa.parse(csv, {\n            complete: function (results) {\n                createNewCards(results);\n            }\n        });\n    };\n\n    const createNewCards = async fromFile => {\n        let formatedArray = [{\n            title: '',\n            description: '',\n            price: '',\n            group: '',\n            createdAt: '',\n            tag: ''\n        }];\n        let preparedToDb = [];\n        let fields = await searchFields(fromFile.data[0]);\n        fields.forEach((fromFile, j) => {\n            if (fromFile.name.toLowerCase() === 'title') {\n                formatedArray[0].title = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'description') {\n                formatedArray[0].description = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'price') {\n                formatedArray[0].price = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'group') {\n                formatedArray[0].group = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'date') {\n                formatedArray[0].createdAt = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'type') {\n                formatedArray[0].tag = fields[j].id;\n            }\n        });\n        fromFile.data.forEach((element, i) => {\n            if (i !== 0 && element[0].length) {\n                preparedToDb.push({\n                    title: element[formatedArray[0].title],\n                    description: element[formatedArray[0].description],\n                    price: element[formatedArray[0].price],\n                    group: element[formatedArray[0].group],\n                    createdAt: element[formatedArray[0].createdAt],\n                    tag: element[formatedArray[0].tag]\n                });\n            }\n        });\n        let newFromDb = [];\n        preparedToDb.forEach(async e => {\n            newFromDb.push(await submitExpenseFromImport(e));\n            if (formatedArray.length === newFromDb.length) {\n                await setAllExpenses(newFromDb);\n                modalInfo(true, 'Confirmation', 'File was uploaded');\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            }\n        });\n    };\n\n    const searchFields = fieldsArray => {\n        return new Promise((res, rej) => {\n            let mandataryFields = ['Title', 'Price', 'Group', 'Date', 'Type', 'Description'];\n            let numbers = [];\n            let missingFields = [];\n            mandataryFields.forEach(name => {\n                let found = false;\n                fieldsArray.forEach((field, i) => {\n                    if (name.toLocaleLowerCase() === field.toLowerCase()) {\n                        found = true;\n                        numbers.push({\n                            name: name,\n                            id: i\n                        });\n                    }\n                });\n                if (!found) {\n                    missingFields.push(name);\n                }\n            });\n            if (missingFields.length) {\n                let createErrMsg = '';\n                missingFields.forEach((field, i) => {\n                    if (missingFields.length === i + 1) {\n                        createErrMsg += ` \"${field}\".`;\n                    } else {\n                        createErrMsg += ` \"${field}\";`;\n                    }\n                });\n                modalInfo(true, 'Error', `Inappropriate file. Missing fields in the file:${createErrMsg}`);\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            } else {\n                res(numbers);\n            }\n        });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        // accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default ImportModal;","import moment from 'moment';\n\nexport const getAnswer = (answer, settings, allExpenses, user) => {\n    // recomentdationForCategories(answer, settings, allExpenses);\n    if (answer.includes('{NAME}')) {\n        return answer.replace('{NAME}', user.name).replace('{SURNAME}', user.surname);\n    }\n    if (answer.includes('{DAY_EXPENSES}')) {\n        answer = todaysExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_EXPENSES}')) {\n        answer = yearsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_EXPENSES}')) {\n        answer = weeksExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_EXPENSES}')) {\n        answer = monthsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{DAY_INCOME}')) {\n        answer = todaysIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_INCOME}')) {\n        answer = yearsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_INCOME}')) {\n        answer = weeksIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_INCOME}')) {\n        answer = monthsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{All_GROUPS}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{CATEGORY_NAME}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    return answer;\n};\n\n//==================================EXPENSES===============================\n\nconst todaysExpenses = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysExpenses = todaysExpenses.toFixed(2);\n    if (settings[0].dailyBudget.length) {\n        answer = answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your daily budget is ${settings[0].dailyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst yearsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    yearExpenses = yearExpenses.toFixed(2);\n    return answer.replace('{YEAR_EXPENSES}', yearExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    weekExpenses = weekExpenses.toFixed(2);\n    if (settings[0].weeklyBudget.length) {\n        answer = answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your weekly budget is ${settings[0].weeklyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst monthsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    monthExpenses = monthExpenses.toFixed(2);\n    if (settings[0].monthlyBudget.length) {\n        answer = answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your monthly budget is ${settings[0].monthlyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\n//==================================INCOMES===============================\n\nconst todaysIncomes = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysIncomes = todaysIncomes.toFixed(2);\n    return answer.replace('{DAY_INCOME}', todaysIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst yearsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    yearIncomes = yearIncomes.toFixed(2);\n    return answer.replace('{YEAR_INCOME}', yearIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    weekIncomes = weekIncomes.toFixed(2);\n    return answer.replace('{WEEK_INCOME}', weekIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst monthsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    monthIncomes = monthIncomes.toFixed(2);\n    return answer.replace('{MONTH_INCOME}', monthIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\n//==================================RECOMENDATION===============================\n\nconst recomentdationForCategories = (answer, settings, allExpenses) => {\n    let groupedExpenses = [];\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            let found = false;\n            groupedExpenses.forEach(group => {\n                if (group.groupName === expense.group) {\n                    found = true;\n                    group.amount += parseFloat(expense.price);\n                }\n            });\n            if (!found) {\n                groupedExpenses.push({\n                    groupName: expense.group,\n                    amount: parseFloat(expense.price)\n                });\n            }  \n        }\n    });\n\n    groupedExpenses.forEach(expense => {\n        expense.amount = expense.amount.toFixed(2);\n    });\n\n    groupedExpenses = groupedExpenses.sort((a, b) => parseFloat(b.amount) - parseFloat(a.amount) );\n    let answerString = '';\n    groupedExpenses.forEach((expense, i) => {\n        if (groupedExpenses.length === i+1) {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}.`;\n        } else {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}; `;\n        }\n    });\n    if (answer.includes('{CATEGORY_NAME}')) {\n        return `${answer.replace('{CATEGORY_NAME}', groupedExpenses[0].groupName)} - ${groupedExpenses[0].amount} ${getCurrency(settings[0])}.`;\n    } else {\n        return answer.replace('{All_GROUPS}', answerString);\n    }\n};\n  \nconst getCurrency = settings => {\n    let currencyValue = settings.currency === 'GBD' ? '£' : settings.currency === 'Dollar' ? '$' : '€';\n    return currencyValue;\n};","import React, { useEffect, useState, useContext, Fragment } from \"react\";\nimport ExpensesContext from '../../context/expenses-context';\nimport AuthContext from '../../context/auth-context';\nimport { Widget, addResponseMessage, toggleMsgLoader, dropMessages } from 'react-chat-widget';\nimport './ChatBot.css';\nimport logo from '../../pig-face.png';\nimport { getAnswer } from './chatBotLogick';\n\n\nconst CustomChatbot = () => {\n    const { settingsForBot, allExpensesForBot, user} = useContext(ExpensesContext);\n    let currentUser = AuthContext._currentValue;\n\n    useEffect(() => {\n        if (currentUser.token) {\n            dropMessages();\n            handleNewUserMessage('Hello');\n        }\n    }, [currentUser.token]);\n\n    const handleNewUserMessage = (newMessage) => {\n        toggleMsgLoader();\n        let message = { userMessage: newMessage };\n\n        fetch('/watson', {\n            method: 'POST',\n            body: JSON.stringify(message),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n                toggleMsgLoader();\n                data.response.forEach(response => {\n                    let answer = getAnswer(response.text, settingsForBot, allExpensesForBot, user);\n                    addResponseMessage(answer);\n                });\n            })\n            .catch(err => {\n                toggleMsgLoader();\n                console.log(err);\n            });\n    };\n\n    return (\n        <Fragment>\n            {currentUser.token ? < Widget\n                handleNewUserMessage={handleNewUserMessage}\n                title=\"Budget Buddy\"\n                subtitle=\"\"\n                profileAvatar={logo}\n            /> : null\n            }\n        </Fragment>\n    );\n};\n\nexport { CustomChatbot as default };","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport AuthContext from '../context/auth-context';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport ChatBot from '../components/chatBot/ChatBot';\nimport './Expenses.css';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n    let [settings, setSettings] = useState([]);\n    let [settingsForBot, setSettingsForBot] = useState([]);\n    let [allExpensesForBot, setAllExpensesForBot] = useState([]);\n    let [user, setUser] = useState({});\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorId\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(resData.data);\n                setSettings(...settings, resData.data.settingsData);\n                return resData.data.settingsData;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                let newArrayForBot = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n                setAllExpensesForBot(newArrayForBot);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                    setAllExpensesForBot([...allExpensesForBot, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                    setAllExpensesForBot([...allExpensesForBot,  res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpenseFromImport = fields => {\n        let requestBody = {\n            query: ''\n        };\n        let time = convertTimeToMs(fields.createdAt);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data.createExpense) {\n                    res.data.createExpense.tag = 'Expense';\n                    return res.data.createExpense;\n                } else {\n                    res.data.createIncome.tag = 'Income';\n                    return res.data.createIncome;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                let updatedAllListForBot = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setAllExpensesForBot(updatedAllListForBot);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const getUserData = () => {\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async (values) => {\n        if (values == undefined || values === 'All') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            let incomes = await getIncomeList(allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n            if (!allExpensesForBot.length) {\n                let user = await getUserData();\n                setAllExpensesForBot(all);\n                setSettingsForBot(allSettings);\n                setUser(user);\n            }\n        } else if (values === 'Expense') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await getIncomeList(allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n\n    const getAllOnFilter = async values => {\n        let allUsers = [];\n        if (values.tag === 'All') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            let incomes = await onFilterIncomes(values, allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n        } else if (values.tag === 'Expense') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await onFilterIncomes(values, allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore, submitExpenseFromImport, settings, settingsForBot, allExpensesForBot, user, updateExpense}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal }}>\n                <Filter />\n                <Fragment>\n                    {user._id? <ChatBot />:null}\n                </Fragment>\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport moment from 'moment';\nimport ModalContext from '../context/modal-context';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport { FiUser, FiSettings } from \"react-icons/fi\";\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport './Settings.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Settings = () => {\n    let [err, setErr] = useState({\n        newCategorie: false,\n        newMember: false,\n        emailValidation: false\n    });\n    let [categories, setCategories] = useState([]);\n    let [members, setMembers] = useState([]);\n    let currentUser = AuthContext._currentValue;\n    let [userData, setUserData] = useState({});\n    let [editableUserData, setEditableUserData] = useState({});\n    let [settingsData, setSettingsData] = useState({});\n    let [isLoading, setIsLoading] = useState(false);\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const [key, setKey] = useState('systemSettings');\n\n    useEffect(() => {\n        getUserData();\n        getSettingsData();\n    }, []);\n\n    const getUserData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setUserData(resData.data.userData[0]);\n                setEditableUserData(resData.data.userData[0]);\n                setIsLoading(false);\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateUser = (fields) => {\n        fields.updatedAt = JSON.stringify(moment(new Date()).valueOf());\n\n        setIsLoading(true);\n        let requestBody = {\n            query: `\n\n                              mutation UpdateUser($id: ID!, $name: String!, $surname: String!, $email: String!, $updatedAt: String!) {\n                                updateUser(userId: $id, name: $name, surname: $surname, email: $email, updatedAt: $updatedAt) {\n                                    name\n                                    surname\n                                    email\n                                  }\n                              }\n                            `,\n            variables: {\n                id: userData._id,\n                name: fields.firstName,\n                surname: fields.lastName,\n                email: fields.email,\n                updatedAt: fields.updatedAt\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                console.log(res);\n                setEditableUserData(res.data.updateUser);\n                modalInfo(true, 'Confirmation', 'User was updated');\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                let membersList = [];\n                setSettingsData(resData.data.settingsData[0]);\n                setCategories(resData.data.settingsData[0].categories.split(';'));\n                resData.data.settingsData[0].members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateSettings = (fields) => {\n        setIsLoading(true);\n        let allMemebers = '';\n        let allCategories = '';\n\n        categories.forEach((category, i) => {\n            if (categories.length != i + 1) {\n                allCategories += `${category};`;\n            } else {\n                allCategories += category;\n            }\n        });\n        if (members.length) {\n            members.forEach((member, i) => {\n                if (members.length != i + 1) {\n                    allMemebers += `${member};`;\n                } else {\n                    allMemebers += member;\n                }\n            });\n        }\n\n        let requestBody = {\n            query: `\n\n                              mutation UpdateSettings($id: ID!, $dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $categories: String!, $members: String!, $currency: String!) {\n                                updateSettings(settingsId: $id, dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, categories: $categories, members: $members, currency: $currency) {\n                                    _id\n                                    dailyBudget\n                                    weeklyBudget\n                                    monthlyBudget\n                                    categories\n                                    members\n                                    currency\n                                  }\n                              }\n                            `,\n            variables: {\n                id: settingsData._id,\n                dailyBudget: fields.dailyBudget,\n                weeklyBudget: fields.weeklyBudget,\n                monthlyBudget: fields.monthlyBudget,\n                categories: allCategories,\n                members: allMemebers,\n                currency: fields.currency\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let membersList = [];\n                setSettingsData(res.data.updateSettings);\n                setCategories(res.data.updateSettings.categories.split(';'));\n                res.data.updateSettings.members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n                setIsLoading(false);\n                modalInfo(true, 'Confirmation', 'Settings was updated');\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const validatePrice = (event) => {\n        let price = event.target.value;\n        if (price.length === 1 && price === '.') {\n            price = price.slice(0, -1);\n        }\n        if (price.length === 2 && price === '00') {\n            price = price.slice(0, -1);\n        }\n        if (price.split('.').length - 1 > 1) {\n            price = price.slice(0, -1);\n        }\n        price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n        return price.replace(/[^\\d.-]/g, '').replace('-', '');\n    };\n\n    const addCategory = (event, oldCategory) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newCategorie: true });\n            return oldCategory;\n        } else {\n            event.target.value = event.target.value.toLowerCase();\n            let newCategory = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n            let found = false;\n            categories.forEach(category => {\n                if (category === newCategory) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This category already in the category list.');\n            } else {\n                setCategories([...categories, newCategory]);\n            }\n        }\n    };\n\n    const removeCategory = category => {\n        if (categories.length === 1) {\n            modalInfo(true, 'Error', 'You can\\'t delete all categories.');\n        } else {\n            setCategories(categories.filter(item => item !== category));\n        }\n    };\n\n    const clearCategory = event => {\n        return '';\n    };\n\n    const emitChangesToCategory = event => {\n        if (err.newCategorie) {\n            setErr({ ...err, newCategorie: false });\n        }\n        return event.target.value.replace(/[//|/;&$%@\"<>()+{}.',=_~`!#^*/?]/g, '');\n    };\n\n    const addMember = (event, oldMember, error) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newMember: true, emailValidation: false });\n            return oldMember;\n        } else if (error.newMember) {\n            setErr({ ...err, emailValidation: true });\n        } else {\n            let newMember = event.target.value.toLowerCase();\n            let found = false;\n            members.forEach(member => {\n                if (member === newMember) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This member already in the members list.');\n            } else {\n                setMembers([...members, newMember]);\n            }\n        }\n    };\n\n    const removeMember = member => {\n        setMembers(members.filter(item => item !== member));\n    };\n\n    const clearMember = event => {\n        return '';\n    };\n\n    const emitChangesToMember = event => {\n        if (err.emailValidation) {\n            setErr({ ...err, emailValidation: false });\n        }\n        if (err.newMember) {\n            setErr({ ...err, newMember: false });\n        }\n        return event.target.value.replace(/[//|/;&$%\"<>()+{}',=~`!#^*/?]/g, '');\n    };\n\n    return (\n        isLoading ? <Spinner /> :\n            <Fragment>\n                <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                    <InfoModal />\n                    <Tabs id=\"settings-tab\" activeKey={key} onSelect={k => setKey(k)}>\n                        <Tab eventKey=\"userSettings\" title={key === 'userSettings' ? <span style={{ color: '#ea97c4' }}><FiUser size={20} />&nbsp; User </span> :\n                            <span><FiUser size={20} color={'#aeaeae'} />&nbsp; User </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    firstName: editableUserData.name || '',\n                                    lastName: editableUserData.surname || '',\n                                    email: editableUserData.email || '',\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    firstName: Yup.string()\n                                        .required('First Name is required'),\n                                    lastName: Yup.string()\n                                        .required('Last Name is required'),\n                                    email: Yup.string()\n                                        .email('Email is invalid')\n                                        .required('Email is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateUser(fields);\n                                }}\n                                render={({ errors, touched }) => (\n                                    <Form className=\"settings-form\" id=\"formContentUserSettings\">\n                                        <div className=\"p-2\">\n                                            <h4>User settings</h4>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                        <Tab eventKey=\"systemSettings\" title={key === 'systemSettings' ? <span style={{ color: '#ea97c4' }}><FiSettings size={20} />&nbsp; System </span> :\n                            <span><FiSettings size={20} color={'#aeaeae'} />&nbsp; System </span>}>\n                            <Formik\n                                validateOnChange\n                                enableReinitialize={true}\n                                initialValues={{\n                                    dailyBudget: settingsData.dailyBudget || '',\n                                    weeklyBudget: settingsData.weeklyBudget || '',\n                                    monthlyBudget: settingsData.monthlyBudget || '',\n                                    categories: settingsData.categories || '',\n                                    newCategorie: '',\n                                    newMember: '',\n                                    members: settingsData.members || '',\n                                    currency: settingsData.currency || ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    dailyBudget: Yup.number(),\n                                    weeklyBudget: Yup.number(),\n                                    monthlyBudget: Yup.number(),\n                                    categories: Yup.string(),\n                                    newCategorie: Yup.string(),\n                                    memebers: Yup.string()\n                                        .email('Email is invalid'),\n                                    newMember: Yup.string()\n                                        .email('Email is invalid'),\n                                    currency: Yup.string()\n                                        .required('Currency is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateSettings(fields);\n                                }}\n                                render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, validateField }) => (\n                                    <Form id=\"formContentSystemSettings\">\n                                        <div className=\"form-group row col-sm-12\" style={{ paddingTop: '25px' }}>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Budget settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Daily budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group \">\n                                                            <input placeholder=\"0.00\" name=\"dailyBudget\" onChange={e => { setFieldValue('dailyBudget', validatePrice(e)); }} value={values.dailyBudget} className={'form-control' + (errors.dailyBudget && touched.dailyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"dailyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Weekly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"weeklyBudget\" onChange={e => { setFieldValue('weeklyBudget', validatePrice(e)); }} value={values.weeklyBudget} className={'form-control' + (errors.weeklyBudget && touched.weeklyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"weeklyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Monthly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"monthlyBudget\" onChange={e => { setFieldValue('monthlyBudget', validatePrice(e)); }} value={values.monthlyBudget} className={'form-control' + (errors.monthlyBudget && touched.monthlyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"monthlyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Currency</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <select name=\"currency\" onChange={handleChange}\n                                                            onBlur={handleBlur} value={values.currency} className={'custom-select mr-sm-2 form-control' + (errors.currency && touched.currency ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                                            <option value=\"\">Select a currency</option>\n                                                            <option value=\"Euro\">Euro &euro;</option>\n                                                            <option value=\"Dollar\">Dollar $</option>\n                                                            <option value=\"GBD\">Pound &pound;</option>\n                                                        </select>\n                                                        <ErrorMessage name=\"currency\" component=\"div\" className=\"invalid-feedback\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Categories settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add category</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Category name\" name=\"newCategorie\" onChange={e => { setFieldValue('newCategorie', emitChangesToCategory(e)); }} value={values.newCategorie} className={'form-control col-sm-8 mr-1' + (err.newCategorie ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => { setFieldValue('categories', addCategory(e, values.categories)); setFieldValue('newCategorie', clearCategory(e)); }} value={values.newCategorie} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newCategorie\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newCategorie ? <div className=\"invalid-feedback\"> Category field can't be empty</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">All categories</label>\n                                                    <div className=\"col-sm-8\">\n                                                        <ul className=\"list-group col-sm-9\">\n                                                            {\n                                                                categories.map((category) => (\n                                                                    <li className='row' key={category}>\n                                                                        <span className='list-group-item list-item col-sm-12'>{category}\n                                                                            <button className='btn card_removeButton' type='button' onClick={() => removeCategory(category)}>\n                                                                                <i><FaRegTimesCircle size={20} /></i>\n                                                                            </button>\n                                                                        </span>\n                                                                    </li>\n                                                                ))\n                                                            }\n                                                        </ul>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Family settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add member</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Member email\" name=\"newMember\" onChange={e => { setFieldValue('newMember', emitChangesToMember(e)); }} value={values.newMember} className={'form-control col-sm-8 mr-1' + (err.newMember || err.emailValidation ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => {  setFieldValue('members', addMember(e, values.members, errors)); setFieldValue('newMember', clearMember(e)); }} value={values.newMember} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newMember\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newMember ? <div className=\"invalid-feedback\"> Member field can't be empty</div> : null}\n                                                            {err.emailValidation ? <div className=\"invalid-feedback\">Email is invalid</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n                                                {\n                                                    members.length ? <div className=\"form-group row\">\n                                                        <label className=\"col-sm-4\" htmlFor=\"title\">All members</label>\n                                                        <div className=\"col-sm-8\">\n                                                            <ul className=\"list-group col-sm-9\">\n                                                                {\n                                                                    members.map((member) => (\n                                                                        <li className='row' key={member}>\n                                                                            <span className='list-group-item list-item col-sm-12'>{member}\n                                                                                <button className='btn card_removeButton' type='button' onClick={() => removeMember(member)}>\n                                                                                    <i><FaRegTimesCircle size={20} /></i>\n                                                                                </button>\n                                                                            </span>\n                                                                        </li>\n                                                                    ))\n                                                                }\n                                                            </ul>\n                                                        </div>\n                                                    </div> : null\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                    </Tabs>\n                </ModalContext.Provider>\n            </Fragment>\n    );\n};\n\nexport { Settings as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport Settings from './pages/Settings';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    fetch('/removeCookie', {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n      .then(data => {\n        console.log(data.response.message);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <BrowserRouter>\n          <Fragment>\n            <AuthContext.Provider\n              value={{\n                token: this.state.token,\n                userId: this.state.userId,\n                login: this.login,\n                logout: this.logout\n              }}\n            >\n              <MainNavigation />\n              <main className=\"main-content\">\n                <Switch>\n                  {!this.state.token && (\n                    <Route path=\"/auth\" component={AuthPage} />\n                  )}\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                    <Route path=\"/expenses\" component={Expenses} />\n                  )}\n                  {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                  {this.state.token && (\n                    <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                  )}\n                  {this.state.token && (\n                    <Route path=\"/settings\" component={Settings} />\n                  )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n                </Switch>\n              </main>\n            </AuthContext.Provider>\n          </Fragment>\n        </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}