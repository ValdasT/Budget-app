{"version":3,"sources":["pig-face.png","components/Backdrop/Backdrop.js","components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/UploadToMng/UploadFile.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","components/chatBot/chatBotLogick.js","components/chatBot/ChatBot.js","pages/Expenses.js","pages/Settings.js","pages/Statistics.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","backdrop","react_default","a","createElement","className","spinner","react","Backdrop_Backdrop","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","createSettings","args","values","requestBody","query","variables","dailyBudget","weeklyBudget","monthlyBudget","members","categories","currency","creatorEmail","creatorsEmail","body","JSON","stringify","ok","statusText","message","concat","Provider","value","auth_context","time","Date","getTime","surname","createdAt","updatedAt","createUser","_id","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","UploadFile","allFiles","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","_useState11","_useState12","onDrop","useCallback","acceptedFiles","length","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","size","role","map","file","key","substring","bytes","toFixed","newFileList","e","push","removeFile","index_esm","assign","files","FormData","append","Error","resData","uploadFileToDb","fileName","axios","url","responseType","FileSaver","saveAs","error","downloadFileFromDb","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","setting","submitExpense","showModal","setShowModal","expense","onUpdate","currencyValue","categoriesList","split","forEach","createCategoryList","selectedDate","setSelectedDate","tag","title","description","group","price","date","updateDate","_ref2","handleChange","setFieldValue","handleBlur","onChange","onBlur","category","event","target","slice","indexOf","substr","replace","validatePrice","style","fontSize","react_datepicker_min_default","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","fa_index_esm","actionFunction","Expense","currentUser","_currentValue","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","creatorId","disabled","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","settings","md_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","filter","dateFrom","dateTo","startOf","endOf","_d","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","maxValue","setMaxValue","minValue","setminValue","minAndMax","first","allData","totals","expenses","incomes","parseFloat","Expenses","Incomes","Budget","Math","apply","max","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","domain","allowDataOverflow","ImportModal","submitExpenseFromImport","setAllExpenses","csvToJson","csv","Papa","parse","complete","results","createNewCards","asyncToGenerator","regenerator_default","mark","_callee2","fromFile","formatedArray","preparedToDb","newFromDb","wrap","_context2","prev","next","searchFields","sent","j","toLowerCase","element","i","_callee","_context","t0","t1","call","stop","_x2","this","arguments","_x","fieldsArray","Promise","rej","numbers","missingFields","found","field","toLocaleLowerCase","createErrMsg","cursor","color","extension","reader","FileReader","onload","bstr","result","wb","XLSX","read","cellDates","dateNF","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","raw","readAsBinaryString","convertToCSV","todaysExpenses","answer","today","getCurrency","yearsExpenses","yearExpenses","weeksExpenses","weekExpenses","monthsExpenses","monthExpenses","todaysIncomes","yearsIncomes","yearIncomes","weeksIncomes","weekIncomes","monthsIncomes","monthIncomes","recomentdationForCategories","groupedExpenses","groupName","amount","sort","b","answerString","includes","CustomChatbot","settingsForBot","allExpensesForBot","user","dropMessages","handleNewUserMessage","newMessage","toggleMsgLoader","userMessage","getAnswer","addResponseMessage","react_chat_widget_lib","subtitle","profileAvatar","logo","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","setSettings","_useState19","_useState20","setSettingsForBot","_useState21","_useState22","setAllExpensesForBot","_useState23","_useState24","setUser","getSettingsData","Authorization","toConsumableArray","settingsData","getExpenseList","users","allUsers","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","allSettings","all","_user","_allSettings","_allUsers","_expenses","_allSettings2","_allUsers2","_incomes","undefined","userData","_expenses2","_incomes2","newArrayForBot","removeIncome","createExpense","createIncome","updatedAllList","updatedAllListForBot","updateIncome","components_Filter_Filter","ChatBot_CustomChatbot","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","Settings","newCategorie","newMember","emailValidation","setErr","setCategories","setMembers","setUserData","editableUserData","setEditableUserData","setSettingsData","setKey","getUserData","membersList","Tabs","activeKey","onSelect","k","Tab","eventKey","enableReinitialize","updateUser","validateOnChange","memebers","allMemebers","allCategories","member","updateSettings","validateField","paddingTop","objectSpread","oldCategory","newCategory","charAt","toUpperCase","addCategory","item","removeCategory","oldMember","addMember","removeMember","Statistics","mainNavigation","Consumer","context","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","state","_this","setState","react_apollo_esm","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","Redirect","exact","from","Component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.94a1afa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pig-face.96b2c961.png\";","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React, { Fragment} from 'react';\nimport BackDrop from '../Backdrop/Backdrop';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <Fragment>\n        <BackDrop />\n        <div className=\"cssload-loader\">\n            <div className=\"cssload-inner cssload-one\"></div>\n            <div className=\"cssload-inner cssload-two\"></div>\n            <div className=\"cssload-inner cssload-three\"></div>\n        </div>\n    </Fragment>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.data.login) {\n                    setIsLoading(false);\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    let args = {\n                        userId: res.data.createUser._id,\n                        creatorsEmail: res.data.createUser.email\n                    };\n                    createSettings(args, values);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    const createSettings = (args, values) => {\n        let requestBody = {\n            query: `\n            mutation CreateSettings($dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $members: String!, $categories: String!,  $currency: String!, $userId: String!, $creatorEmail: String! ) {\n                createSettings(settingsInput:{dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, members:$members, categories:$categories,currency:$currency, userId: $userId, creatorEmail: $creatorEmail}) {\n                    _id\n                   \n                  }\n              }\n      `,\n            variables: {\n                dailyBudget: '',\n                weeklyBudget: '',\n                monthlyBudget: '',\n                members: '',\n                categories: '',\n                currency: '',\n                userId: args.userId,\n                creatorEmail: args.creatorsEmail\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data) {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                    setIsLoading(false);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    }; \n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React, { useState, useCallback, Fragment } from 'react';\nimport Spinner from '../Spinner/Spinner';\nimport InfoModal from '../Modal/Modal';\nimport ModalContext from '../../context/modal-context';\nimport { useDropzone } from 'react-dropzone';\nimport { FiUpload } from \"react-icons/fi\";\nimport { FiDelete } from \"react-icons/fi\";\nimport FileSaver from 'file-saver';\nimport axios from 'axios';\n\nimport './UploadFile.css';\n\nconst UploadFile = () => {\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showInfoModal, setShowInfoModal] = useState(false);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const uploadFileToDb = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            let data = new FormData()\n            data.append('file', files[0])\n            setUploadingFiles(true);\n            fetch('/upload', {\n                method: 'POST',\n                body: data,\n            })\n                .then(res => {\n                    console.log(res);\n                    setUploadingFiles(false);\n                    if (res.status !== 200 && res.status !== 201) {\n                        throw new Error('Failed!');\n                    }\n                    return res;\n                })\n                .then(resData => {\n                    setAllFiles([]);\n                    modalInfo(true, 'Succsess', 'File was uploaded to db.');\n                    setUploadingFiles(false);\n                })\n                .catch(err => {\n                    setUploadingFiles(false);\n                    modalInfo(true, 'Error', err);\n                    console.log(err);\n                });\n        }\n    };\n\n    const downloadFileFromDb = () => {\n        let fileName = '7c6ee306971e226ac39f2b5ffc53d192.png';\n\n        axios({\n            method: \"GET\",\n            url: `/file/${fileName}`,\n            responseType: \"blob\",\n        })\n            .then(response => {\n                console.log(response);\n                FileSaver.saveAs(response.data, fileName);\n            })\n            .then(() => {\n                console.log(\"Completed\");\n            }).catch(error => {\n                console.log(error)\n            });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, image/png, image/jpeg, application/pdf',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <InfoModal />\n                            <div className=\"container h-100\">\n                                <div className=\"row h-100 justify-content-center\">\n                                    <div className='dropBox'>\n                                        {\n                                            showWarning ?\n                                                <div className=\"alert alert-danger\" role=\"alert\">\n                                                    Please select a file first!\n                                        </div> : null\n                                        }\n                                        <div >\n                                            <ul>\n                                                {\n                                                    allFiles.map((file) => (\n                                                        <li className='text-left' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                            <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                                <i><FiDelete size={20} /></i>\n                                                            </button>\n                                                        </li>\n                                                    ))\n                                                }\n                                            </ul>\n                                            <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                                <input {...getInputProps()} />\n                                                {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                                {isDragActive && !isDragReject && \"Drop it here!\"}\n                                                {isDragReject && \"File type not accepted, sorry!\"}\n                                                {isFileTooLarge && (\n                                                    <div className=\"text-danger mt-2\">\n                                                        File is too large.\n                                            </div>\n                                                )}\n                                            </div>\n                                        </div>\n                                        <button className=\"btn btn_main button_Upload\" onClick={() => { uploadFileToDb(allFiles) }}> Upload</button>\n                                        <button className=\"btn btn_main button_Upload\" onClick={() => { downloadFileFromDb() }}> Download</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </Fragment> : <Spinner />\n                }\n            </ModalContext.Provider>\n        </Fragment>\n    );\n};\n\nexport default UploadFile;","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst createCategoryList = setting => {\n    let categoriesList = [];\n    setting.categories.split(';').forEach(e => {\n        if (e.length) {\n            categoriesList.push(e);\n        }\n    });\n    return categoriesList;\n};\n\nconst AddExpenseModal = ({ setting}) => {\n    const { submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';  \n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    let [categories, setCategories] = useState(createCategoryList(setting));\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            {\n                                                categories.map((category) => (\n                                                    <option key={category} value={category}>{category}</option>\n                                                ))\n                                            }\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div style={{ fontSize: '15px' }} className=\"input-group-text\">{currencyValue}</div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport AuthContext from '../../../../context/auth-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense, setting }) => {\n\n    let currentUser = AuthContext._currentValue;\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';                                                           \n    \n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore} = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal setting={setting} />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Creator: {setting.creatorEmail}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag === 'Expense' ? <div className='card_price_expense'>-{expense.price} {currencyValue} </div> : <div className='card_price_income'>{expense.price} {currencyValue} </div>}\n                {\n                    currentUser.userId === setting.creatorId ?\n                        <Fragment>\n                            <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment> :\n                        <Fragment>\n                            <button className='btn card_removeButton disabled' disabled onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton disabled' disabled onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment>\n                }\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <span className=\"card_first card\">\n            <Fragment>\n                <InfoModal />\n                <div className='row d-flex align-self-center'>\n                    <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                        <i><FiPlus size={30} /></i>\n                    </button>\n                    <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                        <i><FiUpload size={25} /></i>\n                    </button>\n                    {allExpenses.length ? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                        {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                    </button> : null}\n                </div>\n                {showModal && (\n                    <Fragment>\n                        <AddExpenseModal setting={settings[0]} />\n                    </Fragment>\n                )}\n            </Fragment>\n        </span>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    settings.map((setting) => (\n                        expense.creatorId === setting.creatorId? <Expense className='expenses_list' key={expense._id} expense={expense} setting={setting} />: null\n                    ))\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = (filter, values) => {\n        let date = {\n            dateFrom: '',\n            dateTo: '',\n            tag: values\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll(date.tag);\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY'),\n                tag: values\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo: toTime,\n                    tag: 'All'\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required'),\n                    tag: Yup.string()\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue, handleChange, handleBlur }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                            <button type='button' className=\" col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('today', values.tag);\n                                setFieldValue('dateFrom', moment().format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().format('MM/DD/YYYY'));\n                                setStartDate(moment()._d);\n                                setEndDate(moment()._d);\n                            }}>Today</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('week', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('week').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('week').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('week')._d);\n                                setEndDate(moment().endOf('week')._d);\n                            }}>This week</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('month', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('month').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('month').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('month')._d);\n                                setEndDate(moment().endOf('month')._d);\n                            }}>This month</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => {\n                                fastFilter('year', values.tag);\n                                setFieldValue('dateFrom', moment().startOf('year').format('MM/DD/YYYY'));\n                                setFieldValue('dateTo', moment().endOf('year').format('MM/DD/YYYY'));\n                                setStartDate(moment().startOf('year')._d);\n                                setEndDate(moment().endOf('year')._d);\n                            }}>This year</button>\n                            <button type='button' className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all', values.tag)}>All</button>\n                        </div>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <div className=\"form-group row\">\n                                <label className=\" col-form-label\" htmlFor=\"title\">Type:</label>\n                                <div className=\"ml-3 mr-2\">\n                                    <select name=\"tag\" onChange={handleChange}\n                                        onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                        <option value=\"All\">All</option>\n                                        <option value=\"Expense\">Expenses</option>\n                                        <option value=\"Income\">Incomes</option>\n                                    </select>\n                                    <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                            </div>\n                            <label className=\" col-form-label ml-4\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2 ml-3 mr-3\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let [maxValue, setMaxValue] = useState('auto');\n    let [minValue, setminValue] = useState('auto');\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setMaxValue(minAndMax.biggest);\n        setminValue(minAndMax.smallest);\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minValue, maxValue]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport ExpensesContext from '../../context/expenses-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete, FiUpload } from \"react-icons/fi\";\nimport { FaFileExcel } from \"react-icons/fa\";\nimport FileSaver from 'file-saver';\nimport axios from 'axios';\n\nimport './Modal.css';\n\nconst ImportModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { submitExpenseFromImport, setAllExpenses } = useContext(ExpensesContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            let extension = files[0].name.split('.');\n            extension = extension[extension.length - 1].toLowerCase();\n            if (extension === 'csv') {\n                csvToJson(files[0]);\n            } else {\n                const reader = new FileReader();\n                reader.onload = function (e) {\n                    let bstr = e.target.result;\n                    let wb = XLSX.read(bstr, { type: 'binary', header: 1, cellDates: true, dateNF: 'DD/MM/YYYY' });\n                    let wsname = wb.SheetNames[0];\n                    let ws = wb.Sheets[wsname];\n                    let csv = XLSX.utils.sheet_to_csv(ws, { header: 1, raw: false });\n                    csvToJson(csv);\n                };\n                let binaryFile = reader.readAsBinaryString(files[0]); // it triger reader, don't delete\n            }\n        }\n    };\n\n    const csvToJson = csv => {\n        Papa.parse(csv, {\n            complete: function (results) {\n                createNewCards(results);\n            }\n        });\n    };\n\n    const createNewCards = async fromFile => {\n        let formatedArray = [{\n            title: '',\n            description: '',\n            price: '',\n            group: '',\n            createdAt: '',\n            tag: ''\n        }];\n        let preparedToDb = [];\n        let fields = await searchFields(fromFile.data[0]);\n        fields.forEach((fromFile, j) => {\n            if (fromFile.name.toLowerCase() === 'title') {\n                formatedArray[0].title = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'description') {\n                formatedArray[0].description = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'price') {\n                formatedArray[0].price = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'group') {\n                formatedArray[0].group = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'date') {\n                formatedArray[0].createdAt = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'type') {\n                formatedArray[0].tag = fields[j].id;\n            }\n        });\n        fromFile.data.forEach((element, i) => {\n            if (i !== 0 && element[0].length) {\n                preparedToDb.push({\n                    title: element[formatedArray[0].title],\n                    description: element[formatedArray[0].description],\n                    price: element[formatedArray[0].price],\n                    group: element[formatedArray[0].group],\n                    createdAt: element[formatedArray[0].createdAt],\n                    tag: element[formatedArray[0].tag]\n                });\n            }\n        });\n        let newFromDb = [];\n        preparedToDb.forEach(async e => {\n            newFromDb.push(await submitExpenseFromImport(e));\n            if (formatedArray.length === newFromDb.length) {\n                await setAllExpenses(newFromDb);\n                modalInfo(true, 'Confirmation', 'File was uploaded');\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            }\n        });\n    };\n\n    const searchFields = fieldsArray => {\n        return new Promise((res, rej) => {\n            let mandataryFields = ['Title', 'Price', 'Group', 'Date', 'Type', 'Description'];\n            let numbers = [];\n            let missingFields = [];\n            mandataryFields.forEach(name => {\n                let found = false;\n                fieldsArray.forEach((field, i) => {\n                    if (name.toLocaleLowerCase() === field.toLowerCase()) {\n                        found = true;\n                        numbers.push({\n                            name: name,\n                            id: i\n                        });\n                    }\n                });\n                if (!found) {\n                    missingFields.push(name);\n                }\n            });\n            if (missingFields.length) {\n                let createErrMsg = '';\n                missingFields.forEach((field, i) => {\n                    if (missingFields.length === i + 1) {\n                        createErrMsg += ` \"${field}\".`;\n                    } else {\n                        createErrMsg += ` \"${field}\";`;\n                    }\n                });\n                modalInfo(true, 'Error', `Inappropriate file. Missing fields in the file:${createErrMsg}`);\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            } else {\n                res(numbers);\n            }\n        });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const downloadFileFromDb = (name) => {\n        axios({\n            method: \"GET\",\n            url: `/file/${name}`,\n            responseType: \"blob\",\n        })\n            .then(response => {\n                console.log(response);\n                FileSaver.saveAs(response.data, `example.xlsx`);\n            })\n            .then(() => {\n                console.log(\"Completed\");\n            }).catch(error => {\n                console.log(error)\n            });\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        // accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                                <div className=\"mt-2\">\n                                    <a onClick={() => { downloadFileFromDb(`5df002023ee4ea3ba7a44370fd093668.xlsx`) }} style={{ cursor: 'pointer' }}>\n                                        <i><FaFileExcel size={20} color={\"grey\"} /></i> - Download template file.\n                                    </a>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default ImportModal;","import moment from 'moment';\n\nexport const getAnswer = (answer, settings, allExpenses, user) => {\n    // recomentdationForCategories(answer, settings, allExpenses);\n    if (answer.includes('{NAME}')) {\n        return answer.replace('{NAME}', user.name).replace('{SURNAME}', user.surname);\n    }\n    if (answer.includes('{DAY_EXPENSES}')) {\n        answer = todaysExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_EXPENSES}')) {\n        answer = yearsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_EXPENSES}')) {\n        answer = weeksExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_EXPENSES}')) {\n        answer = monthsExpenses(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{DAY_INCOME}')) {\n        answer = todaysIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{YEAR_INCOME}')) {\n        answer = yearsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{WEEK_INCOME}')) {\n        answer = weeksIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{MONTH_INCOME}')) {\n        answer = monthsIncomes(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{All_GROUPS}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    if (answer.includes('{CATEGORY_NAME}')) {\n        answer = recomentdationForCategories(answer, settings, allExpenses);\n        return answer;\n    }\n    return answer;\n};\n\n//==================================EXPENSES===============================\n\nconst todaysExpenses = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysExpenses = todaysExpenses.toFixed(2);\n    if (settings[0].dailyBudget.length) {\n        answer = answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your daily budget is ${settings[0].dailyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{DAY_EXPENSES}', todaysExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst yearsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    yearExpenses = yearExpenses.toFixed(2);\n    return answer.replace('{YEAR_EXPENSES}', yearExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    weekExpenses = weekExpenses.toFixed(2);\n    if (settings[0].weeklyBudget.length) {\n        answer = answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your weekly budget is ${settings[0].weeklyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{WEEK_EXPENSES}', weekExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\nconst monthsExpenses = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthExpenses = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthExpenses += parseFloat(expense.price);\n            }\n        }\n    });\n    monthExpenses = monthExpenses.toFixed(2);\n    if (settings[0].monthlyBudget.length) {\n        answer = answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n        return `${answer} and your monthly budget is ${settings[0].monthlyBudget} ${getCurrency(settings[0])}`;\n    } else {\n        return answer.replace('{MONTH_EXPENSES}', monthExpenses).replace('{CURRENCY}', getCurrency(settings[0]));\n    }\n};\n\n//==================================INCOMES===============================\n\nconst todaysIncomes = (answer, settings, allExpenses) => {\n    let today = moment().format('YYYY-MM-DD');\n    let todaysIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if (today === moment(expense.createdAt, 'x').format('YYYY-MM-DD')) {\n                todaysIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    todaysIncomes = todaysIncomes.toFixed(2);\n    return answer.replace('{DAY_INCOME}', todaysIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst yearsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('year').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('year').format('YYYY-MM-DD');\n    let yearIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                yearIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    yearIncomes = yearIncomes.toFixed(2);\n    return answer.replace('{YEAR_INCOME}', yearIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst weeksIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('week').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('week').format('YYYY-MM-DD');\n    let weekIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                weekIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    weekIncomes = weekIncomes.toFixed(2);\n    return answer.replace('{WEEK_INCOME}', weekIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\nconst monthsIncomes = (answer, settings, allExpenses) => {\n    let dateFrom = moment().startOf('month').format('YYYY-MM-DD');\n    let dateTo = moment().endOf('month').format('YYYY-MM-DD');\n    let monthIncomes = 0;\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Income') {\n            if ((dateFrom <= moment(expense.createdAt, 'x').format('YYYY-MM-DD')) && (dateTo >= moment(expense.createdAt, 'x').format('YYYY-MM-DD'))) {\n                monthIncomes += parseFloat(expense.price);\n            }\n        }\n    });\n    monthIncomes = monthIncomes.toFixed(2);\n    return answer.replace('{MONTH_INCOME}', monthIncomes).replace('{CURRENCY}', getCurrency(settings[0]));\n};\n\n//==================================RECOMENDATION===============================\n\nconst recomentdationForCategories = (answer, settings, allExpenses) => {\n    let groupedExpenses = [];\n    allExpenses.forEach(expense => {\n        if (expense.tag === 'Expense') {\n            let found = false;\n            groupedExpenses.forEach(group => {\n                if (group.groupName === expense.group) {\n                    found = true;\n                    group.amount += parseFloat(expense.price);\n                }\n            });\n            if (!found) {\n                groupedExpenses.push({\n                    groupName: expense.group,\n                    amount: parseFloat(expense.price)\n                });\n            }  \n        }\n    });\n\n    groupedExpenses.forEach(expense => {\n        expense.amount = expense.amount.toFixed(2);\n    });\n\n    groupedExpenses = groupedExpenses.sort((a, b) => parseFloat(b.amount) - parseFloat(a.amount) );\n    let answerString = '';\n    groupedExpenses.forEach((expense, i) => {\n        if (groupedExpenses.length === i+1) {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}.`;\n        } else {\n            answerString += `• ${expense.groupName} - ${expense.amount} ${getCurrency(settings[0])}; `;\n        }\n    });\n    if (answer.includes('{CATEGORY_NAME}')) {\n        return `${answer.replace('{CATEGORY_NAME}', groupedExpenses[0].groupName)} - ${groupedExpenses[0].amount} ${getCurrency(settings[0])}.`;\n    } else {\n        return answer.replace('{All_GROUPS}', answerString);\n    }\n};\n  \nconst getCurrency = settings => {\n    let currencyValue = settings.currency === 'GBD' ? '£' : settings.currency === 'Dollar' ? '$' : '€';\n    return currencyValue;\n};","import React, { useEffect, useContext, Fragment } from \"react\";\nimport ExpensesContext from '../../context/expenses-context';\nimport AuthContext from '../../context/auth-context';\nimport { Widget, addResponseMessage, toggleMsgLoader, dropMessages } from 'react-chat-widget';\nimport './ChatBot.css';\nimport logo from '../../pig-face.png';\nimport { getAnswer } from './chatBotLogick';\n\n\nconst CustomChatbot = () => {\n    const { settingsForBot, allExpensesForBot, user} = useContext(ExpensesContext);\n    let currentUser = AuthContext._currentValue;\n\n    useEffect(() => {\n        if (currentUser.token) {\n            dropMessages();\n            handleNewUserMessage('Hello');\n        }\n    }, [currentUser.token]);\n\n    const handleNewUserMessage = (newMessage) => {\n        toggleMsgLoader();\n        let message = { userMessage: newMessage };\n\n        fetch('/watson', {\n            method: 'POST',\n            body: JSON.stringify(message),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n                toggleMsgLoader();\n                data.response.forEach(response => {\n                    let answer = getAnswer(response.text, settingsForBot, allExpensesForBot, user);\n                    addResponseMessage(answer);\n                });\n            })\n            .catch(err => {\n                toggleMsgLoader();\n                console.log(err);\n            });\n    };\n\n    return (\n        <Fragment>\n            {currentUser.token ? < Widget\n                handleNewUserMessage={handleNewUserMessage}\n                title=\"Budget Buddy\"\n                subtitle=\"\"\n                profileAvatar={logo}\n            /> : null\n            }\n        </Fragment>\n    );\n};\n\nexport { CustomChatbot as default };","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport AuthContext from '../context/auth-context';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport ChatBot from '../components/chatBot/ChatBot';\nimport './Expenses.css';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n    let [settings, setSettings] = useState([]);\n    let [settingsForBot, setSettingsForBot] = useState([]);\n    let [allExpensesForBot, setAllExpensesForBot] = useState([]);\n    let [user, setUser] = useState({});\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorId\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(resData.data);\n                setSettings(...settings, resData.data.settingsData);\n                return resData.data.settingsData;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                let newArrayForBot = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome, allExpenses);\n                    newArrayForBot = updateArrayAfterRemove(res.data.removeIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n                setAllExpensesForBot(newArrayForBot);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                    setAllExpensesForBot([...allExpensesForBot, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                    setAllExpensesForBot([...allExpensesForBot,  res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpenseFromImport = fields => {\n        let requestBody = {\n            query: ''\n        };\n        let time = convertTimeToMs(fields.createdAt);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data.createExpense) {\n                    res.data.createExpense.tag = 'Expense';\n                    return res.data.createExpense;\n                } else {\n                    res.data.createIncome.tag = 'Income';\n                    return res.data.createIncome;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                let updatedAllListForBot = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateExpense, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome, allExpenses);\n                    updatedAllListForBot = updateArrayAfterUpdate(res.data.updateIncome, allExpensesForBot);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setAllExpensesForBot(updatedAllListForBot);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const getUserData = () => {\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = (updateElement, allExpenses) => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async (values) => {\n        if (values === undefined || values === 'All') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            let incomes = await getIncomeList(allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n            if (!allExpensesForBot.length) {\n                let user = await getUserData();\n                setAllExpensesForBot(all);\n                setSettingsForBot(allSettings);\n                setUser(user);\n            }\n        } else if (values === 'Expense') {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await getExpenseList(allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            let allSettings = [];\n            if (!settings.length) {\n                allSettings = await getSettingsData();\n            } else {\n                allSettings = settings;\n            }\n            let allUsers = [];\n            allSettings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await getIncomeList(allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n\n    const getAllOnFilter = async values => {\n        let allUsers = [];\n        if (values.tag === 'All') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            let incomes = await onFilterIncomes(values, allUsers);\n            let all = expenses.concat(incomes);\n            all = sortByDate(all);\n            setAllExpenses(all);\n        } else if (values.tag === 'Expense') {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let expenses = await onFilterExpenses(values, allUsers);\n            expenses = sortByDate(expenses);\n            setAllExpenses(expenses);\n        } else {\n            settings.forEach(setting => {\n                allUsers.push(setting.creatorId);\n            });\n            let incomes = await onFilterIncomes(values, allUsers);\n            incomes = sortByDate(incomes);\n            setAllExpenses(incomes);\n        }\n    };\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore, submitExpenseFromImport, settings, settingsForBot, allExpensesForBot, user, updateExpense}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal }}>\n                <Filter />\n                <Fragment>\n                    {user._id? <ChatBot />:null}\n                </Fragment>\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport moment from 'moment';\nimport ModalContext from '../context/modal-context';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport { FiUser, FiSettings } from \"react-icons/fi\";\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport './Settings.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Settings = () => {\n    let [err, setErr] = useState({\n        newCategorie: false,\n        newMember: false,\n        emailValidation: false\n    });\n    let [categories, setCategories] = useState([]);\n    let [members, setMembers] = useState([]);\n    let currentUser = AuthContext._currentValue;\n    let [userData, setUserData] = useState({});\n    let [editableUserData, setEditableUserData] = useState({});\n    let [settingsData, setSettingsData] = useState({});\n    let [isLoading, setIsLoading] = useState(false);\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const [key, setKey] = useState('systemSettings');\n\n    useEffect(() => {\n        getUserData();\n        getSettingsData();\n    }, []);\n\n    const getUserData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setUserData(resData.data.userData[0]);\n                setEditableUserData(resData.data.userData[0]);\n                setIsLoading(false);\n                return resData.data.userData[0];\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateUser = (fields) => {\n        fields.updatedAt = JSON.stringify(moment(new Date()).valueOf());\n\n        setIsLoading(true);\n        let requestBody = {\n            query: `\n\n                              mutation UpdateUser($id: ID!, $name: String!, $surname: String!, $email: String!, $updatedAt: String!) {\n                                updateUser(userId: $id, name: $name, surname: $surname, email: $email, updatedAt: $updatedAt) {\n                                    name\n                                    surname\n                                    email\n                                  }\n                              }\n                            `,\n            variables: {\n                id: userData._id,\n                name: fields.firstName,\n                surname: fields.lastName,\n                email: fields.email,\n                updatedAt: fields.updatedAt\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                console.log(res);\n                setEditableUserData(res.data.updateUser);\n                modalInfo(true, 'Confirmation', 'User was updated');\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                let membersList = [];\n                setSettingsData(resData.data.settingsData[0]);\n                setCategories(resData.data.settingsData[0].categories.split(';'));\n                resData.data.settingsData[0].members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateSettings = (fields) => {\n        setIsLoading(true);\n        let allMemebers = '';\n        let allCategories = '';\n\n        categories.forEach((category, i) => {\n            if (categories.length !== i + 1) {\n                allCategories += `${category};`;\n            } else {\n                allCategories += category;\n            }\n        });\n        if (members.length) {\n            members.forEach((member, i) => {\n                if (members.length !== i + 1) {\n                    allMemebers += `${member};`;\n                } else {\n                    allMemebers += member;\n                }\n            });\n        }\n\n        let requestBody = {\n            query: `\n\n                              mutation UpdateSettings($id: ID!, $dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $categories: String!, $members: String!, $currency: String!) {\n                                updateSettings(settingsId: $id, dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, categories: $categories, members: $members, currency: $currency) {\n                                    _id\n                                    dailyBudget\n                                    weeklyBudget\n                                    monthlyBudget\n                                    categories\n                                    members\n                                    currency\n                                  }\n                              }\n                            `,\n            variables: {\n                id: settingsData._id,\n                dailyBudget: fields.dailyBudget,\n                weeklyBudget: fields.weeklyBudget,\n                monthlyBudget: fields.monthlyBudget,\n                categories: allCategories,\n                members: allMemebers,\n                currency: fields.currency\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let membersList = [];\n                setSettingsData(res.data.updateSettings);\n                setCategories(res.data.updateSettings.categories.split(';'));\n                res.data.updateSettings.members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n                setIsLoading(false);\n                modalInfo(true, 'Confirmation', 'Settings was updated');\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const validatePrice = (event) => {\n        let price = event.target.value;\n        if (price.length === 1 && price === '.') {\n            price = price.slice(0, -1);\n        }\n        if (price.length === 2 && price === '00') {\n            price = price.slice(0, -1);\n        }\n        if (price.split('.').length - 1 > 1) {\n            price = price.slice(0, -1);\n        }\n        price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n        return price.replace(/[^\\d.-]/g, '').replace('-', '');\n    };\n\n    const addCategory = (event, oldCategory) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newCategorie: true });\n            return oldCategory;\n        } else {\n            event.target.value = event.target.value.toLowerCase();\n            let newCategory = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n            let found = false;\n            categories.forEach(category => {\n                if (category === newCategory) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This category already in the category list.');\n            } else {\n                setCategories([...categories, newCategory]);\n            }\n        }\n    };\n\n    const removeCategory = category => {\n        if (categories.length === 1) {\n            modalInfo(true, 'Error', 'You can\\'t delete all categories.');\n        } else {\n            setCategories(categories.filter(item => item !== category));\n        }\n    };\n\n    const clearCategory = event => {\n        return '';\n    };\n\n    const emitChangesToCategory = event => {\n        if (err.newCategorie) {\n            setErr({ ...err, newCategorie: false });\n        }\n        return event.target.value.replace(/[//|/;&$%@\"<>()+{}.',=_~`!#^*/?]/g, '');\n    };\n\n    const addMember = (event, oldMember, error) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newMember: true, emailValidation: false });\n            return oldMember;\n        } else if (error.newMember) {\n            setErr({ ...err, emailValidation: true });\n        } else {\n            let newMember = event.target.value.toLowerCase();\n            let found = false;\n            members.forEach(member => {\n                if (member === newMember) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This member already in the members list.');\n            } else {\n                setMembers([...members, newMember]);\n            }\n        }\n    };\n\n    const removeMember = member => {\n        setMembers(members.filter(item => item !== member));\n    };\n\n    const clearMember = event => {\n        return '';\n    };\n\n    const emitChangesToMember = event => {\n        if (err.emailValidation) {\n            setErr({ ...err, emailValidation: false });\n        }\n        if (err.newMember) {\n            setErr({ ...err, newMember: false });\n        }\n        return event.target.value.replace(/[//|/;&$%\"<>()+{}',=~`!#^*/?]/g, '');\n    };\n\n    return (\n        isLoading ? <Spinner /> :\n            <Fragment>\n                <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                    <InfoModal />\n                    <Tabs id=\"settings-tab\" activeKey={key} onSelect={k => setKey(k)}>\n                        <Tab eventKey=\"userSettings\" title={key === 'userSettings' ? <span style={{ color: '#ea97c4' }}><FiUser size={20} />&nbsp; User </span> :\n                            <span><FiUser size={20} color={'#aeaeae'} />&nbsp; User </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    firstName: editableUserData.name || '',\n                                    lastName: editableUserData.surname || '',\n                                    email: editableUserData.email || '',\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    firstName: Yup.string()\n                                        .required('First Name is required'),\n                                    lastName: Yup.string()\n                                        .required('Last Name is required'),\n                                    email: Yup.string()\n                                        .email('Email is invalid')\n                                        .required('Email is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateUser(fields);\n                                }}\n                                render={({ errors, touched }) => (\n                                    <Form className=\"settings-form\" id=\"formContentUserSettings\">\n                                        <div className=\"p-2\">\n                                            <h4>User settings</h4>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                        <Tab eventKey=\"systemSettings\" title={key === 'systemSettings' ? <span style={{ color: '#ea97c4' }}><FiSettings size={20} />&nbsp; System </span> :\n                            <span><FiSettings size={20} color={'#aeaeae'} />&nbsp; System </span>}>\n                            <Formik\n                                validateOnChange\n                                enableReinitialize={true}\n                                initialValues={{\n                                    dailyBudget: settingsData.dailyBudget || '',\n                                    weeklyBudget: settingsData.weeklyBudget || '',\n                                    monthlyBudget: settingsData.monthlyBudget || '',\n                                    categories: settingsData.categories || '',\n                                    newCategorie: '',\n                                    newMember: '',\n                                    members: settingsData.members || '',\n                                    currency: settingsData.currency || ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    dailyBudget: Yup.number(),\n                                    weeklyBudget: Yup.number(),\n                                    monthlyBudget: Yup.number(),\n                                    categories: Yup.string(),\n                                    newCategorie: Yup.string(),\n                                    memebers: Yup.string()\n                                        .email('Email is invalid'),\n                                    newMember: Yup.string()\n                                        .email('Email is invalid'),\n                                    currency: Yup.string()\n                                        .required('Currency is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateSettings(fields);\n                                }}\n                                render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, validateField }) => (\n                                    <Form id=\"formContentSystemSettings\">\n                                        <div className=\"form-group row col-sm-12\" style={{ paddingTop: '25px' }}>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Budget settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Daily budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group \">\n                                                            <input placeholder=\"0.00\" name=\"dailyBudget\" onChange={e => { setFieldValue('dailyBudget', validatePrice(e)); }} value={values.dailyBudget} className={'form-control' + (errors.dailyBudget && touched.dailyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"dailyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Weekly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"weeklyBudget\" onChange={e => { setFieldValue('weeklyBudget', validatePrice(e)); }} value={values.weeklyBudget} className={'form-control' + (errors.weeklyBudget && touched.weeklyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"weeklyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Monthly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"monthlyBudget\" onChange={e => { setFieldValue('monthlyBudget', validatePrice(e)); }} value={values.monthlyBudget} className={'form-control' + (errors.monthlyBudget && touched.monthlyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"monthlyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Currency</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <select name=\"currency\" onChange={handleChange}\n                                                            onBlur={handleBlur} value={values.currency} className={'custom-select mr-sm-2 form-control' + (errors.currency && touched.currency ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                                            <option value=\"\">Select a currency</option>\n                                                            <option value=\"Euro\">Euro &euro;</option>\n                                                            <option value=\"Dollar\">Dollar $</option>\n                                                            <option value=\"GBD\">Pound &pound;</option>\n                                                        </select>\n                                                        <ErrorMessage name=\"currency\" component=\"div\" className=\"invalid-feedback\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Categories settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add category</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Category name\" name=\"newCategorie\" onChange={e => { setFieldValue('newCategorie', emitChangesToCategory(e)); }} value={values.newCategorie} className={'form-control col-sm-8 mr-1' + (err.newCategorie ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => { setFieldValue('categories', addCategory(e, values.categories)); setFieldValue('newCategorie', clearCategory(e)); }} value={values.newCategorie} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newCategorie\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newCategorie ? <div className=\"invalid-feedback\"> Category field can't be empty</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">All categories</label>\n                                                    <div className=\"col-sm-8\">\n                                                        <ul className=\"list-group col-sm-9\">\n                                                            {\n                                                                categories.map((category) => (\n                                                                    <li className='row' key={category}>\n                                                                        <span className='list-group-item list-item col-sm-12'>{category}\n                                                                            <button className='btn card_removeButton' type='button' onClick={() => removeCategory(category)}>\n                                                                                <i><FaRegTimesCircle size={20} /></i>\n                                                                            </button>\n                                                                        </span>\n                                                                    </li>\n                                                                ))\n                                                            }\n                                                        </ul>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Family settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add member</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Member email\" name=\"newMember\" onChange={e => { setFieldValue('newMember', emitChangesToMember(e)); }} value={values.newMember} className={'form-control col-sm-8 mr-1' + (err.newMember || err.emailValidation ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => {  setFieldValue('members', addMember(e, values.members, errors)); setFieldValue('newMember', clearMember(e)); }} value={values.newMember} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newMember\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newMember ? <div className=\"invalid-feedback\"> Member field can't be empty</div> : null}\n                                                            {err.emailValidation ? <div className=\"invalid-feedback\">Email is invalid</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n                                                {\n                                                    members.length ? <div className=\"form-group row\">\n                                                        <label className=\"col-sm-4\" htmlFor=\"title\">All members</label>\n                                                        <div className=\"col-sm-8\">\n                                                            <ul className=\"list-group col-sm-9\">\n                                                                {\n                                                                    members.map((member) => (\n                                                                        <li className='row' key={member}>\n                                                                            <span className='list-group-item list-item col-sm-12'>{member}\n                                                                                <button className='btn card_removeButton' type='button' onClick={() => removeMember(member)}>\n                                                                                    <i><FaRegTimesCircle size={20} /></i>\n                                                                                </button>\n                                                                            </span>\n                                                                        </li>\n                                                                    ))\n                                                                }\n                                                            </ul>\n                                                        </div>\n                                                    </div> : null\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                    </Tabs>\n                </ModalContext.Provider>\n            </Fragment>\n    );\n};\n\nexport { Settings as default };\n","import React, { useEffect, useState, Fragment } from 'react';\n\nconst Statistics = () => {\n\n    return (\n        <p>Hello</p>\n    );\n};\n\nexport { Statistics as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport UploadFile from './components/UploadToMng/UploadFile';\n// import TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport Settings from './pages/Settings';\nimport Statistics from './pages/Statistics';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    fetch('/removeCookie', {\n      method: 'GET',\n      credentials: \"same-origin\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n      .then(data => {\n        console.log(data.response.message);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <BrowserRouter>\n          <Fragment>\n            <AuthContext.Provider\n              value={{\n                token: this.state.token,\n                userId: this.state.userId,\n                login: this.login,\n                logout: this.logout\n              }}\n            >\n              <MainNavigation />\n              <Switch>\n                <Route path=\"/uploadfiles\" component={UploadFile} />\n                {/* <Route path=\"/test\" component={TestPage} /> */}\n                {!this.state.token && (<Route path=\"/auth\" component={AuthPage} />)}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n                {this.state.token && (<Redirect from=\"/auth\" to=\"/expenses\" exact />)}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (<Route path=\"/expenses\" component={Expenses} />)}\n                {this.state.token && (<Route path=\"/settings\" component={Settings} />)}\n                {this.state.token && (<Route path=\"/statistics\" component={Statistics} />)}\n              </Switch>\n            </AuthContext.Provider>\n          </Fragment>\n        </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}