{"version":3,"sources":["components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","pages/Expenses.js","pages/Settings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["spinner","react_default","a","createElement","className","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","react","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","createSettings","args","values","requestBody","query","variables","dailyBudget","weeklyBudget","monthlyBudget","members","categories","currency","body","JSON","stringify","ok","statusText","message","concat","Provider","value","auth_context","time","Date","getTime","surname","createdAt","updatedAt","createUser","_id","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","deleteBookingHandler","bookingId","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","submitExpense","showModal","setShowModal","expense","onUpdate","selectedDate","setSelectedDate","tag","group","updateDate","handleChange","setFieldValue","handleBlur","onBlur","target","slice","split","indexOf","substr","replace","validatePrice","md_index_esm","size","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","index_esm","actionFunction","Expense","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","fi_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","dateFrom","dateTo","startOf","endOf","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","minAndMax","first","allData","totals","expenses","incomes","forEach","parseFloat","Expenses","toFixed","Incomes","Budget","apply","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","fontSize","domain","allowDataOverflow","ImportModal","submitExpenseFromImport","setAllExpenses","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","csvToJson","csv","Papa","parse","complete","results","createNewCards","asyncToGenerator","regenerator_default","mark","_callee2","fromFile","formatedArray","preparedToDb","newFromDb","wrap","_context2","next","searchFields","sent","j","toLowerCase","element","i","_ref2","_callee","_context","t0","t1","stop","_x2","arguments","_x","fieldsArray","Promise","rej","numbers","missingFields","found","field","toLocaleLowerCase","createErrMsg","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","role","file","substring","bytes","newFileList","removeFile","assign","files","extension","reader","FileReader","onload","bstr","result","wb","XLSX","read","cellDates","dateNF","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","raw","readAsBinaryString","convertToCSV","currentUser","_currentValue","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","getExpenseList","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","sort","b","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","all","removeIncome","updatedAllList","updateIncome","createExpense","createIncome","components_Filter_Filter","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","Settings","newCategorie","setErr","setCategories","userData","setUserData","editableUserData","setEditableUserData","settingsData","setSettingsData","_useState17","_useState18","_useState19","_useState20","setKey","getUserData","getSettingsData","Tabs","activeKey","onSelect","k","Tab","eventKey","color","enableReinitialize","updateUser","paddingTop","objectSpread","oldCategory","undefined","newCategory","charAt","toUpperCase","category","addCategory","item","removeCategory","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.ef203203.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"cssload-inner cssload-one\"></div>\n        <div className=\"cssload-inner cssload-two\"></div>\n        <div className=\"cssload-inner cssload-three\"></div>\n    </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.data.login) {\n                    setIsLoading(false);\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    let args = { userId: res.data.createUser._id };\n                    createSettings(args, values);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    const createSettings = (args, values) => {\n        let requestBody = {\n            query: `\n            mutation CreateSettings($dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $members: String!, $categories: String!,  $currency: String!, $userId: String! ) {\n                createSettings(settingsInput:{dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, members:$members, categories:$categories,currency:$currency, userId: $userId}) {\n                    _id\n                   \n                  }\n              }\n      `,\n            variables: {\n                dailyBudget: '',\n                weeklyBudget: '',\n                monthlyBudget: '',\n                members: '',\n                categories: '',\n                currency: '',\n                userId: args.userId,\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data) {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                    setIsLoading(false);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    }; \n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\nimport { MdEuroSymbol } from 'react-icons/md';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst AddExpenseModal = () => {\n    const {submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><MdEuroSymbol className=\"\" size={20} /></div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense }) => {\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n\n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore } = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag ==='Expense'? <div className='card_price_expense'>-{expense.price} € </div> : <div className='card_price_income'>{expense.price} € </div>}\n                <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                    <i><FaRegTimesCircle size={20} /></i>\n                </button>\n                <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                    <i><FaRegEdit size={20} /></i>\n                </button>\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses } = useContext(ExpensesContext);\n\n    return (\n        <ExpensesContext.Provider value={{ showMore }}>\n            <span className=\"card_first card\">\n                <Fragment>\n                    <InfoModal />\n                    <div className='row d-flex align-self-center'>\n                        <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                            <i><FiPlus size={30} /></i>\n                        </button>\n                        <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                            <i><FiUpload size={25} /></i>\n                        </button>\n                        {allExpenses.length? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                            {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                        </button> : null}\n                    </div>\n                    {showModal && (\n                        <Fragment>\n                            <AddExpenseModal />\n                        </Fragment>\n                    )}\n                </Fragment>\n            </span>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    <Expense className='expenses_list' key={expense._id} expense={expense} />\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = filter => {\n        let date = {\n            dateFrom: '',\n            dateTo: ''\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll();\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                <button className=\" col-sm-2 btn btn_with_line\" onClick={() => fastFilter('today')}>Today</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('week')}>This week</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('month')}>This month</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('year')}>This year</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all')}>All</button>\n            </div>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo:  toTime,\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required')\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <label className=\" col-form-label mr-3\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minAndMax.smallest, minAndMax.biggest]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport ExpensesContext from '../../context/expenses-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\nimport { FiUpload } from \"react-icons/fi\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete } from \"react-icons/fi\";\n\nimport './Modal.css';\n\nconst ImportModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { submitExpenseFromImport, setAllExpenses } = useContext(ExpensesContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            let extension = files[0].name.split('.');\n            extension = extension[extension.length - 1].toLowerCase();\n            if (extension === 'csv') {\n                csvToJson(files[0]);\n            } else {\n                const reader = new FileReader();\n                reader.onload = function (e) {\n                    let bstr = e.target.result;\n                    let wb = XLSX.read(bstr, { type: 'binary', header: 1, cellDates: true, dateNF: 'DD/MM/YYYY' });\n                    let wsname = wb.SheetNames[0];\n                    let ws = wb.Sheets[wsname];\n                    let csv = XLSX.utils.sheet_to_csv(ws, { header: 1, raw: false });\n                    csvToJson(csv);\n                };\n                let binaryFile = reader.readAsBinaryString(files[0]); // it triger reader, don't delete\n            }\n        }\n    };\n\n    const csvToJson = csv => {\n        Papa.parse(csv, {\n            complete: function (results) {\n                createNewCards(results);\n            }\n        });\n    };\n\n    const createNewCards = async fromFile => {\n        let formatedArray = [{\n            title: '',\n            description: '',\n            price: '',\n            group: '',\n            createdAt: '',\n            tag: ''\n        }];\n        let preparedToDb = [];\n        let fields = await searchFields(fromFile.data[0]);\n        fields.forEach((fromFile, j) => {\n            if (fromFile.name.toLowerCase() === 'title') {\n                formatedArray[0].title = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'description') {\n                formatedArray[0].description = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'price') {\n                formatedArray[0].price = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'group') {\n                formatedArray[0].group = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'date') {\n                formatedArray[0].createdAt = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'type') {\n                formatedArray[0].tag = fields[j].id;\n            }\n        });\n        fromFile.data.forEach((element, i) => {\n            if (i !== 0 && element[0].length) {\n                preparedToDb.push({\n                    title: element[formatedArray[0].title],\n                    description: element[formatedArray[0].description],\n                    price: element[formatedArray[0].price],\n                    group: element[formatedArray[0].group],\n                    createdAt: element[formatedArray[0].createdAt],\n                    tag: element[formatedArray[0].tag]\n                });\n            }\n        });\n        let newFromDb = [];\n        preparedToDb.forEach(async e => {\n            newFromDb.push(await submitExpenseFromImport(e));\n            if (formatedArray.length === newFromDb.length) {\n                await setAllExpenses(newFromDb);\n                modalInfo(true, 'Confirmation', 'File was uploaded');\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            }\n        });\n    };\n\n    const searchFields = fieldsArray => {\n        return new Promise((res, rej) => {\n            let mandataryFields = ['Title', 'Price', 'Group', 'Date', 'Type', 'Description'];\n            let numbers = [];\n            let missingFields = [];\n            mandataryFields.forEach(name => {\n                let found = false;\n                fieldsArray.forEach((field, i) => {\n                    if (name.toLocaleLowerCase() === field.toLowerCase()) {\n                        found = true;\n                        numbers.push({\n                            name: name,\n                            id: i\n                        });\n                    }\n                });\n                if (!found) {\n                    missingFields.push(name);\n                }\n            });\n            if (missingFields.length) {\n                let createErrMsg = '';\n                missingFields.forEach((field, i) => {\n                    if (missingFields.length === i + 1) {\n                        createErrMsg += ` \"${field}\".`;\n                    } else {\n                        createErrMsg += ` \"${field}\";`;\n                    }\n                });\n                modalInfo(true, 'Error', `Inappropriate file. Missing fields in the file:${createErrMsg}`);\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            } else {\n                res(numbers);\n            }\n        });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        // accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default ImportModal;","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport './Expenses.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            }\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            }\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpenseFromImport = fields => {\n        let requestBody = {\n            query: ''\n        };\n        let time = convertTimeToMs(fields.createdAt);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data.createExpense) {\n                    res.data.createExpense.tag = 'Expense';\n                    return res.data.createExpense;\n                } else {\n                    res.data.createIncome.tag = 'Income';\n                    return res.data.createIncome;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = updateElement => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = updateElement => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async () => {\n        let expenses = await getExpenseList();\n        let incomes = await getIncomeList();\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    const getAllOnFilter = async values => {\n        let expenses = await onFilterExpenses(values);\n        let incomes = await onFilterIncomes(values);\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, updateExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore, submitExpenseFromImport}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal}}>\n                <Filter />\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport moment from 'moment';\nimport ModalContext from '../context/modal-context';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport { FiUser, FiSettings } from \"react-icons/fi\";\nimport { MdEuroSymbol } from 'react-icons/md';\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport './Settings.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Settings = () => {\n    let [err, setErr] = useState({ newCategorie: false });\n    let [categories, setCategories] = useState([]);\n    let currentUser = AuthContext._currentValue;\n    let [userData, setUserData] = useState({});\n    let [editableUserData, setEditableUserData] = useState({});\n    let [settingsData, setSettingsData] = useState({});\n    let [isLoading, setIsLoading] = useState(false);\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const [key, setKey] = useState('userSettings');\n\n    useEffect(() => {\n        getUserData();\n        getSettingsData();\n    }, []);\n\n    const getUserData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setUserData(resData.data.userData[0]);\n                setEditableUserData(resData.data.userData[0]);\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateUser = (fields) => {\n        fields.updatedAt = JSON.stringify(moment(new Date()).valueOf());\n\n        setIsLoading(true);\n        let requestBody = {\n            query: `\n\n                              mutation UpdateUser($id: ID!, $name: String!, $surname: String!, $email: String!, $updatedAt: String!) {\n                                updateUser(userId: $id, name: $name, surname: $surname, email: $email, updatedAt: $updatedAt) {\n                                    name\n                                    surname\n                                    email\n                                  }\n                              }\n                            `,\n            variables: {\n                id: userData._id,\n                name: fields.firstName,\n                surname: fields.lastName,\n                email: fields.email,\n                updatedAt: fields.updatedAt\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                console.log(res);\n                setEditableUserData(res.data.updateUser);\n                modalInfo(true, 'Confirmation', 'User was updated');\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setSettingsData(resData.data.settingsData[0]);\n                setCategories(resData.data.settingsData[0].categories.split(';'));\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const validatePrice = (event) => {\n        let price = event.target.value;\n        if (price.length === 1 && price === '.') {\n            price = price.slice(0, -1);\n        }\n        if (price.length === 2 && price === '00') {\n            price = price.slice(0, -1);\n        }\n        if (price.split('.').length - 1 > 1) {\n            price = price.slice(0, -1);\n        }\n        price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n        return price.replace(/[^\\d.-]/g, '').replace('-', '');\n    };\n\n    const addCategory = (event, oldCategory) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newCategorie: true });\n            return oldCategory;\n        } else {\n            event.target.value = event.target.value.toLowerCase();\n            let newCategory = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n            let found = false;\n            categories.forEach(category => {\n                if (category === newCategory) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This category already in the category list.');\n            } else {\n                setCategories([...categories, newCategory]);\n            }\n        }\n    };\n\n    const removeCategory = category => {\n        if (categories.length === 1) {\n            modalInfo(true, 'Error', 'You can\\'t delete all categories.');\n        } else {\n            setCategories(categories.filter(item => item !== category));\n        }\n    };\n\n    const clearCategory = event => {\n        return '';\n    };\n\n    const emitChangesToCategory = event => {\n        if (err.newCategorie) {\n            setErr({ ...err, newCategorie: false });\n        }\n        return event.target.value.replace(/[//|/;&$%@\"<>()+{}.',=_~`!#^*/?]/g, '');\n    };\n\n    return (\n        isLoading ? <Spinner /> :\n            <Fragment>\n                <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                    <InfoModal />\n                    <Tabs id=\"settings-tab\" activeKey={key} onSelect={k => setKey(k)}>\n                        <Tab eventKey=\"userSettings\" title={key === 'userSettings' ? <span style={{ color: '#ea97c4' }}><FiUser size={20} />&nbsp; User </span> :\n                            <span><FiUser size={20} color={'#aeaeae'} />&nbsp; User </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    firstName: editableUserData.name || '',\n                                    lastName: editableUserData.surname || '',\n                                    email: editableUserData.email || '',\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    firstName: Yup.string()\n                                        .required('First Name is required'),\n                                    lastName: Yup.string()\n                                        .required('Last Name is required'),\n                                    email: Yup.string()\n                                        .email('Email is invalid')\n                                        .required('Email is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateUser(fields);\n                                }}\n                                render={({ errors, touched }) => (\n                                    <Form className=\"settings-form\" id=\"formContentUserSettings\">\n                                        <div className=\"p-2\">\n                                            <h4>User settings</h4>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                        <Tab eventKey=\"systemSettings\" title={key === 'systemSettings' ? <span style={{ color: '#ea97c4' }}><FiSettings size={20} />&nbsp; System </span> :\n                            <span><FiSettings size={20} color={'#aeaeae'} />&nbsp; System </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    dailyBudget: settingsData.dailyBudget || '',\n                                    weeklyBudget: settingsData.weeklyBudget || '',\n                                    monthlyBudget: settingsData.monthlyBudget || '',\n                                    categories: settingsData.categories || '',\n                                    newCategorie: '',\n                                    members: settingsData.members || '',\n                                    currency: settingsData.currency || ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    dailyBudget: Yup.number(),\n                                    weeklyBudget: Yup.number(),\n                                    monthlyBudget: Yup.number(),\n                                    categories: Yup.string(),\n                                    newCategorie: Yup.string(),\n                                    currency: Yup.string()\n                                        .required('Currency is required'),\n                                })}\n                                onSubmit={fields => {\n                                    console.log(fields);\n                                    // updateUser(fields);\n                                }}\n                                render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                                    <Form id=\"formContentSystemSettings\">\n                                        <div className=\"form-group row col-sm-12\" style={{ paddingTop: '25px' }}>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Budget settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Daily budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group \">\n                                                            <input placeholder=\"0.00\" name=\"dailyBudget\" onChange={e => { setFieldValue('dailyBudget', validatePrice(e)); }} value={values.dailyBudget} className={'form-control' + (errors.dailyBudget && touched.dailyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"dailyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Weekly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"weeklyBudget\" onChange={e => { setFieldValue('weeklyBudget', validatePrice(e)); }} value={values.weeklyBudget} className={'form-control' + (errors.weeklyBudget && touched.weeklyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"weeklyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Monthly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"monthlyBudget\" onChange={e => { setFieldValue('monthlyBudget', validatePrice(e)); }} value={values.monthlyBudget} className={'form-control' + (errors.monthlyBudget && touched.monthlyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"monthlyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Currency</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <select name=\"currency\" onChange={handleChange}\n                                                            onBlur={handleBlur} value={values.currency} className={'custom-select mr-sm-2 form-control' + (errors.currency && touched.currency ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                                            <option value=\"\">Select a currency</option>\n                                                            <option value=\"Euro\">Euro &euro;</option>\n                                                            <option value=\"Dollar\">Dollar $</option>\n                                                            <option value=\"GBD\">Pound &pound;</option>\n                                                        </select>\n                                                        <ErrorMessage name=\"currency\" component=\"div\" className=\"invalid-feedback\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Categories settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add category</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Category name\" name=\"newCategorie\" onChange={e => { setFieldValue('newCategorie', emitChangesToCategory(e)); }} value={values.newCategorie} className={'form-control col-sm-8 mr-1' + (err.newCategorie ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => { setFieldValue('categories', addCategory(e, values.categories)); setFieldValue('newCategorie', clearCategory(e)); }} value={values.newCategorie} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newCategorie\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newCategorie ? <div className=\"invalid-feedback\"> Category field can't be empty</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">All categories</label>\n                                                    <div className=\"col-sm-8\">\n                                                        <ul className=\"list-group col-sm-9\">\n                                                            {\n                                                                categories.map((category) => (\n                                                                    <li className='row' key={category}>\n                                                                        <span className='list-group-item list-item col-sm-12'>{category}\n                                                                            <button className='btn card_removeButton' type='button' onClick={() => removeCategory(category)}>\n                                                                                <i><FaRegTimesCircle size={20} /></i>\n                                                                            </button>\n                                                                        </span>\n                                                                    </li>\n                                                                ))\n                                                            }\n                                                        </ul>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Fammily settings</h4>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                    </Tabs>\n                </ModalContext.Provider>\n            </Fragment>\n    );\n};\n\nexport { Settings as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    {/* <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    {/* <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport Settings from './pages/Settings';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n      fetch('/removeCookie', {\n          method: 'GET',\n          credentials: \"same-origin\",\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      }).then(res => res.json())\n          .then(data => {\n            console.log(data.response.message);\n          })\n          .catch(err => {\n              console.log(err);\n          });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n                <Switch>\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                <Route path=\"/expenses\" component={Expenses} />\n                )}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                  )}\n                {this.state.token && (\n                  <Route path=\"/settings\" component={Settings} />\n                )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}