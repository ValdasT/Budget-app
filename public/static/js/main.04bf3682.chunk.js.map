{"version":3,"sources":["components/Spinner/Spinner.js","context/auth-context.js","context/modal-context.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Modal/Modal.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","context/expenses-context.js","components/Modal/AddExpenseModal.js","components/Modal/confirmationModal.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/AddExpense/AddExpense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Filter/Filter.js","components/SmallStatistics/SmallStatistics.js","components/Modal/ImportFileModal.js","pages/Expenses.js","pages/Settings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["spinner","react_default","a","createElement","className","React","createContext","token","userId","login","logout","modalContext","SignUp","_useContext","useContext","AuthContext","submitHandler","switchModeHandler","formik_esm","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","fields","render","_ref","errors","touched","status","id","htmlFor","placeholder","name","type","component","onClick","SignIn","InfoModal","ModalContext","modalHeader","modalText","showInfoModal","setShowInfoModal","handleClose","react","Modal","aria-labelledby","centered","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","AuthPage","_useState","useState","_useState2","Object","slicedToArray","isLogin","setisLogin","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","_useState7","_useState8","setModalHeader","_useState9","_useState10","setModalText","useEffect","cookie","modalInfo","header","text","fetch","method","credentials","headers","Content-Type","then","res","json","data","response","catch","err","console","log","createSettings","args","values","requestBody","query","variables","dailyBudget","weeklyBudget","monthlyBudget","members","categories","currency","creatorEmail","creatorsEmail","body","JSON","stringify","ok","statusText","message","concat","Provider","value","auth_context","time","Date","getTime","surname","createdAt","updatedAt","createUser","_id","components_Modal_Modal","Spinner_Spinner","components_SignUp_SignUp","components_SignIn_SignIn","bookingList","props","bookings","map","booking","key","event","title","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","onChange","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","Error","resData","deleteBookingHandler","bookingId","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","e","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","canCancel","canConfirm","onCancel","onConfirm","confirmText","ref","rows","EventList_EventList","TestContext","OneTest","count","fruit","dataFromDb","setName","lenght","Example","myQuery","gql","Test_templateObject","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","document","OneTest_OneTest","react_apollo_esm","loading","allFiles","disabled","expensesContext","dateBeautify","milliseconds","moment","format","AddExpenseModal","setting","submitExpense","showModal","setShowModal","expense","onUpdate","currencyValue","categoriesList","split","forEach","createCategoryList","selectedDate","setSelectedDate","tag","group","updateDate","_ref2","handleChange","setFieldValue","handleBlur","onBlur","category","target","slice","indexOf","substr","replace","validatePrice","fontSize","es","customInput","peekNextMonth","showMonthDropdown","dropdownMode","autoComplete","selected","pleaseformat","index_esm","size","actionFunction","Expense","currentUser","_currentValue","doc","setDoc","ExpensesContext","removeExpense","updateExpense","showMore","updatedFields","confirmationModal","Modal_AddExpenseModal","background","AddExpenseForm","showImportModal","setShowIportModal","_useContext2","setShowMore","allExpenses","settings","fi_index_esm","md_index_esm","Expenselist","AddExpense_AddExpenseForm","Expense_Expense_Expense","Filter","getAllOnFilter","getAll","toTime","fromTime","subtract","startDate","setStartDate","endDate","setEndDate","formatDate","fastFilter","dateFrom","dateTo","startOf","endOf","SmallStatistics","initData","setInitData","budget","setBudget","income","setIncome","setExpense","minAndMax","first","allData","totals","expenses","incomes","parseFloat","Expenses","toFixed","Incomes","Budget","apply","smallest","biggest","prepareChartData","es6","width","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","vertical","horizontal","line","dataKey","removeColor","stroke","fillOpacity","fill","domain","allowDataOverflow","ImportModal","submitExpenseFromImport","setAllExpenses","setAllFiles","uploadingFiles","setUploadingFiles","showWarning","setShowWarning","csvToJson","csv","Papa","parse","complete","results","createNewCards","asyncToGenerator","regenerator_default","mark","_callee2","fromFile","formatedArray","preparedToDb","newFromDb","wrap","_context2","next","searchFields","sent","j","toLowerCase","element","i","_callee","_context","t0","t1","stop","_x2","arguments","_x","fieldsArray","Promise","rej","numbers","missingFields","found","field","toLocaleLowerCase","createErrMsg","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","accept","minSize","maxSize","isDragActive","getRootProps","getInputProps","isDragReject","rejectedFiles","isFileTooLarge","role","file","substring","bytes","newFileList","removeFile","assign","files","extension","reader","FileReader","onload","bstr","result","wb","XLSX","read","cellDates","dateNF","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","raw","readAsBinaryString","convertToCSV","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","setSettings","getSettingsData","settingsData","getExpenseList","users","allUsers","addTag","getIncomeList","onFilterExpenses","convertTimeToMs","expensesFilter","onFilterIncomes","incomesFilter","valueOf","sortByDate","arrayWithDate","sort","b","reverse","join","localeCompare","array","updateArrayAfterUpdate","updateElement","newArray","updateArrayAfterRemove","allSettings","all","removeIncome","updatedAllList","updateIncome","createExpense","createIncome","components_Filter_Filter","SmallStatistics_SmallStatistics","ImportFileModal","ExpensesList_Expenselist","Settings","newCategorie","newMember","emailValidation","setErr","setCategories","setMembers","userData","setUserData","editableUserData","setEditableUserData","setSettingsData","_useState19","_useState20","_useState21","_useState22","setKey","getUserData","membersList","Tabs","activeKey","onSelect","k","Tab","eventKey","color","enableReinitialize","updateUser","validateOnChange","memebers","allMemebers","allCategories","member","updateSettings","validateField","paddingTop","objectSpread","oldCategory","undefined","newCategory","charAt","toUpperCase","addCategory","item","removeCategory","oldMember","error","addMember","removeMember","mainNavigation","Consumer","Navbar","bg","Brand","as","Link","to","gi_index_esm","Nav","NavDropdown","alignRight","Item","Divider","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","TestPage","Redirect","from","exact","ReactDOM","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.04bf3682.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"cssload-inner cssload-one\"></div>\n        <div className=\"cssload-inner cssload-two\"></div>\n        <div className=\"cssload-inner cssload-three\"></div>\n    </div>\n);\n\nexport default spinner;\n","import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId) => {},\n    logout: () => {}\n});","import React from 'react';\nconst modalContext = React.createContext();\nexport { modalContext as default };","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignUp = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n    \n    return (\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: ''\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string()\n                    .required('First Name is required'),\n                lastName: Yup.string()\n                    .required('Last Name is required'),\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .min(6, 'Password must be at least 6 characters')\n                    .required('Password is required'),\n                confirmPassword: Yup.string()\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                    .required('Confirm Password is required')\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignUp\">\n                    <div className=\"p-2\">\n                        <h4>Create account</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-form-label\" htmlFor=\"confirmPassword\">Confirm Password</label>\n                        <div className=\"col-sm-8\">\n                            <Field placeholder=\"Confirm\" name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign in</button>\n                        {/* <button type=\"reset\" className=\"btn btn-secondary\">Reset</button> */}\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignUp;","\nimport React, { useContext } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport AuthContext from '../../context/auth-context';\n\nconst SignIn = () => {\n\n    const { submitHandler, switchModeHandler } = useContext(AuthContext);\n\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                    .email('Email is invalid')\n                    .required('Email is required'),\n                password: Yup.string()\n                    .required('Password is required'),\n            })}\n            onSubmit={fields => {\n                submitHandler(fields);\n            }}\n            render={({ errors, status, touched }) => (\n                <Form className=\"auth-form\" id=\"formContentSignIn\">\n                    <div className=\"p-2\">\n                        <h4>Sign in</h4>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"email\">Email</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-3 col-form-label\" htmlFor=\"password\">Password</label>\n                        <div className=\"col-sm-9\">\n                            <Field placeholder=\"Password\" name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-actions\">\n                        <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                        <button onClick={switchModeHandler} type=\"button\" className=\"btn btn-secondary mr-2\">Sign up</button>\n\n                    </div>\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default SignIn;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalHeader, modalText, showInfoModal, setShowInfoModal } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{modalHeader}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useState, Fragment, useContext, useEffect } from 'react';\nimport './Auth.css';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport ModalContext from '../context/modal-context';\nimport SignUp from '../components/SignUp/SignUp';\nimport SignIn from '../components/SignIn/SignIn';\n\nimport InfoModal from '../components/Modal/Modal';\n\n\nconst AuthPage = () => {\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    useEffect(() => {\n        cookie();\n    }, []);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const { login } = useContext(AuthContext);\n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const cookie = () => {\n        fetch('/cookie', {\n            method: 'GET',\n            credentials: \"same-origin\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then(data => {\n\n                login(\n                    data.response.token,\n                    data.response.userId\n                );\n            })\n            .catch(err => {\n                console.log('There is no cookie!');\n            });\n    };\n\n    const submitHandler = (values) => {\n        let time = JSON.stringify(new Date().getTime());\n        setIsLoading(true);\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                }\n              }\n            `,\n            variables: {\n                email: values.email,\n                password: values.password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!, $createdAt: String!, $updatedAt: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname, createdAt: $createdAt, updatedAt: $updatedAt}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: values.email,\n                    password: values.password,\n                    name: values.firstName,\n                    surname: values.lastName,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.data.login) {\n                    setIsLoading(false);\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n\n                    );\n                } else {\n                    let args = {\n                        userId: res.data.createUser._id,\n                        creatorsEmail: res.data.createUser.email\n                    };\n                    createSettings(args, values);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Oops!',`Your email or password is incorect.`);\n                throw err;\n            });\n    };\n\n    const createSettings = (args, values) => {\n        let requestBody = {\n            query: `\n            mutation CreateSettings($dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $members: String!, $categories: String!,  $currency: String!, $userId: String!, $creatorEmail: String! ) {\n                createSettings(settingsInput:{dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, members:$members, categories:$categories,currency:$currency, userId: $userId, creatorEmail: $creatorEmail}) {\n                    _id\n                   \n                  }\n              }\n      `,\n            variables: {\n                dailyBudget: '',\n                weeklyBudget: '',\n                monthlyBudget: '',\n                members: '',\n                categories: '',\n                currency: '',\n                userId: args.userId,\n                creatorEmail: args.creatorsEmail\n            }\n        };\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data) {\n                    modalInfo(true, 'Confirmation',`Hi ${values.firstName} ${values.lastName}, your account was created. Now You can sign in.`);\n                    switchModeHandler();\n                    setIsLoading(false);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    }; \n\n    return (\n        <ModalContext.Provider value={{ modalHeader, modalText, showInfoModal, setShowInfoModal }}>\n            <AuthContext.Provider value={{ submitHandler, switchModeHandler }}>\n                <InfoModal />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            {\n                                isLogin ? <SignUp /> : <SignIn />\n                            }\n                        </Fragment>\n                }\n\n            </AuthContext.Provider>\n        </ModalContext.Provider>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext, Fragment, useState } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal } from 'react-bootstrap';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\nimport { MdEuroSymbol } from 'react-icons/md';\n\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Modal.css';\n\nconst formatDate = (pleaseformat) => {\n    return moment(pleaseformat).format('MM/DD/YYYY');\n};\n\nconst dateBeautify = (milliseconds) => {\n    return moment(milliseconds, 'x').format('MM/DD/YYYY');\n};\n\nconst validatePrice = (event) => {\n    let price = event.target.value;\n    if (price.length === 1 && price === '.') {\n        price = price.slice(0, -1);\n    }\n    if (price.length === 2 && price === '00') {\n        price = price.slice(0, -1);\n    }\n    if (price.split('.').length - 1 > 1) {\n        price = price.slice(0, -1);\n    }\n    price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n    return price.replace(/[^\\d.-]/g, '').replace('-', '');\n};\n\nconst createCategoryList = setting => {\n    let categoriesList = [];\n    setting.categories.split(';').forEach(e => {\n        if (e.length) {\n            categoriesList.push(e);\n        }\n    });\n    return categoriesList;\n};\n\nconst AddExpenseModal = ({ setting}) => {\n    const { submitExpense, showModal, setShowModal, expense, onUpdate } = useContext(ModalContext);\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';  \n    const handleClose = () => setShowModal(!showModal);\n    let time = moment().format('MM/DD/YYYY');\n    let [categories, setCategories] = useState(createCategoryList(setting));\n    const [selectedDate, setSelectedDate] = useState(new Date(expense ? dateBeautify(expense.createdAt) : time));\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    {onUpdate ? <Modal.Title>Update expense</Modal.Title> : <Modal.Title>Add expense</Modal.Title>}\n                </Modal.Header>\n                <Modal.Body>\n                    <Formik\n                        initialValues={{\n                            tag: expense ? expense.tag : '',\n                            title: expense ? expense.title : '',\n                            description: expense ? expense.description : '',\n                            group: expense ? expense.group : '',\n                            price: expense ? expense.price : '',\n                            date: expense ? dateBeautify(expense.createdAt) : time,\n                            updateDate: expense ? dateBeautify(expense.updatedAt) : time,\n                        }}\n                        validationSchema={Yup.object().shape({\n                            title: Yup.string()\n                                .required('title is required'),\n                            description: Yup.string(),\n                            group: Yup.string()\n                                .required('Group is required'),\n                            tag: Yup.string()\n                                .required('Type is required'),\n                            price: Yup.number()\n                                .required('Price is required'),\n                            date: Yup.date()\n                                .required('Date is required')\n                        })}\n                        onSubmit={fields => {\n                            submitExpense(fields);\n                        }}\n\n                        render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, }) => (\n                            <Form className=\"auth-form\">\n                                <div className=\"p-2\">\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Type</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"tag\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.tag} className={'custom-select mr-sm-2 form-control' + (errors.tag && touched.tag ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a type</option>\n                                            <option value=\"Expense\">Expense</option>\n                                            <option value=\"Income\">Income</option>\n                                        </select>\n                                        <ErrorMessage name=\"tag\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field placeholder=\"Title\" name=\"title\" type=\"text\" className={'form-control' + (errors.title && touched.title ? ' is-invalid' : '')} />\n                                        <ErrorMessage name=\"title\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"description\">Description</label>\n                                    <div className=\"col-sm-9\">\n                                        <Field component=\"textarea\" placeholder=\"Description\" name=\"description\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage name=\"description\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Group</label>\n                                    <div className=\"col-sm-9\">\n                                        <select name=\"group\" onChange={handleChange}\n                                            onBlur={handleBlur} value={values.group} className={'custom-select mr-sm-2 form-control' + (errors.group && touched.group ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                            <option value=\"\">Select a group</option>\n                                            {\n                                                categories.map((category) => (\n                                                    <option key={category} value={category}>{category}</option>\n                                                ))\n                                            }\n                                        </select>\n                                        <ErrorMessage name=\"group\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"title\">Price</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <input placeholder=\"0.00\" name=\"price\" onChange={e => { setFieldValue('price', validatePrice(e)); }} value={values.price} className={'form-control' + (errors.price && touched.price ? ' is-invalid' : '')} />\n                                            <div className=\"input-group-append\">\n                                                <div style={{ fontSize: '15px' }} className=\"input-group-text\">{currencyValue}</div>\n                                            </div>\n                                            <ErrorMessage name=\"price\" component=\"div\" className=\"invalid-feedback\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label className=\"col-sm-3 col-form-label\" htmlFor=\"date\">Date</label>\n                                    <div className=\"col-sm-9\">\n                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                            <DatePicker\n                                                className={'form-control not-round-right-corner' + (errors.date && touched.date ? ' is-invalid' : '')}\n                                                customInput={\n                                                    <div>\n                                                        <span className=\"\">{values.date}</span>\n                                                    </div>\n                                                }\n                                                peekNextMonth\n                                                showMonthDropdown\n                                                dropdownMode=\"select\"\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                name=\"date\"\n                                                selected={selectedDate}\n                                                placeholder=\"Enter date\"\n                                                onChange={e => { setFieldValue('date', formatDate(e)); setSelectedDate(e); }} />\n                                            <div className=\"input-group-append\">\n                                                <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <ErrorMessage name=\"date\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                                <div className=\"form-actions float-right\">\n                                    {onUpdate? <button type=\"submit\" className=\"btn btn-primary mr-2\">Update</button> : <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button> }\n                                    <button  type='button' className=\"btn btn-secondary\" onClick={handleClose}>Cancel</button>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </Modal.Body>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default AddExpenseModal;","import React, { useContext, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst InfoModal = () => {\n    const { modalText, showInfoModal, setShowInfoModal, actionFunction } = useContext(ModalContext);\n    const handleClose = () => setShowInfoModal(false);\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showInfoModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Please confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{modalText}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={actionFunction}>\n                        Yes\n                    </Button>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default InfoModal;","import React, { useContext, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport AuthContext from '../../../../context/auth-context';\nimport ModalContext from '../../../../context/modal-context';\nimport AddExpenseModal from '../../../Modal/AddExpenseModal';\nimport ConfirmationModal from '../../../Modal/confirmationModal';\nimport { FaRegTimesCircle, FaRegEdit } from \"react-icons/fa\";\nimport './Expense.css';\n\nconst Expense = ({ expense, setting }) => {\n\n    let currentUser = AuthContext._currentValue;\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalText, setModalText] = useState();\n    let [doc, setDoc] = useState();\n    let [showModal, setShowModal] = useState(false);\n    let onUpdate = true;\n    let currencyValue = setting.currency === 'GBD' ? '£' : setting.currency === 'Dollar' ? '$' : '€';                                                           \n    \n    const modalInfo = (show, text, id) => {\n        setShowInfoModal(show);\n        setModalText(text);\n        setDoc(id);\n    };\n\n    const { removeExpense, updateExpense, showMore} = useContext(ExpensesContext);\n\n    const dateBeautify = (milliseconds) => {\n        return moment(milliseconds, 'x').format('MM/DD/YYYY');\n    };\n\n    const actionFunction = () => {\n        removeExpense(doc);\n    };\n\n    const submitExpense = (updatedFields) => {\n        updatedFields.id = expense._id;\n        updateExpense(updatedFields);\n    };\n\n    return (\n        <ModalContext.Provider value={{ modalText, showInfoModal, setShowInfoModal, actionFunction, showModal, setShowModal, expense, onUpdate, submitExpense }}>\n            <ConfirmationModal />\n            <AddExpenseModal setting={setting} />\n            <span className={!showMore ? 'card' : 'card_more'}>\n                <div style={{ background: 'rgb(249, 248, 248)' }}>\n                    <div className={!showMore ? 'card_title' : 'card_title_more'}> {expense.title}</div>\n                </div>\n                <div className={'card_date'}>{dateBeautify(expense.createdAt)}</div>\n                <div className={!showMore ? 'card_group invisible' : 'card_group'}>Group: {expense.group}</div>\n                <div className={!showMore ? 'card_description invisible' : 'card_description'}>{expense.description}</div>\n                {expense.tag === 'Expense' ? <div className='card_price_expense'>-{expense.price} {currencyValue} </div> : <div className='card_price_income'>{expense.price} {currencyValue} </div>}\n                {\n                    currentUser.userId === setting.creatorId ?\n                        <Fragment>\n                            <button className='btn card_removeButton' onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton' onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment> :\n                        <Fragment>\n                            <button className='btn card_removeButton disabled' disabled onClick={() => modalInfo(true, 'Are you sure whant to delete this item?', expense)}>\n                                <i><FaRegTimesCircle size={20} /></i>\n                            </button>\n                            <button className='btn card_editButton disabled' disabled onClick={() => setShowModal(!showModal)}>\n                                <i><FaRegEdit size={20} /></i>\n                            </button>\n                        </Fragment>\n                }\n            </span>\n        </ModalContext.Provider>\n    );\n};\n\nexport { Expense as default };","import React, { useContext, Fragment} from 'react';\nimport ModalContext from '../../../context/modal-context';\nimport ExpensesContext from '../../../context/expenses-context';\nimport AddExpenseModal from '../../Modal/AddExpenseModal';\nimport InfoModal from '../../Modal/Modal';\nimport { FiPlus, FiUpload } from \"react-icons/fi\";\nimport { MdUnfoldMore, MdUnfoldLess  } from \"react-icons/md\";\nimport '../ExpensesList/Expense/Expense.css';\n\nconst AddExpenseForm = () => {\n    const { showModal, setShowModal, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { setShowMore, showMore, allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <span className=\"card_first card\">\n            <Fragment>\n                <InfoModal />\n                <div className='row d-flex align-self-center'>\n                    <button className='btn_one' onClick={() => setShowModal(!showModal)}>\n                        <i><FiPlus size={30} /></i>\n                    </button>\n                    <button className='btn_upload' onClick={() => setShowIportModal(!showImportModal)}>\n                        <i><FiUpload size={25} /></i>\n                    </button>\n                    {allExpenses.length ? <button className='btn_one' onClick={() => setShowMore(!showMore)}>\n                        {!showMore ? <i><MdUnfoldMore size={30} /></i> : <i><MdUnfoldLess size={30} /></i>}\n                    </button> : null}\n                </div>\n                {showModal && (\n                    <Fragment>\n                        <AddExpenseModal setting={settings[0]} />\n                    </Fragment>\n                )}\n            </Fragment>\n        </span>\n    );\n};\n\nexport { AddExpenseForm as default };","import React, { useContext, Fragment} from 'react';\nimport Expense from './Expense/Expense';\nimport AddExpense from '../AddExpense/AddExpense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { allExpenses, settings } = useContext(ExpensesContext);\n\n    return (\n        <Fragment>\n            <AddExpense/>\n            {\n                allExpenses.map((expense) => (\n                    settings.map((setting) => (\n                        expense.creatorId === setting.creatorId? <Expense className='expenses_list' key={expense._id} expense={expense} setting={setting} />: null\n                    ))\n                ))\n            }\n        </Fragment>\n    );\n};\n                \nexport { Expenselist as default };","import React, { useContext,useState, Fragment } from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport ExpensesContext from '../../context/expenses-context';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport { FaRegCalendarAlt } from 'react-icons/fa';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst Filter = () => {\n    const { getAllOnFilter, getAll } = useContext(ExpensesContext);\n    let toTime = moment().format('MM/DD/YYYY');\n    let fromTime = moment().subtract(1, 'months').format('MM/DD/YYYY');\n    const [startDate, setStartDate] = useState(new Date(fromTime));\n    const [endDate, setEndDate] = useState(new Date(toTime));\n\n    const formatDate = (pleaseformat) => {\n        return moment(pleaseformat).format('MM/DD/YYYY');\n    };\n\n    const fastFilter = filter => {\n        let date = {\n            dateFrom: '',\n            dateTo: ''\n        };\n        switch (filter) {\n        case 'today':\n            date = {\n                dateFrom: moment().format('MM/DD/YYYY'),\n                dateTo: moment().format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'week':\n            date = {\n                dateFrom: moment().startOf('week').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('week').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'month':\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'year':\n            date = {\n                dateFrom: moment().startOf('year').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('year').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n            break;\n        case 'all':\n            getAll();\n            break;\n        default:\n            date = {\n                dateFrom: moment().startOf('month').format('MM/DD/YYYY'),\n                dateTo: moment().endOf('month').format('MM/DD/YYYY')\n            };\n            getAllOnFilter(date);\n        }\n    };\n\n    return (\n        <Fragment>\n            <div className=\"form-group row col-sm-12  justify-content-center mb-3\">\n                <button className=\" col-sm-2 btn btn_with_line\" onClick={() => fastFilter('today')}>Today</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('week')}>This week</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('month')}>This month</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('year')}>This year</button>\n                <button className=\"col-sm-2 btn btn_with_line\" onClick={() => fastFilter('all')}>All</button>\n            </div>\n            <Formik\n                initialValues={{\n                    dateFrom: fromTime,\n                    dateTo:  toTime,\n                }}\n                validationSchema={Yup.object().shape({\n                    dateFrom: Yup.date()\n                        .required('Date is required'),\n                    dateTo: Yup.date()\n                        .required('Date is required')\n                })}\n                onSubmit={fields => {\n                    getAllOnFilter(fields);\n                }}\n\n                render={({ errors, values, touched, setFieldValue }) => (\n                    <Form>\n                        <div className=\"form-group row col-sm-12  justify-content-center mb-2\">\n                            <label className=\" col-form-label mr-3\" htmlFor=\"dateFrom\">From:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={startDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateFrom && touched.dateFrom ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateFrom}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateFrom\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateFrom', formatDate(date)); setStartDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <label className=\"col-form-label ml-5 mr-3\" htmlFor=\"dateTo\">To:</label>\n                            <div>\n                                <div className=\"input-group mb-2 mr-sm-2\">\n                                    <DatePicker\n                                        selected={endDate}\n                                        startDate={startDate}\n                                        endDate={endDate}\n                                        className={'form-control not-round-right-corner' + (errors.dateTo && touched.dateTo ? ' is-invalid' : '')}\n                                        customInput={\n                                            <div>\n                                                <span>{values.dateTo}</span>\n                                            </div>\n                                        }\n                                        peekNextMonth\n                                        showMonthDropdown\n                                        dropdownMode=\"select\"\n                                        type=\"text\"\n                                        autoComplete=\"off\"\n                                        name=\"dateTo\"\n                                        placeholder=\"Enter date\"\n                                        onChange={date => { setFieldValue('dateTo', formatDate(date)); setEndDate(date); }} />\n                                    <div className=\"input-group-append\">\n                                        <div className=\"input-group-text\"><FaRegCalendarAlt className=\"\" size={20} /></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <ErrorMessage name=\"dateTo\" component=\"div\" className=\"invalid-feedback\" />\n                            <div className=\"float-right ml-5\">\n                                <button type=\"submit\" className=\"btn btn_main\">Filter</button>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default Filter;","import React, { useContext, useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../../context/expenses-context';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, AreaChart, Area, ResponsiveContainer, Legend } from 'recharts';\n\nconst SmallStatistics = () => {\n\n    const { allExpenses } = useContext(ExpensesContext);\n    let [initData, setInitData] = useState([]);\n    let [budget, setBudget] = useState(true);\n    let [income, setIncome] = useState(true);\n    let [expense, setExpense] = useState(true);\n    let minAndMax = { first: [] };\n\n    const prepareChartData = allExpenses => {\n        let allData = [];\n        let totals = {\n            expenses: 0,\n            incomes: 0,\n            budget: 0\n        };\n        allExpenses.forEach(expense => {\n            expense.date = moment(expense.createdAt, 'x').format('DD/MM');\n            if (expense.tag === 'Expense') {\n                totals.expenses = totals.expenses + parseFloat(expense.price);\n                totals.budget = totals.budget - parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            } else {\n                totals.incomes = totals.incomes + parseFloat(expense.price);\n                totals.budget = totals.budget + parseFloat(expense.price);\n                allData.push({\n                    date: expense.date,\n                    Expenses: totals.expenses.toFixed(2),\n                    Incomes: totals.incomes.toFixed(2),\n                    Budget: totals.budget.toFixed(2)\n                });\n            }\n        });\n\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Incomes; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Budget; })));\n        minAndMax.first.push(Math.min.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.first.push(Math.max.apply(Math, allData.map((expense) => { return expense.Expenses; })));\n        minAndMax.smallest = Math.min.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        minAndMax.biggest = Math.max.apply(Math, minAndMax.first.map((expense) => { return expense; }));\n        setInitData(allData);\n    };\n\n    useEffect(() => {\n        prepareChartData(allExpenses);\n    }, [allExpenses]);\n\n    const removeColor = (e) => {\n        switch (e.dataKey) {\n        case 'Budget':\n            setBudget(!budget);\n            break;\n        case 'Incomes':\n            setIncome(!income);\n            break;\n        case 'Expenses':\n            setExpense(!expense);\n            break;\n        default:\n            console.log('incorect name');\n        }\n    };\n\n    return (\n        <Fragment>\n            {allExpenses.length ? <ResponsiveContainer width=\"95%\" height={150} >\n                <AreaChart data={initData}\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                        {expense ? <linearGradient id=\"colorExp\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0} />\n                        </linearGradient> : null\n\n                        },\n                        {income ? <linearGradient id=\"colorInc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                        </linearGradient> : null\n                        },\n                        {budget ? <linearGradient id=\"colorBud\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#0000FF\" stopOpacity={0.8} />\n                            <stop offset=\"95%\" stopColor=\"#0000FF\" stopOpacity={0} />\n                        </linearGradient> : null\n                        }\n                    </defs>\n                    <CartesianGrid\n                        vertical={false}\n                        horizontal={false}\n                    />\n                    <Legend onClick={(line) => { removeColor(line); }} />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"Budget\" stroke=\"#0000FF\" fillOpacity={1} fill=\"url(#colorBud)\" />\n                    <Area type=\"monotone\" dataKey=\"Incomes\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorInc)\" />\n                    <Area type=\"monotone\" dataKey=\"Expenses\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorExp)\" />\n                    <XAxis\n                        dataKey=\"date\"\n                        fontSize='10'\n                    />\n                    <YAxis\n                        type=\"number\"\n                        domain={[minAndMax.smallest, minAndMax.biggest]}\n                        allowDataOverflow\n                        fontSize='10'\n                    />\n                </AreaChart>\n            </ResponsiveContainer> : null}\n        </Fragment>\n    );\n};\n\nexport { SmallStatistics as default };\n","import React, { useContext, useState, useCallback, Fragment } from 'react';\nimport ModalContext from '../../context/modal-context';\nimport ExpensesContext from '../../context/expenses-context';\nimport Spinner from '../Spinner/Spinner';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport XLSX from 'xlsx';\nimport { FiUpload } from \"react-icons/fi\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { FiDelete } from \"react-icons/fi\";\n\nimport './Modal.css';\n\nconst ImportModal = () => {\n    const { modalInfo, showImportModal, setShowIportModal } = useContext(ModalContext);\n    const { submitExpenseFromImport, setAllExpenses } = useContext(ExpensesContext);\n    let [allFiles, setAllFiles] = useState([]);\n    let [uploadingFiles, setUploadingFiles] = useState(false);\n    let [showWarning, setShowWarning] = useState(false);\n\n    const handleClose = () => setShowIportModal(false);\n\n    const formatBytes = bytes => {\n        if (bytes < 1024) return bytes + ' Bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + ' KB';\n        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + ' MB';\n        else return (bytes / 1073741824).toFixed(3) + ' GB';\n    };\n\n    const convertToCSV = files => {\n        if (!files.length) {\n            setShowWarning(true);\n        } else {\n            setUploadingFiles(true);\n            let extension = files[0].name.split('.');\n            extension = extension[extension.length - 1].toLowerCase();\n            if (extension === 'csv') {\n                csvToJson(files[0]);\n            } else {\n                const reader = new FileReader();\n                reader.onload = function (e) {\n                    let bstr = e.target.result;\n                    let wb = XLSX.read(bstr, { type: 'binary', header: 1, cellDates: true, dateNF: 'DD/MM/YYYY' });\n                    let wsname = wb.SheetNames[0];\n                    let ws = wb.Sheets[wsname];\n                    let csv = XLSX.utils.sheet_to_csv(ws, { header: 1, raw: false });\n                    csvToJson(csv);\n                };\n                let binaryFile = reader.readAsBinaryString(files[0]); // it triger reader, don't delete\n            }\n        }\n    };\n\n    const csvToJson = csv => {\n        Papa.parse(csv, {\n            complete: function (results) {\n                createNewCards(results);\n            }\n        });\n    };\n\n    const createNewCards = async fromFile => {\n        let formatedArray = [{\n            title: '',\n            description: '',\n            price: '',\n            group: '',\n            createdAt: '',\n            tag: ''\n        }];\n        let preparedToDb = [];\n        let fields = await searchFields(fromFile.data[0]);\n        fields.forEach((fromFile, j) => {\n            if (fromFile.name.toLowerCase() === 'title') {\n                formatedArray[0].title = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'description') {\n                formatedArray[0].description = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'price') {\n                formatedArray[0].price = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'group') {\n                formatedArray[0].group = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'date') {\n                formatedArray[0].createdAt = fields[j].id;\n            }\n            if (fromFile.name.toLowerCase() === 'type') {\n                formatedArray[0].tag = fields[j].id;\n            }\n        });\n        fromFile.data.forEach((element, i) => {\n            if (i !== 0 && element[0].length) {\n                preparedToDb.push({\n                    title: element[formatedArray[0].title],\n                    description: element[formatedArray[0].description],\n                    price: element[formatedArray[0].price],\n                    group: element[formatedArray[0].group],\n                    createdAt: element[formatedArray[0].createdAt],\n                    tag: element[formatedArray[0].tag]\n                });\n            }\n        });\n        let newFromDb = [];\n        preparedToDb.forEach(async e => {\n            newFromDb.push(await submitExpenseFromImport(e));\n            if (formatedArray.length === newFromDb.length) {\n                await setAllExpenses(newFromDb);\n                modalInfo(true, 'Confirmation', 'File was uploaded');\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            }\n        });\n    };\n\n    const searchFields = fieldsArray => {\n        return new Promise((res, rej) => {\n            let mandataryFields = ['Title', 'Price', 'Group', 'Date', 'Type', 'Description'];\n            let numbers = [];\n            let missingFields = [];\n            mandataryFields.forEach(name => {\n                let found = false;\n                fieldsArray.forEach((field, i) => {\n                    if (name.toLocaleLowerCase() === field.toLowerCase()) {\n                        found = true;\n                        numbers.push({\n                            name: name,\n                            id: i\n                        });\n                    }\n                });\n                if (!found) {\n                    missingFields.push(name);\n                }\n            });\n            if (missingFields.length) {\n                let createErrMsg = '';\n                missingFields.forEach((field, i) => {\n                    if (missingFields.length === i + 1) {\n                        createErrMsg += ` \"${field}\".`;\n                    } else {\n                        createErrMsg += ` \"${field}\";`;\n                    }\n                });\n                modalInfo(true, 'Error', `Inappropriate file. Missing fields in the file:${createErrMsg}`);\n                setUploadingFiles(false);\n                setAllFiles([]);\n                handleClose();\n            } else {\n                res(numbers);\n            }\n        });\n    };\n\n    const removeFile = file => {\n        let newFileList = [];\n        allFiles.map(e => {\n            if (e.name !== file.name && e.size !== file.size) {\n                newFileList.push(e);\n            }\n        });\n        setAllFiles(newFileList);\n    };\n\n    const makeShorter = text => {\n        if (text.length > 20) {\n            return text.substring(0, 20) + '...';\n        } else {\n            return text;\n        }\n    };\n\n    const maxSize = 50173280;\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length) {\n            // setAllFiles(oldAllFiles => [...oldAllFiles, acceptedFiles[0]]);\n            setAllFiles(() => [acceptedFiles[0]]);\n            setShowWarning(false);\n        }\n    }, []);\n\n    const { isDragActive, getRootProps, getInputProps, isDragReject, rejectedFiles } = useDropzone({\n        onDrop,\n        // accept: 'text/csv,application/pdf,text/xml,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        accept: 'text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        minSize: 0,\n        maxSize,\n    });\n\n    const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > maxSize;\n\n    return (\n        <Fragment>\n            <Modal\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered show={showImportModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Import expenses {uploadingFiles}</Modal.Title>\n                </Modal.Header>\n                {\n                    !uploadingFiles ?\n                        <Fragment>\n                            <Modal.Body>\n                                {\n                                    showWarning ?\n                                        <div className=\"alert alert-danger\" role=\"alert\">\n                                            Please select a file first!\n                                        </div> : null\n                                }\n                                <div >\n                                    <ul>\n                                        {\n                                            allFiles.map((file) => (\n                                                <li className='' key={file.name}  >{`${makeShorter(file.name)}  - (${formatBytes(file.size)})`}\n                                                    <button className='btn_remove' onClick={() => removeFile(file)}>\n                                                        <i><FiDelete size={20} /></i>\n                                                    </button>\n                                                </li>\n                                            ))\n                                        }\n                                    </ul>\n                                    <div className=\"drop_zone container text-center \" {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        {!isDragActive && <i>Click here or drop a file to upload! <FiUpload size={20} /></i>}\n                                        {isDragActive && !isDragReject && \"Drop it here!\"}\n                                        {isDragReject && \"File type not accepted, sorry!\"}\n                                        {isFileTooLarge && (\n                                            <div className=\"text-danger mt-2\">\n                                                File is too large.\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Modal.Body>\n                        </Fragment> : <Spinner />\n                }\n                <Modal.Footer>\n                    <Button type='button' variant=\"primary\" disabled={uploadingFiles} onClick={() => convertToCSV(allFiles)}>\n                        Upload\n                    </Button>\n                    <Button variant=\"secondary\" disabled={uploadingFiles} onClick={handleClose}>\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Fragment>\n    );\n};\n\nexport default ImportModal;","import React, { useEffect, useState, Fragment } from 'react';\nimport moment from 'moment';\nimport ExpensesContext from '../context/expenses-context';\nimport ModalContext from '../context/modal-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport Filter from '../components/Filter/Filter';\nimport SmallStatistics from '../components/SmallStatistics/SmallStatistics';\nimport InfoModal from '../components/Modal/Modal';\nimport ImportModal from '../components/Modal/ImportFileModal';\nimport Spinner from '../components/Spinner/Spinner';\nimport './Expenses.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Expenses = () => {\n    let currentUser = AuthContext._currentValue;\n    let [isLoading, setIsLoading] = useState(false);\n    let [showModal, setShowModal] = useState(false);\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [showImportModal, setShowIportModal] = useState(false);\n    let [allExpenses, setAllExpenses] = useState([]);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n    let [showMore, setShowMore] = useState(false);\n    let [settings, setSettings] = useState([]);\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    useEffect(() => {\n        getAll();\n    }, []);\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorId\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                console.log(resData.data);\n                setSettings(...settings, resData.data.settingsData);\n                return resData.data.settingsData;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const removeExpense = expense => {\n        let requestBody = {\n            query: ''\n        };\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                  mutation RemoveExpense($id: ID!) {\n                    removeExpense(expenseId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                  mutation RemoveIncome($id: ID!) {\n                    removeIncome(incomeId: $id) {\n                    _id\n                     title\n                    }\n                  }\n                `,\n                variables: {\n                    id: expense._id\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                let newArray = [];\n                if (res.data.removeExpense) {\n                    newArray = updateArrayAfterRemove(res.data.removeExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was deleted');\n                } else {\n                    newArray = updateArrayAfterRemove(res.data.removeIncome);\n                    modalInfo(true, 'Confirmation', 'Income was deleted');\n                }\n                setAllExpenses(newArray);\n            })\n            .catch(err => {\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getExpenseList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                expenses {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then( res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return  res.json();\n            })\n            .then( resData => {\n                console.log(resData.data.expenses);\n                resData.data.expenses = addTag(resData.data.expenses, 'Expense');\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch( err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const getIncomeList = (users) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                incomes {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                  }\n              }`,\n            allUsers: users\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                resData.data.incomes = addTag(resData.data.incomes, 'Income');\n                console.log( resData.data.incomes);\n                setIsLoading(false);\n                return resData.data.incomes;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const onFilterExpenses = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query ExpensesFilter($dateFrom: String!, $dateTo: String!){\n                expensesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.expensesFilter = addTag(res.data.expensesFilter, 'Expense');\n                setIsLoading(false);\n                return res.data.expensesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const onFilterIncomes = (values, allUsers) => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n            query IncomesFilter($dateFrom: String!, $dateTo: String!){\n                incomesFilter(dateFrom: $dateFrom, dateTo: $dateTo) {\n                    _id\n                    title\n                    description\n                    price\n                    group\n                    createdAt\n                    updatedAt\n                    creatorId\n                }\n            }`,\n            variables: {\n                dateFrom: convertTimeToMs(values.dateFrom),\n                dateTo: convertTimeToMs(values.dateTo)\n            },\n            allUsers: allUsers\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                res.data.incomesFilter = addTag(res.data.incomesFilter, 'Income');\n                setIsLoading(false);\n                return res.data.incomesFilter;\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpense = fields => {\n        let requestBody = {\n            query: ''\n        };\n        setIsLoading(true);\n        let time = convertTimeToMs(fields.date);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                setIsLoading(false);\n                setShowModal(false);\n                if (res.data.createExpense) {\n                    modalInfo(true, 'Confirmation', 'Expense was created');\n                    res.data.createExpense.tag = 'Expense';\n                    setAllExpenses([...allExpenses, res.data.createExpense]);\n                } else {\n                    modalInfo(true, 'Confirmation', 'Income was created');\n                    res.data.createIncome.tag = 'Income';\n                    setAllExpenses([...allExpenses, res.data.createIncome]);\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                setShowModal(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const submitExpenseFromImport = fields => {\n        let requestBody = {\n            query: ''\n        };\n        let time = convertTimeToMs(fields.createdAt);\n        if (fields.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation CreateExpense($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createExpense(expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation CreateIncome($title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            createIncome(incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    title: fields.title,\n                    description: fields.description,\n                    price: fields.price,\n                    group: fields.group,\n                    createdAt: time,\n                    updatedAt: time\n                }\n            };\n        }\n\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                if (res.data.createExpense) {\n                    res.data.createExpense.tag = 'Expense';\n                    return res.data.createExpense;\n                } else {\n                    res.data.createIncome.tag = 'Income';\n                    return res.data.createIncome;\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const updateExpense = expense => {\n        setIsLoading(true);\n        let requestBody = {\n            query: ''\n        };\n        expense.date = convertTimeToMs(expense.date);\n        expense.updateDate = convertTimeToMs(expense.updateDate);\n        if (expense.tag === 'Expense') {\n            requestBody = {\n                query: `\n                          mutation UpdateExpense($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateExpense(expenseId: $id, expenseInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        } else {\n            requestBody = {\n                query: `\n                          mutation UpdateIncome($id: ID!, $title: String!, $description: String, $price: String!, $group: String!, $createdAt: String!, $updatedAt: String! ) {\n                            updateIncome(incomeId: $id, incomeInput:{title: $title, description: $description, price: $price, group:$group, createdAt:$createdAt, updatedAt: $updatedAt}) {\n                                _id\n                                title\n                                price\n                                createdAt\n                                updatedAt\n                                description\n                                group\n                                creatorId\n                              }\n                          }\n                        `,\n                variables: {\n                    id: expense.id,\n                    title: expense.title,\n                    description: expense.description,\n                    price: expense.price,\n                    group: expense.group,\n                    createdAt: expense.date,\n                    updatedAt: expense.updateDate\n                }\n            };\n        }\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let updatedAllList = [];\n                if (res.data.updateExpense) {\n                    res.data.updateExpense.tag = 'Expense';\n                    console.log(res.data.updateExpense);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateExpense);\n                    modalInfo(true, 'Confirmation', 'Expense was updated');\n                } else {\n                    res.data.updateIncome.tag = 'Income';\n                    console.log(res.data.updateIncome);\n                    updatedAllList = updateArrayAfterUpdate(res.data.updateIncome);\n                    modalInfo(true, 'Confirmation', 'Income was updated');\n                }\n                setAllExpenses(updatedAllList);\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const convertTimeToMs = time => {\n        return JSON.stringify(moment(time).valueOf());\n    };\n\n    const sortByDate = arrayWithDate => {\n        arrayWithDate.sort(function (a, b) {\n            a = moment(a.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            b = moment(b.createdAt, 'x').format('DD-MM-YYYY').split('-').reverse().join('');\n            return a.localeCompare(b);\n        });\n        return arrayWithDate;\n    };\n\n    const addTag = (array, tag) => {\n        array.forEach(e => {\n            e.tag = tag;\n        });\n        return array;\n    };\n\n    const updateArrayAfterUpdate = updateElement => {\n        let newArray = [];\n        allExpenses.map(expense => {\n            if (expense._id === updateElement._id) {\n                expense = updateElement;\n                newArray.push(expense);\n            } else {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const updateArrayAfterRemove = updateElement => {\n        let newArray = [];\n        allExpenses.forEach(expense => {\n            if (expense._id !== updateElement._id) {\n                newArray.push(expense);\n            }\n        });\n        return newArray = sortByDate(newArray);\n    };\n\n    const getAll = async () => {\n        let allSettings = [];\n        if (!settings.length) {\n            allSettings = await getSettingsData();\n        } else {\n            allSettings = settings;\n        }\n        let allUsers = [];\n        allSettings.forEach(setting => {\n            allUsers.push(setting.creatorId);\n        });\n        let expenses = await getExpenseList(allUsers);\n        let incomes = await getIncomeList(allUsers);\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    const getAllOnFilter = async values => {\n        let allUsers = [];\n        settings.forEach(setting => {\n            allUsers.push(setting.creatorId);\n        });\n        let expenses = await onFilterExpenses(values, allUsers);\n        let incomes = await onFilterIncomes(values, allUsers);\n        let all = expenses.concat(incomes);\n        all = sortByDate(all);\n        setAllExpenses(all);\n    };\n\n    return (\n        <ExpensesContext.Provider value={{ currentUser, allExpenses, setAllExpenses, removeExpense, updateExpense, isLoading, getAllOnFilter, getAll, showMore, setShowMore, submitExpenseFromImport, settings}}>\n            <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, showModal, submitExpense, setShowModal, modalInfo, showImportModal, setShowIportModal }}>\n                <Filter />\n                <SmallStatistics />\n                {\n                    isLoading ? <Spinner /> :\n                        <Fragment>\n                            <InfoModal />\n                            <ImportModal/>\n                            <div className='center'>\n                                <ExpenseList />\n                            </div>\n                        </Fragment>\n                }\n            </ModalContext.Provider>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport moment from 'moment';\nimport ModalContext from '../context/modal-context';\nimport InfoModal from '../components/Modal/Modal';\nimport Spinner from '../components/Spinner/Spinner';\nimport { FiUser, FiSettings } from \"react-icons/fi\";\nimport { FaRegTimesCircle } from \"react-icons/fa\";\nimport './Settings.css';\n\nimport AuthContext from '../context/auth-context';\n\nconst Settings = () => {\n    let [err, setErr] = useState({\n        newCategorie: false,\n        newMember: false,\n        emailValidation: false\n    });\n    let [categories, setCategories] = useState([]);\n    let [members, setMembers] = useState([]);\n    let currentUser = AuthContext._currentValue;\n    let [userData, setUserData] = useState({});\n    let [editableUserData, setEditableUserData] = useState({});\n    let [settingsData, setSettingsData] = useState({});\n    let [isLoading, setIsLoading] = useState(false);\n\n    let [showInfoModal, setShowInfoModal] = useState(false);\n    let [modalHeader, setModalHeader] = useState('');\n    let [modalText, setModalText] = useState();\n\n    const modalInfo = (show, header, text) => {\n        setShowInfoModal(show);\n        setModalHeader(header);\n        setModalText(text);\n    };\n\n    const [key, setKey] = useState('systemSettings');\n\n    useEffect(() => {\n        getUserData();\n        getSettingsData();\n    }, []);\n\n    const getUserData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                userData {\n                    _id\n                    email\n                    name\n                    surname\n                    createdAt\n                    updatedAt\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setUserData(resData.data.userData[0]);\n                setEditableUserData(resData.data.userData[0]);\n                setIsLoading(false);\n                return resData.data.expenses;\n\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateUser = (fields) => {\n        fields.updatedAt = JSON.stringify(moment(new Date()).valueOf());\n\n        setIsLoading(true);\n        let requestBody = {\n            query: `\n\n                              mutation UpdateUser($id: ID!, $name: String!, $surname: String!, $email: String!, $updatedAt: String!) {\n                                updateUser(userId: $id, name: $name, surname: $surname, email: $email, updatedAt: $updatedAt) {\n                                    name\n                                    surname\n                                    email\n                                  }\n                              }\n                            `,\n            variables: {\n                id: userData._id,\n                name: fields.firstName,\n                surname: fields.lastName,\n                email: fields.email,\n                updatedAt: fields.updatedAt\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                console.log(res);\n                setEditableUserData(res.data.updateUser);\n                modalInfo(true, 'Confirmation', 'User was updated');\n                setIsLoading(false);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n\n\n    const getSettingsData = () => {\n        setIsLoading(true);\n        const requestBody = {\n            query: `\n              query {\n                settingsData {\n                    _id\n                    dailyBudget\n                    weeklyBudget\n                    monthlyBudget\n                    categories\n                    members\n                    currency\n                    creatorEmail\n                  }\n              }`\n        };\n        return fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                setIsLoading(false);\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                let membersList = [];\n                setSettingsData(resData.data.settingsData[0]);\n                setCategories(resData.data.settingsData[0].categories.split(';'));\n                resData.data.settingsData[0].members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n            })\n            .catch(err => {\n                setIsLoading(false);\n                modalInfo(true, 'Error', err);\n                console.log(err);\n                return err;\n            });\n    };\n\n    const updateSettings = (fields) => {\n        setIsLoading(true);\n        let allMemebers = '';\n        let allCategories = '';\n\n        categories.forEach((category, i) => {\n            if (categories.length != i + 1) {\n                allCategories += `${category};`;\n            } else {\n                allCategories += category;\n            }\n        });\n        if (members.length) {\n            members.forEach((member, i) => {\n                if (members.length != i + 1) {\n                    allMemebers += `${member};`;\n                } else {\n                    allMemebers += member;\n                }\n            });\n        }\n\n        let requestBody = {\n            query: `\n\n                              mutation UpdateSettings($id: ID!, $dailyBudget: String!, $weeklyBudget: String!, $monthlyBudget: String!, $categories: String!, $members: String!, $currency: String!) {\n                                updateSettings(settingsId: $id, dailyBudget: $dailyBudget, weeklyBudget: $weeklyBudget, monthlyBudget: $monthlyBudget, categories: $categories, members: $members, currency: $currency) {\n                                    _id\n                                    dailyBudget\n                                    weeklyBudget\n                                    monthlyBudget\n                                    categories\n                                    members\n                                    currency\n                                  }\n                              }\n                            `,\n            variables: {\n                id: settingsData._id,\n                dailyBudget: fields.dailyBudget,\n                weeklyBudget: fields.weeklyBudget,\n                monthlyBudget: fields.monthlyBudget,\n                categories: allCategories,\n                members: allMemebers,\n                currency: fields.currency\n            }\n        };\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + currentUser.token\n            }\n        })\n            .then(res => {\n                if (!res.ok) {\n                    setIsLoading(false);\n                    throw (res.statusText);\n                }\n                return res.json();\n            })\n            .then(res => {\n                if (res.errors) {\n                    throw (res.errors[0].message);\n                }\n                let membersList = [];\n                setSettingsData(res.data.updateSettings);\n                setCategories(res.data.updateSettings.categories.split(';'));\n                res.data.updateSettings.members.split(';').forEach(e => {\n                    if (e.length) {\n                        membersList.push(e);\n                    }\n                });\n                setMembers(membersList);\n                setIsLoading(false);\n                modalInfo(true, 'Confirmation', 'Settings was updated');\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n                modalInfo(true, 'Error', err);\n                throw err;\n            });\n    };\n\n    const validatePrice = (event) => {\n        let price = event.target.value;\n        if (price.length === 1 && price === '.') {\n            price = price.slice(0, -1);\n        }\n        if (price.length === 2 && price === '00') {\n            price = price.slice(0, -1);\n        }\n        if (price.split('.').length - 1 > 1) {\n            price = price.slice(0, -1);\n        }\n        price = (price.indexOf('.') >= 0) ? (price.substr(0, price.indexOf('.')) + price.substr(price.indexOf('.'), 3)) : price;\n        return price.replace(/[^\\d.-]/g, '').replace('-', '');\n    };\n\n    const addCategory = (event, oldCategory) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newCategorie: true });\n            return oldCategory;\n        } else {\n            event.target.value = event.target.value.toLowerCase();\n            let newCategory = event.target.value.charAt(0).toUpperCase() + event.target.value.slice(1);\n            let found = false;\n            categories.forEach(category => {\n                if (category === newCategory) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This category already in the category list.');\n            } else {\n                setCategories([...categories, newCategory]);\n            }\n        }\n    };\n\n    const removeCategory = category => {\n        if (categories.length === 1) {\n            modalInfo(true, 'Error', 'You can\\'t delete all categories.');\n        } else {\n            setCategories(categories.filter(item => item !== category));\n        }\n    };\n\n    const clearCategory = event => {\n        return '';\n    };\n\n    const emitChangesToCategory = event => {\n        if (err.newCategorie) {\n            setErr({ ...err, newCategorie: false });\n        }\n        return event.target.value.replace(/[//|/;&$%@\"<>()+{}.',=_~`!#^*/?]/g, '');\n    };\n\n    const addMember = (event, oldMember, error) => {\n        if (event.target.value === undefined || !event.target.value.length) {\n            setErr({ ...err, newMember: true, emailValidation: false });\n            return oldMember;\n        } else if (error.newMember) {\n            setErr({ ...err, emailValidation: true });\n        } else {\n            let newMember = event.target.value.toLowerCase();\n            let found = false;\n            members.forEach(member => {\n                if (member === newMember) {\n                    found = true;\n                }\n            });\n            if (found) {\n                modalInfo(true, 'Error', 'This member already in the members list.');\n            } else {\n                setMembers([...members, newMember]);\n            }\n        }\n    };\n\n    const removeMember = member => {\n        setMembers(members.filter(item => item !== member));\n    };\n\n    const clearMember = event => {\n        return '';\n    };\n\n    const emitChangesToMember = event => {\n        if (err.emailValidation) {\n            setErr({ ...err, emailValidation: false });\n        }\n        if (err.newMember) {\n            setErr({ ...err, newMember: false });\n        }\n        return event.target.value.replace(/[//|/;&$%\"<>()+{}',=~`!#^*/?]/g, '');\n    };\n\n    return (\n        isLoading ? <Spinner /> :\n            <Fragment>\n                <ModalContext.Provider value={{ showInfoModal, setShowInfoModal, modalHeader, modalText, modalInfo }}>\n                    <InfoModal />\n                    <Tabs id=\"settings-tab\" activeKey={key} onSelect={k => setKey(k)}>\n                        <Tab eventKey=\"userSettings\" title={key === 'userSettings' ? <span style={{ color: '#ea97c4' }}><FiUser size={20} />&nbsp; User </span> :\n                            <span><FiUser size={20} color={'#aeaeae'} />&nbsp; User </span>}>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{\n                                    firstName: editableUserData.name || '',\n                                    lastName: editableUserData.surname || '',\n                                    email: editableUserData.email || '',\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    firstName: Yup.string()\n                                        .required('First Name is required'),\n                                    lastName: Yup.string()\n                                        .required('Last Name is required'),\n                                    email: Yup.string()\n                                        .email('Email is invalid')\n                                        .required('Email is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateUser(fields);\n                                }}\n                                render={({ errors, touched }) => (\n                                    <Form className=\"settings-form\" id=\"formContentUserSettings\">\n                                        <div className=\"p-2\">\n                                            <h4>User settings</h4>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"firstName\">First Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"First name\" name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"lastName\">Last Name</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Last name\" name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group row\">\n                                            <label className=\"col-sm-4 col-form-label\" htmlFor=\"email\">Email</label>\n                                            <div className=\"col-sm-8\">\n                                                <Field placeholder=\"Email\" name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                        <Tab eventKey=\"systemSettings\" title={key === 'systemSettings' ? <span style={{ color: '#ea97c4' }}><FiSettings size={20} />&nbsp; System </span> :\n                            <span><FiSettings size={20} color={'#aeaeae'} />&nbsp; System </span>}>\n                            <Formik\n                                validateOnChange\n                                enableReinitialize={true}\n                                initialValues={{\n                                    dailyBudget: settingsData.dailyBudget || '',\n                                    weeklyBudget: settingsData.weeklyBudget || '',\n                                    monthlyBudget: settingsData.monthlyBudget || '',\n                                    categories: settingsData.categories || '',\n                                    newCategorie: '',\n                                    newMember: '',\n                                    members: settingsData.members || '',\n                                    currency: settingsData.currency || ''\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    dailyBudget: Yup.number(),\n                                    weeklyBudget: Yup.number(),\n                                    monthlyBudget: Yup.number(),\n                                    categories: Yup.string(),\n                                    newCategorie: Yup.string(),\n                                    memebers: Yup.string()\n                                        .email('Email is invalid'),\n                                    newMember: Yup.string()\n                                        .email('Email is invalid'),\n                                    currency: Yup.string()\n                                        .required('Currency is required'),\n                                })}\n                                onSubmit={fields => {\n                                    updateSettings(fields);\n                                }}\n                                render={({ errors, values, touched, handleChange, setFieldValue, handleBlur, validateField }) => (\n                                    <Form id=\"formContentSystemSettings\">\n                                        <div className=\"form-group row col-sm-12\" style={{ paddingTop: '25px' }}>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Budget settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Daily budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group \">\n                                                            <input placeholder=\"0.00\" name=\"dailyBudget\" onChange={e => { setFieldValue('dailyBudget', validatePrice(e)); }} value={values.dailyBudget} className={'form-control' + (errors.dailyBudget && touched.dailyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"dailyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Weekly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"weeklyBudget\" onChange={e => { setFieldValue('weeklyBudget', validatePrice(e)); }} value={values.weeklyBudget} className={'form-control' + (errors.weeklyBudget && touched.weeklyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"weeklyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Monthly budget</label>\n                                                    <div className=\"col-sm-5\">\n                                                        <div className=\"input-group mb-2 mr-sm-2\">\n                                                            <input placeholder=\"0.00\" name=\"monthlyBudget\" onChange={e => { setFieldValue('monthlyBudget', validatePrice(e)); }} value={values.monthlyBudget} className={'form-control' + (errors.monthlyBudget && touched.monthlyBudget ? ' is-invalid' : '')} />\n                                                            <div className=\"input-group-append\">\n                                                                {\n                                                                    values.currency === 'GBD' ? <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&pound;</span></div> : values.currency === 'Dollar' ?\n                                                                        <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >$</span></div> : <div className=\"input-group-text\"><span style={{ fontSize: '15px' }} >&euro;</span></div>\n                                                                }\n                                                            </div>\n                                                            <ErrorMessage name=\"monthlyBudget\" component=\"div\" className=\"invalid-feedback\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-5\" htmlFor=\"title\">Currency</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <select name=\"currency\" onChange={handleChange}\n                                                            onBlur={handleBlur} value={values.currency} className={'custom-select mr-sm-2 form-control' + (errors.currency && touched.currency ? ' is-invalid' : '')} id=\"inlineFormCustomSelect\">\n                                                            <option value=\"\">Select a currency</option>\n                                                            <option value=\"Euro\">Euro &euro;</option>\n                                                            <option value=\"Dollar\">Dollar $</option>\n                                                            <option value=\"GBD\">Pound &pound;</option>\n                                                        </select>\n                                                        <ErrorMessage name=\"currency\" component=\"div\" className=\"invalid-feedback\" />\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Categories settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add category</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Category name\" name=\"newCategorie\" onChange={e => { setFieldValue('newCategorie', emitChangesToCategory(e)); }} value={values.newCategorie} className={'form-control col-sm-8 mr-1' + (err.newCategorie ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => { setFieldValue('categories', addCategory(e, values.categories)); setFieldValue('newCategorie', clearCategory(e)); }} value={values.newCategorie} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newCategorie\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newCategorie ? <div className=\"invalid-feedback\"> Category field can't be empty</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">All categories</label>\n                                                    <div className=\"col-sm-8\">\n                                                        <ul className=\"list-group col-sm-9\">\n                                                            {\n                                                                categories.map((category) => (\n                                                                    <li className='row' key={category}>\n                                                                        <span className='list-group-item list-item col-sm-12'>{category}\n                                                                            <button className='btn card_removeButton' type='button' onClick={() => removeCategory(category)}>\n                                                                                <i><FaRegTimesCircle size={20} /></i>\n                                                                            </button>\n                                                                        </span>\n                                                                    </li>\n                                                                ))\n                                                            }\n                                                        </ul>\n\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"col-sm-4 \">\n                                                <div className=\"p-2 settings-form\">\n                                                    <h4>Fammily settings</h4>\n                                                </div>\n                                                <div className=\"form-group row\">\n                                                    <label className=\"col-sm-4\" htmlFor=\"title\">Add member</label>\n                                                    <div className=\"col-sm-6\">\n                                                        <div className=\"form-group row\">\n                                                            <input placeholder=\"Member email\" name=\"newMember\" onChange={e => { setFieldValue('newMember', emitChangesToMember(e)); }} value={values.newMember} className={'form-control col-sm-8 mr-1' + (err.newMember || err.emailValidation ? ' is-invalid' : '')} />\n                                                            <button type=\"button\" onClick={e => {  setFieldValue('members', addMember(e, values.members, errors)); setFieldValue('newMember', clearMember(e)); }} value={values.newMember} className=\"col-sm-3 btn btn_main\">Add</button>\n                                                            <ErrorMessage name=\"newMember\" component=\"div\" className=\"invalid-feedback\" />\n                                                            {err.newMember ? <div className=\"invalid-feedback\"> Memeber field can't be empty</div> : null}\n                                                            {err.emailValidation ? <div className=\"invalid-feedback\">Email is invalid</div> : null}\n                                                        </div>\n\n                                                    </div>\n                                                </div>\n                                                {\n                                                    members.length ? <div className=\"form-group row\">\n                                                        <label className=\"col-sm-4\" htmlFor=\"title\">All memebers</label>\n                                                        <div className=\"col-sm-8\">\n                                                            <ul className=\"list-group col-sm-9\">\n                                                                {\n                                                                    members.map((member) => (\n                                                                        <li className='row' key={member}>\n                                                                            <span className='list-group-item list-item col-sm-12'>{member}\n                                                                                <button className='btn card_removeButton' type='button' onClick={() => removeMember(member)}>\n                                                                                    <i><FaRegTimesCircle size={20} /></i>\n                                                                                </button>\n                                                                            </span>\n                                                                        </li>\n                                                                    ))\n                                                                }\n                                                            </ul>\n                                                        </div>\n                                                    </div> : null\n                                                }\n                                            </div>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <button type=\"submit\" className=\"btn btn_main update-btn\">Update</button>\n                                        </div>\n                                    </Form>\n                                )}\n                            />\n                        </Tab>\n                    </Tabs>\n                </ModalContext.Provider>\n            </Fragment>\n    );\n};\n\nexport { Settings as default };\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { GiHamburgerMenu, GiPiggyBank } from \"react-icons/gi\";\nimport { FaUser } from \"react-icons/fa\";\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n    <AuthContext.Consumer>\n        {context => {\n            return (\n                <Fragment>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand as={Link} to=\"/\">\n                            <GiPiggyBank size={40} className=\"main-navigation__logo\" />\n                            {'Budget planner'}\n                        </Navbar.Brand>\n                        <Nav className=\"main-navigation__items\">\n                            {!context.token && (\n                                <li>\n                                    <Nav.Link as={Link} to=\"/auth\">Sign in</Nav.Link>\n                                </li>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><FaUser size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    <NavDropdown.Item as={Link} to=\"/settings\">Settings</NavDropdown.Item>\n                                    <NavDropdown.Divider />\n                                    <NavDropdown.Item onClick={context.logout}>Logout</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n\n                            {context.token && (\n                                <NavDropdown alignRight title={\n                                    <span><GiHamburgerMenu size={25} /></span>\n                                } id=\"collasible-nav-dropdown\">\n                                    {/* <NavDropdown.Item as={Link} to=\"/events\">Events</NavDropdown.Item>\n                                    <NavDropdown.Item as={Link} to=\"/bookings\">Bookings</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/expenses\">Expenses</NavDropdown.Item>\n                                    {/* <NavDropdown.Item as={Link} to=\"/incomes\">Incomes</NavDropdown.Item> */}\n                                    <NavDropdown.Item as={Link} to=\"/statistics\">Statistics</NavDropdown.Item>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar>\n                </Fragment>\n            );\n        }}\n    </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport Expenses from './pages/Expenses';\nimport Settings from './pages/Settings';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n      fetch('/removeCookie', {\n          method: 'GET',\n          credentials: \"same-origin\",\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      }).then(res => res.json())\n          .then(data => {\n            console.log(data.response.message);\n          })\n          .catch(err => {\n              console.log(err);\n          });\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n                <Switch>\n                  <Route path=\"/test\" component={TestPage} />\n                  {this.state.token && (\n                <Route path=\"/expenses\" component={Expenses} />\n                )}\n                {this.state.token && <Redirect from=\"/\" to=\"/expenses\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/expenses\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                  )}\n                {this.state.token && (\n                  <Route path=\"/settings\" component={Settings} />\n                )}\n                  {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}