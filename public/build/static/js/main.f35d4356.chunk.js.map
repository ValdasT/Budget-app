{"version":3,"sources":["context/auth-context.js","components/Spinner/Spinner.js","pages/Auth.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingsChart/BookingsChart.js","components/Bookings/BookingsControls/BookingsControls.js","pages/Bookings.js","components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","pages/Events.js","context/test-context.js","components/OneTest/OneTest.js","pages/Test.js","reducers/expenses.js","context/expenses-context.js","components/Expenses/ExpensesList/Expense/Expense.js","components/Expenses/ExpensesList/ExpensesList.js","components/Modal/Modal2.js","components/Expenses/AddExpense/AddExpense.js","pages/Expenses.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","login","tokenExpiration","logout","spinner","react_default","a","createElement","className","AuthPage","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","name","setName","_useState7","_useState8","surname","setSurname","_useState9","_useState10","isLogin","setisLogin","_useState11","_useState12","isLoading","setIsLoading","useContext","AuthContext","react","Spinner_Spinner","id","onSubmit","event","preventDefault","query","variables","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","status","Error","json","console","log","data","catch","err","htmlFor","type","placeholder","value","onChange","e","target","required","onClick","bookingList","props","bookings","map","booking","key","_id","title","Date","createdAt","toLocaleDateString","onDelete","bind","BOOKINGS_BUCKETS","Cheap","min","max","Normal","Expensive","bookingsChart","chartData","labels","datasets","values","_loop","bucket","filteredBookingsCount","reduce","prev","current","price","push","fillColor","strokeColor","highlightFill","highlightStroke","toConsumableArray","length","style","textAlign","react_chartjs","bookingsControl","activeOutputType","BookingsPage","state","outputType","fetchBookings","_this","setState","Authorization","context","resData","deleteBookingHandler","bookingId","requestBody","prevState","filter","changeOutputTypeHandler","this","content","Fragment","BookingsControls_BookingsControls","BookingList_BookingList","BookingsChart","Component","contextType","modal","children","canCancel","onCancel","canConfirm","onConfirm","confirmText","backdrop","eventItem","eventId","date","creatorId","onDetail","eventList","events","EventItem_EventItem","authUserId","creator","onViewDetail","EventsPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","creating","selectedEvent","isActive","startCreateEventHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","trim","desc","updatedEvents","createEvent","modalCancelHandler","showDetailHandler","find","bookEventHandler","createRef","fetchEvents","_this2","Backdrop_Backdrop","Modal_Modal","ref","rows","EventList_EventList","TestContext","OneTest","_useContext","count","fruit","dataFromDb","lenght","Example","myQuery","gql","Test_templateObject","show","setshow","setCount","setFruit","setdataFromDb","fruitPicker","frutList","Math","floor","random","useEffect","document","concat","Provider","OneTest_OneTest","react_apollo_esm","_ref","loading","allFiles","disabled","expensesReducer","action","expenses","expense","expensesContext","Expense","dispatch","ExpensesContext","Expenselist","Expense_Expense_Expense","Modal2","startAdd","cancelButton","AddExpenseForm","setTitle","setBody","setStartAdd","Modal2_Modal2","Expenses","_useReducer","useReducer","_useReducer2","parse","localStorage","getItem","setItem","AddExpense_AddExpenseForm","ExpensesList_Expenselist","mainNavigation","auth_context","Consumer","NavLink","to","client","ApolloClient","uri","App","BrowserRouter","Navigation_MainNavigation","Switch","Route","path","component","TestPage","Redirect","from","exact","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.f35d4356.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    token: null,\n    userId: null,\n    login: (token, userId, tokenExpiration) => {},\n    logout: () => {}\n});","import React from 'react';\n\nimport './Spinner.css';\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default spinner;\n","import React, { useState, Fragment, useContext } from 'react';\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\nimport Spinner from '../components/Spinner/Spinner';\n// import { Query } from 'react-apollo';\n// import gql from 'graphql-tag';\n\nconst AuthPage = () => {\n    let [email, setEmail] = useState('');\n    let [password, setPassword] = useState('');\n    let [name, setName] = useState('');\n    let [surname, setSurname] = useState('');\n    let [isLogin, setisLogin] = useState(false);\n    let [isLoading, setIsLoading] = useState(false);\n\n    const { login} = useContext(AuthContext);\n\n    \n \n\n    const switchModeHandler = () => {\n        return setisLogin(!isLogin);\n    };\n\n    const submitHandler = (event) => {\n        setIsLoading(true);\n        event.preventDefault();\n        let query = {\n            query: `\n              query Login($email: String!, $password: String!) {\n                login(email: $email, password: $password) {\n                  userId\n                  token\n                  tokenExpiration\n                }\n              }\n            `,\n            variables: {\n                email: email,\n                password: password\n            }\n        };\n        if (isLogin) {\n            query = {\n                query: `\n            mutation CreateUser($email: String!, $password: String!, $name: String!, $surname: String!) {\n              createUser(userInput: {email: $email, password: $password, name: $name, surname: $surname}) {\n                _id\n                email\n              }\n            }\n          `,\n                variables: {\n                    email: email,\n                    password: password,\n                    name: name,\n                    surname: surname\n                }\n            };\n        }\n\n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(query),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    setIsLoading(false);\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(res => {\n                setIsLoading(false);\n                console.log(res.data);\n                if (res.data.login) {\n                    login(\n                        res.data.login.token,\n                        res.data.login.userId,\n                        res.data.login.tokenExpiration,\n\n                    );\n                }\n            })\n            .catch(err => {\n                setIsLoading(false);\n                console.log(err);\n            });\n    };\n\n    return (\n        <Fragment>\n            {\n                isLoading ? <Spinner /> :\n            \n                    <form className=\"auth-form\" id=\"formContent\" onSubmit={submitHandler}>\n                        <div className=\"p-2\">\n                            {\n                                isLogin ? <h4>Create account</h4> : <h4>Sign in</h4>\n                            }\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"email\" className=\"col-sm-3 col-form-label\">Email:</label>\n                            <div className=\"col-sm-9\">\n                                <input type=\"text\" placeholder=\"Email\" className=\"form-control\" id=\"email\"\n                                    value={email} onChange={e => setEmail(e.target.value)} required\n                                />\n                            </div>\n                        </div>\n                        <Fragment>\n                            {isLogin ? <Fragment>\n                                <div className=\"form-group row\">\n                                    <label htmlFor=\"name\" className=\"col-sm-3 col-form-label\">Name:</label>\n                                    <div className=\"col-sm-9\">\n                                        <input type=\"text\" placeholder=\"Name\" className=\"form-control\" id=\"name\"\n                                            value={name} onChange={e => setName(e.target.value)} required\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"form-group row\">\n                                    <label htmlFor=\"surname\" className=\"col-sm-3 col-form-label\">Surname:</label>\n                                    <div className=\"col-sm-9\">\n                                        <input type=\"text\" placeholder=\"Surname\" className=\"form-control\" id=\"surname\"\n                                            value={surname} onChange={e => setSurname(e.target.value)} required\n                                        />\n                                    </div>\n                                </div>\n                            </Fragment>\n                                : null\n                            }\n                        </Fragment>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"password\" className=\"col-sm-3 col-form-label\">Password:</label>\n                            <div className=\"col-sm-9\">\n                                <input type=\"password\" placeholder=\"Password\" className=\"form-control\" id=\"password\"\n                                    value={password} onChange={e => setPassword(e.target.value)} required\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-actions\">\n                            <button className=\"btn btn-primary mr-2\" type=\"submit\">Submit</button>\n                            <button className=\"btn btn-primary\" type=\"button\" onClick={switchModeHandler}>\n                                {!isLogin ? 'Sign up' : 'Sign in'}\n                            </button>\n                        </div>\n                    </form>\n            }\n        </Fragment>\n    );\n};\n\nexport default AuthPage;\n\n// class AuthPage extends Component {\n//   state = {\n//     isLogin: true\n//   };\n\n//   static contextType = AuthContext;\n\n//   constructor(props) {\n//     super(props);\n//     this.emailEl = React.createRef();\n//     this.passwordEl = React.createRef();\n//   }\n\n//   switchModeHandler = () => {\n//     this.setState(prevState => {\n//       return { isLogin: !prevState.isLogin };\n//     });\n//   };\n\n//   submitHandler = event => {\n//     event.preventDefault();\n//     const email = this.emailEl.current.value;\n//     const password = this.passwordEl.current.value;\n\n//     if (email.trim().length === 0 || password.trim().length === 0) {\n//       return;\n//     }\n\n//     let requestBody = {\n//       query: `\n//         query Login($email: String!, $password: String!) {\n//           login(email: $email, password: $password) {\n//             userId\n//             token\n//             tokenExpiration\n//           }\n//         }\n//       `,\n//       variables: {\n//         email: email,\n//         password: password\n//       }\n//     };\n\n//     if (!this.state.isLogin) {\n//       requestBody = {\n//         query: `\n//           mutation CreateUser($email: String!, $password: String!) {\n//             createUser(userInput: {email: $email, password: $password}) {\n//               _id\n//               email\n//             }\n//           }\n//         `,\n//         variables: {\n//           email: email,\n//           password: password\n//         }\n//       };\n//     }\n\n//     fetch('http://localhost:8000/graphql', {\n//       method: 'POST',\n//       body: JSON.stringify(requestBody),\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     })\n//       .then(res => {\n//         if (res.status !== 200 && res.status !== 201) {\n//           throw new Error('Failed!');\n//         }\n//         return res.json();\n//       })\n//       .then(resData => {\n//         if (resData.data.login.token) {\n//           this.context.login(\n//             resData.data.login.token,\n//             resData.data.login.userId,\n//             resData.data.login.tokenExpiration\n//           );\n//         }\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       });\n//   };\n\n//   render() {\n//     return (\n//       <form className=\"auth-form\" onSubmit={this.submitHandler}>\n//         <div className=\"form-control\">\n//           <label htmlFor=\"email\">E-Mail</label>\n//           <input type=\"email\" id=\"email\" ref={this.emailEl} />\n//         </div>\n//         <div className=\"form-control\">\n//           <label htmlFor=\"password\">Password</label>\n//           <input type=\"password\" id=\"password\" ref={this.passwordEl} />\n//         </div>\n//         <div className=\"form-actions\">\n//           <button type=\"submit\">Submit</button>\n//           <button type=\"button\" onClick={this.switchModeHandler}>\n//             Switch to {this.state.isLogin ? 'Signup' : 'Login'}\n//           </button>\n//         </div>\n//       </form>\n//     );\n//   }\n// }\n\n\n\n\n\n\n\n\n        //=========================================================\n        //     const loginQuery = gql`\n//     query login($email: String!, $password: String!) {\n//       login(email: $email, password: $password) {\n//         userId\n//         token\n//         tokenExpiration\n//       }\n//     }\n//   `;\n\n\n    //     let requestBody = {\n    //         query: `\n    //     query Login($email: String!, $password: String!) {\n    //       login(email: $email, password: $password) {\n    //         userId\n    //         token\n    //         tokenExpiration\n    //       }\n    //     }\n    //   `,\n    //         variables: {\n    //             email: email,\n    //             password: password\n    //         }\n    //     };\n    //     fetch('/graphql', {\n    //         method: 'POST',\n    //         body: JSON.stringify(requestBody),\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //         }\n    //     })\n    //         .then(res => {\n    //             if (res.status !== 200 && res.status !== 201) {\n    //                 throw new Error('Failed!');\n    //             }\n    //             return res.json();\n    //         })\n    //         .then(resData => {\n    //             console.log(resData.data.login.token);\n    //             // if (resData.data.login.token) {\n    //             //   this.context.login(\n    //             //     resData.data.login.token,\n    //             //     resData.data.login.userId,\n    //             //     resData.data.login.tokenExpiration\n    //             //   );\n    //             // }\n    //         })\n    //         .catch(err => {\n    //             console.log(err);\n    //         });\n    // };\n\n            // setshow(show = (\n            //     <Query query={loginQuery} variables={{ email: email, password: password }}>\n            //         {({ loading, error, data }) => {\n            //             if (loading) return \"Loading...\";\n            //             if (error) return `Error! ${error.message}`;\n            //             if (data) {\n            //                 { console.log(data.login) }\n            //                 return (\n            //                     <Fragment>\n            //                         {\n            //                             // <div>SUCssses</div>\n            //                             AuthContext._currentValue.login(                               \n            //                                 data.login.token,\n            //                                 data.login.userId,\n            //                                 data.login.tokenExpiration,\n\n            //                             )\n                                        \n            //                             // data.login.map(e => (\n            //                             //     <div key={e._id}>{e._id}</div>\n            //                             // ))\n            //                         }\n                                    \n            //                     </Fragment>\n            //                 );\n            //             }\n            //         }\n            //         }\n            //     </Query>\n            //     ));\n        \n            //===============================================\n","import React from 'react';\n\nimport './BookingList.css';\n\nconst bookingList = props => (\n  <ul className=\"bookings__list\">\n    {props.bookings.map(booking => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\n          </div>\n        </li>\n      );\n    })}\n  </ul>\n);\n\nexport default bookingList;\n","import React from 'react';\nimport { Bar as BarChart } from 'react-chartjs';\n\nconst BOOKINGS_BUCKETS = {\n  Cheap: {\n    min: 0,\n    max: 100\n  },\n  Normal: {\n    min: 100,\n    max: 200\n  },\n  Expensive: {\n    min: 200,\n    max: 10000000\n  }\n};\n\nconst bookingsChart = props => {\n  const chartData = { labels: [], datasets: [] };\n  let values = [];\n  for (const bucket in BOOKINGS_BUCKETS) {\n    const filteredBookingsCount = props.bookings.reduce((prev, current) => {\n      if (\n        current.event.price > BOOKINGS_BUCKETS[bucket].min &&\n        current.event.price < BOOKINGS_BUCKETS[bucket].max\n      ) {\n        return prev + 1;\n      } else {\n        return prev;\n      }\n    }, 0);\n    values.push(filteredBookingsCount);\n    chartData.labels.push(bucket);\n    chartData.datasets.push({\n      // label: \"My First dataset\",\n      fillColor: 'rgba(220,220,220,0.5)',\n      strokeColor: 'rgba(220,220,220,0.8)',\n      highlightFill: 'rgba(220,220,220,0.75)',\n      highlightStroke: 'rgba(220,220,220,1)',\n      data: values\n    });\n    values = [...values];\n    values[values.length - 1] = 0;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <BarChart data={chartData} />\n    </div>\n  );\n};\n\nexport default bookingsChart;\n","import React from 'react';\n\nimport './BookingsControls.css';\n\nconst bookingsControl = props => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  );\n};\n\nexport default bookingsControl;\n","import React, { Component } from 'react';\n\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport BookingList from '../components/Bookings/BookingList/BookingList';\nimport BookingsChart from '../components/Bookings/BookingsChart/BookingsChart';\nimport BookingsControls from '../components/Bookings/BookingsControls/BookingsControls';\n\nclass BookingsPage extends Component {\n  state = {\n    isLoading: false,\n    bookings: [],\n    outputType: 'list'\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchBookings();\n  }\n\n  fetchBookings = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            bookings {\n              _id\n             createdAt\n             event {\n               _id\n               title\n               date\n               price\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const bookings = resData.data.bookings;\n        this.setState({ bookings: bookings, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  deleteBookingHandler = bookingId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          mutation CancelBooking($id: ID!) {\n            cancelBooking(bookingId: $id) {\n            _id\n             title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedBookings = prevState.bookings.filter(booking => {\n            return booking._id !== bookingId;\n          });\n          return { bookings: updatedBookings, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  changeOutputTypeHandler = outputType => {\n    if (outputType === 'list') {\n      this.setState({ outputType: 'list' });\n    } else {\n      this.setState({ outputType: 'chart' });\n    }\n  };\n\n  render() {\n    let content = <Spinner />;\n    if (!this.state.isLoading) {\n      content = (\n        <React.Fragment>\n          <BookingsControls\n            activeOutputType={this.state.outputType}\n            onChange={this.changeOutputTypeHandler}\n          />\n          <div>\n            {this.state.outputType === 'list' ? (\n              <BookingList\n                bookings={this.state.bookings}\n                onDelete={this.deleteBookingHandler}\n              />\n            ) : (\n              <BookingsChart bookings={this.state.bookings} />\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return <React.Fragment>{content}</React.Fragment>;\n  }\n}\n\nexport default BookingsPage;\n","import React from 'react';\n\nimport './Modal.css';\n\nconst modal = props => (\n  <div className=\"modal\">\n    <header className=\"modal__header\">\n      <h1>{props.title}</h1>\n    </header>\n    <section className=\"modal__content\">{props.children}</section>\n    <section className=\"modal__actions\">\n      {props.canCancel && (\n        <button className=\"btn\" onClick={props.onCancel}>\n          Cancel\n        </button>\n      )}\n      {props.canConfirm && (\n        <button className=\"btn\" onClick={props.onConfirm}>\n          {props.confirmText}\n        </button>\n      )}\n    </section>\n  </div>\n);\n\nexport default modal;\n","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = () => <div className=\"backdrop\"></div>;\n\nexport default backdrop;","import React from 'react';\n\nimport './EventItem.css';\n\nconst eventItem = props => (\n  <li key={props.eventId} className=\"events__list-item\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>Your the owner of this event.</p>\n      ) : (\n        <button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n);\n\nexport default eventItem;\n","import React from 'react';\n\nimport EventItem from './EventItem/EventItem';\nimport './EventList.css';\n\nconst eventList = props => {\n  const events = props.events.map(event => {\n    return (\n      <EventItem\n        key={event._id}\n        eventId={event._id}\n        title={event.title}\n        price={event.price}\n        date={event.date}\n        userId={props.authUserId}\n        creatorId={event.creator._id}\n        onDetail={props.onViewDetail}\n      />\n    );\n  });\n\n  return <ul className=\"event__list\">{events}</ul>;\n};\n\nexport default eventList;\n","import React, { Component } from 'react';\n\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport EventList from '../components/Events/EventList/EventList';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport './Events.css';\n\nclass EventsPage extends Component {\n  state = {\n    creating: false,\n    events: [],\n    isLoading: false,\n    selectedEvent: null\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  startCreateEventHandler = () => {\n    this.setState({ creating: true });\n  };\n\n  modalConfirmHandler = () => {\n    this.setState({ creating: false });\n    const title = this.titleElRef.current.value;\n    const price = +this.priceElRef.current.value;\n    const date = this.dateElRef.current.value;\n    const description = this.descriptionElRef.current.value;\n\n    if (\n      title.trim().length === 0 ||\n      price <= 0 ||\n      date.trim().length === 0 ||\n      description.trim().length === 0\n    ) {\n      return;\n    }\n\n    const event = { title, price, date, description };\n    console.log(event);\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $desc: String!, $price: Float!, $date: String!) {\n            createEvent(eventInput: {title: $title, description: $desc, price: $price, date: $date}) {\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n        variables: {\n          title: title,\n          desc: description,\n          price: price,\n          date: date\n        }\n    };\n\n    const token = this.context.token;\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevState => {\n          const updatedEvents = [...prevState.events];\n          updatedEvents.push({\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            price: resData.data.createEvent.price,\n            creator: {\n              _id: this.context.userId\n            }\n          });\n          return { events: updatedEvents };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, selectedEvent: null });\n  };\n\n  fetchEvents() {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            events {\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n                email\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const events = resData.data.events;\n        if (this.isActive) {\n          this.setState({ events: events, isLoading: false });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n      });\n  }\n\n  showDetailHandler = eventId => {\n    this.setState(prevState => {\n      const selectedEvent = prevState.events.find(e => e._id === eventId);\n      return { selectedEvent: selectedEvent };\n    });\n  };\n\n  bookEventHandler = () => {\n    if (!this.context.token) {\n      this.setState({ selectedEvent: null });\n      return;\n    }\n    console.log(this.state.selectedEvent)\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id) {\n              _id\n             createdAt\n             updatedAt\n            }\n          }\n        `,\n        variables: {\n          id: this.state.selectedEvent._id\n        }\n    };\n\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n        this.setState({ selectedEvent: null });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop />}\n        {this.state.creating && (\n          <Modal\n            title=\"Add Event\"\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form-control\">\n                <label htmlFor=\"title\">Title</label>\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"price\">Price</label>\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"date\">Date</label>\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  rows=\"4\"\n                  ref={this.descriptionElRef}\n                />\n              </div>\n            </form>\n          </Modal>\n        )}\n        {this.state.selectedEvent && (\n          <Modal\n            title={this.state.selectedEvent.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.bookEventHandler}\n            confirmText={this.context.token ? 'Book' : 'Confirm'}\n          >\n            <h1>{this.state.selectedEvent.title}</h1>\n            <h2>\n              ${this.state.selectedEvent.price} -{' '}\n              {new Date(this.state.selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{this.state.selectedEvent.description}</p>\n          </Modal>\n        )}\n        {this.context.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!</p>\n            <button className=\"btn\" onClick={this.startCreateEventHandler}>\n              Create Event\n            </button>\n          </div>\n        )}\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={this.state.events}\n            authUserId={this.context.userId}\n            onViewDetail={this.showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EventsPage;\n","import React from 'react';\n\nconst TestContext = React.createContext();\n\nexport { TestContext as default };","import React, { useState, useContext } from 'react';\nimport TestContext from '../../context/test-context';\n\nconst OneTest = () => {\n\n    const { count, fruit, dataFromDb } = useContext(TestContext);\n\n    let [name, setName] = useState('Baravykas');\n    return (\n        <div>\n            <p>Your name is {name} {count} {dataFromDb.lenght}</p>\n            <button className=\"btn\" onClick={() => setName(name = 'Johan')}>\n                Johan\n            </button>\n            <button className=\"btn\" onClick={() => setName(name = 'Perter')}>\n                Peter\n            </button>\n            <button className=\"btn\" onClick={() => setName((name = fruit))}>\n                Putin\n            </button>\n        </div>\n    );\n};\n\nexport { OneTest as default };","\nimport React, { useState, useEffect, Fragment } from 'react';\nimport OneTest from '../components/OneTest/OneTest';\nimport TwoTest from '../components/OneTest/TwoTest';\nimport TestContext from '../context/test-context';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst Example = () => {\n\n\n    const myQuery = gql`query {\n        allFiles {\n            _id\n            title\n            description\n          }\n      }`;\n\n    let [show, setshow] = useState(false);\n\n    let showChnge = () => {\n        setshow(show = <div>\n            <h1>----------------------</h1>\n            <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) return <h1>{err}</h1>;\n                        if (data) {\n                            { setFruit((fruit = fruitPicker())) }\n                            return (<Fragment >{\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query>\n            <h1>----------------------</h1>\n        </div>);\n    };\n    // Declare a new state variable, which we'll call \"count\"\n    let [count, setCount] = useState(0);\n    let [fruit, setFruit] = useState('Fakama');\n    let [dataFromDb, setdataFromDb] = useState([]);\n\n    const fruitPicker = () => {\n        let frutList = ['Banana', 'Abricot', 'Apple', 'Kiwi'];\n        let frutituti = frutList[Math.floor(Math.random() * frutList.length)];\n        return frutituti;\n    };\n\n    const tesFunction = value => {\n        console.log(value);\n    };\n\n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n        tesFunction(fruit);\n    }, [fruit]);\n\n    const clearMagick = () => {\n        setdataFromDb (dataFromDb = []);\n    };\n\n    const makemagick = () => {\n        const requestBody = {\n            query: `\n              query {\n                allFiles {\n                    _id\n                    title\n                    description\n                  }\n              }\n            `\n        };\n    \n        fetch('/graphql', {\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                if (res.status !== 200 && res.status !== 201) {\n                    throw new Error('Failed!');\n                }\n                return res.json();\n            })\n            .then(resData => {\n                setdataFromDb (dataFromDb=resData.data.allFiles);\n                console.log(dataFromDb);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    return (\n        <TestContext.Provider value={{ count, fruit, dataFromDb }}>\n            <OneTest />\n            {show}\n            <button onClick={() => { showChnge(); }}>Show?</button>\n            {/* <Query query={myQuery}>\n                {\n                    ({ loading, err, data }) => {\n                        if (loading) return <h1>Loading</h1>;\n                        if (err) console.log(err);\n                        if (data) {\n                            return (<Fragment>{\n\n                                data.allFiles.map(e => (\n                                    <div key={e._id}>{e._id}</div>\n                                    \n                                ))\n                            }</Fragment>);\n                        }\n\n                    }\n                }\n            </Query> */}\n            <button className=\"btn btn-primary btn-sm mr-2\" onClick={() => makemagick()}>\n                Get Files from db!\n            </button>\n            <button disabled={!dataFromDb.length} className=\"btn btn-primary btn-sm\" onClick={() => clearMagick()}>\n                Clear from screen\n            </button>\n            <Fragment>\n                <div>\n                There is {dataFromDb.length} in db!\n                </div>\n                {\n                    \n                    dataFromDb.map(e => (\n                        <div key={e._id}>{e._id}</div>\n                    ))\n                }\n            </Fragment>\n            <p>You clicked {count} times</p>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count + 1)}>\n                Click me +1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount(count - 1)}>\n                Click me -1\n            </button>\n            <button className=\"btn btn-primary btn-sm\" onClick={() => setCount((count = 0))}>\n                reset\n            </button>\n            <div>\n                <p>You faforite fruit is {fruit} </p>\n                <button\n                    className=\"btn btn-primary btn-sm\"\n                    onClick={() => setFruit((fruit = fruitPicker()))}\n                >\n                    pick fruit\n                </button>\n            </div>\n        </TestContext.Provider>\n    );\n};\n\nexport { Example as default };\n","const expensesReducer = (state, action) => {\n    switch (action.type) {\n    case 'POPULATE_ EXPENSES':\n        return action.expenses;\n    case 'ADD_EXPENSE':\n        return [\n            ...state,\n            { title: action.title, body: action.body }\n        ];\n    case 'REMOVE_EXPENSE':\n        return state.filter((expense) => expense.title !== action.title);\n    default:\n        return state;\n    }\n};\n\nexport { expensesReducer as default };","import React from 'react';\n\nconst expensesContext = React.createContext();\n\nexport { expensesContext as default };","import React, { useContext } from 'react';\nimport ExpensesContext from '../../../../context/expenses-context';\nimport './Expense.css';\n\nconst Expense = ({ expense }) => {\n    const { dispatch } = useContext(ExpensesContext);\n\n    return (\n        <div className = 'events_list-item'>\n            <h1>{expense.title}</h1>\n            <h2>{expense.body}</h2>\n            <button className= 'btn' onClick={() => dispatch({ type: 'REMOVE_EXPENSE', title: expense.title })}>x</button>\n        </div>\n    );\n};\n\nexport { Expense as default };","import React, { useContext } from 'react';\nimport Expense from './Expense/Expense';\nimport ExpensesContext from '../../../context/expenses-context';\nimport './ExpensesList.css';\n\nconst Expenselist = () => {\n    const { expenses } = useContext(ExpensesContext);\n\n    return expenses.map((expense) => (\n        <Expense className = 'expenses_list' key={expense.title} expense={expense} />\n    ));\n};\n\nexport { Expenselist as default };","import React, { useContext } from 'react';\nimport ExpensesContext from '../../context/expenses-context';\n\nimport './Modal.css';\n\nconst Modal2 = () => {\n    const { startAdd, cancelButton} = useContext(ExpensesContext);\n  \n  \n    return (\n      <div className=\"modal\">\n      <header className=\"modal__header\">\n        <h1>{'Add expense'}</h1>\n      </header>\n      <section className=\"modal__content\">{startAdd}</section>\n      <section className=\"modal__actions\">\n        {/* {props.canCancel && ( */}\n          <button className=\"btn\" onClick={cancelButton}>\n            Cancel\n          </button>\n        {/* )} */}\n        {/* {props.canConfirm && (\n          <button className=\"btn\" onClick={props.onConfirm}>\n            {props.confirmText}\n          </button>\n        )} */}\n      </section>\n    </div>\n    );\n  };\n  \n  export { Modal2 as default };","import React, { useState, useContext } from 'react';\nimport Modal2 from '../../Modal/Modal2';\nimport ExpensesContext from '../../../context/expenses-context';\nimport Backdrop from '../../Backdrop/Backdrop';\n\nconst AddExpenseForm = () => {\n    const { dispatch } = useContext(ExpensesContext);\n    const [title, setTitle] = useState('');\n    const [body, setBody] = useState('');\n    let [startAdd, setStartAdd] = useState(false);\n\n    const cancelButton = () => {\n        return setStartAdd(startAdd = !startAdd);\n    };\n\n    const addExpense = (e) => {\n        e.preventDefault();\n        dispatch({\n            type: 'ADD_EXPENSE',\n            title,\n            body\n        });\n        setTitle('');\n        setBody('');\n    };\n\n    return (\n        <div>\n            this is {startAdd}\n            <button className='btn' onClick={() => setStartAdd(startAdd = !startAdd)}>add expense2</button>\n            {startAdd && (\n                <ExpensesContext.Provider value={{ startAdd, cancelButton }}>\n                    <Backdrop />\n                    <form onSubmit={addExpense}>\n                        <Modal2 />\n                        <input value={title} onChange={(e) => setTitle(e.target.value)} />\n                        <textarea value={body} onChange={(e) => setBody(e.target.value)}></textarea>\n                        <button className='btn'>add expense</button>\n                    </form>\n                </ExpensesContext.Provider>\n            )}\n        </div>\n    );\n};\n\nexport { AddExpenseForm as default };","\nimport React, { useEffect, useReducer } from 'react';\nimport expensesReducer from '../reducers/expenses';\nimport ExpensesContext from '../context/expenses-context';\nimport ExpenseList from '../components/Expenses/ExpensesList/ExpensesList';\nimport AddExpense from '../components/Expenses/AddExpense/AddExpense';\n\n\nconst Expenses = () => {\n\n    const [expenses, dispatch] = useReducer(expensesReducer, []);\n\n    useEffect(() => {\n        const expenses = JSON.parse(localStorage.getItem('expenses'));\n\n        if (expenses) {\n            dispatch({ type: 'POPULATE_EXPENSES', expenses });\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('expenses', JSON.stringify(expenses));\n    }, [expenses]);\n\n\n    return (\n        <ExpensesContext.Provider value={{ expenses, dispatch }}>\n            <h1>Expenses</h1>\n            <AddExpense />\n            <ExpenseList/>\n        </ExpensesContext.Provider>\n    );\n};\n\nexport { Expenses as default };\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport AuthContext from '../../context/auth-context';\nimport './MainNavigation.css';\n\nconst mainNavigation = () => (\n  <AuthContext.Consumer>\n    {context => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h1>Budget planner</h1>\n          </div>\n          <nav className=\"main-navigation__items\">\n            <ul>\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/auth\">Authenticate</NavLink>\n                </li>\n              )}\n              <li>\n                <NavLink to=\"/events\">Events</NavLink>\n              </li>\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/bookings\">Bookings</NavLink>\n                  </li>\n                  <li>\n                    <button onClick={context.logout}>Logout</button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      );\n    }}\n  </AuthContext.Consumer>\n);\n\nexport default mainNavigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport AuthPage from './pages/Auth';\nimport BookingsPage from './pages/Bookings';\nimport EventsPage from './pages/Events';\nimport TestPage from './pages/Test';\nimport expenses from './pages/Expenses';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  state = {\n    token: null,\n    userId: null\n  };\n\n  login = (token, userId, tokenExpiration) => {\n    this.setState({ token: token, userId: userId });\n  };\n\n  logout = () => {\n    this.setState({ token: null, userId: null });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider\n            value={{\n              token: this.state.token,\n              userId: this.state.userId,\n              login: this.login,\n              logout: this.logout\n            }}\n          >\n            <MainNavigation />\n            <main className=\"main-content\">\n              <Switch>\n                <Route path=\"/test\" component={TestPage} />\n                <Route path=\"/expenses\" component={expenses} />\n                {this.state.token && <Redirect from=\"/\" to=\"/events\" exact />}\n                {this.state.token && (\n                  <Redirect from=\"/auth\" to=\"/events\" exact />\n                )}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} />\n                )}\n                <Route path=\"/events\" component={EventsPage} />\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} />\n                )}\n                {!this.state.token && <Redirect to=\"/auth\" exact />}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}